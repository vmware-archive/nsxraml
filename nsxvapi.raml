#%RAML 0.8
title: VMware NSX for vSphere
baseUri: https://{nsxmanager}/api
documentation:
 - title: Introduction
   content: !include documentation/introduction.md
 - title: part-number
   content: EN-001545-07
baseUriParameters:
  nsxmanager:
    displayName: nsxManager
    description: Hostname or IP address of the NSX Manager.
version: 6.2.4
securedBy: [basic]
schemas:
  - advancedConfigUpdate: !include schemas/advancedConfigUpdate.xsd
    allUsersUpdate: !include schemas/allUsersUpdate.xsd
    applianceMgrBackupSettingsUpdate: !include schemas/applianceMgrBackupSettingsUpdate.xsd
    applianceUpdate: !include schemas/applianceUpdate.xsd
    applicationProfilesCreate: !include schemas/applicationProfilesCreate.xsd
    applicationProfileUpdate: !include schemas/applicationProfileUpdate.xsd
    appRulesCreate: !include schemas/appRulesCreate.xsd
    appRuleUpdate: !include schemas/appRuleUpdate.xsd
    arpMACUpdate: !include schemas/arpMACUpdate.xsd
    authSettingsUpdate: !include schemas/authSettingsUpdate.xsd
    autoConfigUpdate: !include schemas/autoConfigUpdate.xsd
    bridingUpdate: !include schemas/bridingUpdate.xsd
    certificateCreate: !include schemas/certificateCreate.xsd
    certificateSelfSignedCreate: !include schemas/certificateSelfSignedCreate.xsd
    clientConfigUpdate: !include schemas/clientConfigUpdate.xsd
    cliSettingsUpdate: !include schemas/cliSettingsUpdate.xsd
    clusterUpdate: !include schemas/clusterUpdate.xsd
    controller: !include schemas/controller.xsd
    controllerSyslog: !include schemas/controllerSyslog.xsd
    crlCreate: !include schemas/crlCreate.xsd
    csrCreate: !include schemas/csrCreate.xsd
    dataCollectionKillSwitchToggle: !include schemas/dataCollectionKillSwitchToggle.xsd
    dataCollectionVMCreate: !include schemas/dataCollectionVMCreate.xsd
    defaultFirewallPolicyUpdate: !include schemas/defaultFirewallPolicyUpdate.xsd
    dfwConfigImport: !include schemas/dfwConfigImport.xsd
    dfwDraftsCreate: !include schemas/dfwDraftsCreate.xsd
    dfwDraftUpdate: !include schemas/dfwDraftUpdate.xsd
    dfwIPFixUpdate: !include schemas/dfwIPFixUpdate.xsd
    dfwPerformanceUpdate: !include schemas/dfwPerformanceUpdate.xsd
    dfwSection: !include schemas/dfwSection.xsd
    dfwThresholdsUpdate: !include schemas/dfwThresholdsUpdate.xsd
    dfwRule: !include schemas/dfwRule.xsd
    dhcpRelayUpdate: !include schemas/dhcpRelayUpdate.xsd
    dhcpUpdate: !include schemas/dhcpUpdate.xsd
    dhcpPoolCreate: !include schemas/dhcpPoolCreate.xsd
    dhcpStaticBindingCreate: !include schemas/dhcpStaticBindingCreate.xsd
    dlpIncludeSecGroupUpdate: !include schemas/dlpIncludeSecGroupUpdate.xsd
    dlpPolicyRegulationsUpdate: !include schemas/dlpPolicyRegulationsUpdate.xsd
    dlpExcludeAreaUpdate: !include schemas/dlpExcludeAreaUpdate.xsd
    dlpExcludeSecGroupUpdate: !include schemas/dlpExcludeSecGroupUpdate.xsd
    dlpFileFiltersUpdate: !include schemas/dlpFileFiltersUpdate.xsd
    dlpRegexClassificationValueUpdate: !include schemas/dlpRegexClassificationValueUpdate.xsd
    dlpScanningUpdate: !include schemas/dlpScanningUpdate.xsd
    applianceDnsClientUpdate: !include schemas/applianceDnsClientUpdate.xsd
    domainCreate: !include schemas/domainCreate.xsd
    edgeDnsUpdate: !include schemas/edgeDnsUpdate.xsd
    edgeNatConfig: !include schemas/edgeNatConfig.xsd
    edgeNatRulesCreate: !include schemas/edgeNatRulesCreate.xsd
    edgeNatRuleUpdate: !include schemas/edgeNatRuleUpdate.xsd
    eLogServerCreate: !include schemas/eLogServerCreate.xsd
    firewallRuleUpdate: !include schemas/firewallRuleUpdate.xsd
    firewallRulesCreate: !include schemas/firewallRulesCreate.xsd
    flowsExcludeCreate: !include schemas/flowsExcludeCreate.xsd
    globalFirewallConfigUpdate: !include schemas/globalFirewallConfigUpdate.xsd
    hierarchyCreate: !include schemas/hierarchyCreate.xsd
    highAvailabilityCreate: !include schemas/highAvailabilityCreate.xsd
    installPackagesCreate: !include schemas/installPackagesCreate.xsd
    installPackageUpdate: !include schemas/installPackageUpdate.xsd
    interfacesCreate: !include schemas/interfacesCreate.xsd
    ipAddressRequest: !include schemas/ipAddressRequest.xsd
    ipPool: !include schemas/ipPool.xsd
    ipPoolUpdate: !include schemas/ipPoolUpdate.xsd
    ipsetCreate: !include schemas/ipsetCreate.xsd
    ipsetUpdate: !include schemas/ipsetUpdate.xsd
    layer3RedirectSectionsCreate: !include schemas/layer3RedirectSectionsCreate.xsd
    layer3RedirectSectionUpdate: !include schemas/layer3RedirectSectionUpdate.xsd
    layoutUpdate: !include schemas/layoutUpdate.xsd
    lbMonitorsCreate: !include schemas/lbMonitorsCreate.xsd
    lbMonitorUpdate: !include schemas/lbMonitorUpdate.xsd
    ldapServerCreate: !include schemas/ldapServerCreate.xsd
    loadBalancerConfig: !include schemas/loadBalancerConfig.xsd
    logicalSwitchCreate: !include schemas/logicalSwitchCreate.xsd
    logicalSwitchUpdate: !include schemas/logicalSwitchUpdate.xsd
    logicalSwitchVmAttach: !include schemas/logicalSwitchVmAttach.xsd
    logicalSwitchConnCheck: !include schemas/logicalSwitchConnCheck.xsd
    logicalSwitchPing: !include schemas/logicalSwitchPing.xsd
    macSetCreateUpdate: !include schemas/macSetCreateUpdate.xsd
    mgmtInterfaceUpdate: !include schemas/mgmtInterfaceUpdate.xsd
    netExtipPoolsCreate: !include schemas/netExtipPoolsCreate.xsd
    netExtipPoolsUpdate: !include schemas/netExtipPoolsUpdate.xsd
    nsxControllerPasswordUpdate: !include schemas/nsxControllerPasswordUpdate.xsd
    nsxCliExecute: !include schemas/nsxCliExecute.xsd
    nsxEdgesCreate: !include schemas/nsxEdgesCreate.xsd
    edgeDnsClientUpdate: !include schemas/edgeDnsClientUpdate.xsd
    nsxEdgeUpdate: !include schemas/nsxEdgeUpdate.xsd
    nsxEdgeFirewallConfigUpdate: !include schemas/nsxEdgeFirewallConfigUpdate.xsd
    nwFabricConfig: !include schemas/nwFabricConfig.xsd
    nwfabricClustersUpdate: !include schemas/nwfabricClustersUpdate.xsd
    nwfabricHostsUpdate: !include schemas/nwfabricHostsUpdate.xsd
    poolsCreate: !include schemas/poolsCreate.xsd
    poolUpdate: !include schemas/poolUpdate.xsd
    privateNetworksCreate: !include schemas/privateNetworksCreate.xsd
    privateNetworkUpdate: !include schemas/privateNetworkUpdate.xsd
    routingBGPUpdate: !include schemas/routingBGPUpdate.xsd
    routingConfigUpdate: !include schemas/routingConfigUpdate.xsd
    routingConfigStaticUpdate: !include schemas/routingConfigStaticUpdate.xsd
    routingGlobalConfigUpdate: !include schemas/routingGlobalConfigUpdate.xsd
    routingISISUpdate: !include schemas/routingISISUpdate.xsd
    routingOSPFUpdate: !include schemas/routingOSPFUpdate.xsd
    rulesCreate: !include schemas/rulesCreate.xsd
    ruleUpdate: !include schemas/ruleUpdate.xsd
    scriptCreate: !include schemas/scriptCreate.xsd
    scriptFileIDUpdate: !include schemas/scriptFileIDUpdate.xsd
    scriptUpdate: !include schemas/scriptUpdate.xsd
    secGroupBulkCreate: !include schemas/secGroupBulkCreate.xsd
    secGroupBulkUpdate: !include schemas/secGroupBulkUpdate.xsd
    secGroupObjectUpdate: !include schemas/secGroupObjectUpdate.xsd
    securityFabricCreate: !include schemas/securityFabricCreate.xsd
    securityPolicyCreate: !include schemas/securityPolicyCreate.xsd
    securityPolicyIDUpdate: !include schemas/securityPolicyIDUpdate.xsd
    securityTagCreate: !include schemas/securityTagCreate.xsd
    serverSettingsUpdate: !include schemas/serverSettingsUpdate.xsd
    serviceGroupsCreate: !include schemas/serviceGroupsCreate.xsd
    serviceGroupUpdate: !include schemas/serviceGroupUpdate.xsd
    servicesScopeCreate: !include schemas/servicesScopeCreate.xsd
    serviceUpdate: !include schemas/serviceUpdate.xsd
    serviceUpgrade: !include schemas/serviceUpgrade.xsd
    solutionIPPortSet: !include schemas/solutionIPPortSet.xsd
    spoofGuardPoliciesCreate: !include schemas/spoofGuardPoliciesCreate.xsd
    spoofGuardPolicyApprove: !include schemas/spoofGuardPolicyApprove.xsd
    spoofGuardPolicyUpdate: !include schemas/spoofGuardPolicyUpdate.xsd
    sslVPNUpdate: !include schemas/sslVPNUpdate.xsd
    ssoConfig: !include schemas/ssoConfig.xsd
    syslogUpdate: !include schemas/syslogUpdate.xsd
    systemLocaleUpdate: !include schemas/systemLocaleUpdate.xsd
    systemSyslogServerUpdate: !include schemas/systemSyslogServerUpdate.xsd
    systemTimeUpdate: !include schemas/systemTimeUpdate.xsd
    traceflowCreate: !include schemas/traceflowCreate.xsd
    universalSyncConfigurationNsxManagersCreate: !include schemas/universalSyncConfigurationNsxManagersCreate.xsd
    universalSyncConfigurationManagersUpdate: !include schemas/universalSyncConfigurationManagersUpdate.xsd
    userRoleMgmtCreate: !include schemas/userRoleMgmtCreate.xsd
    userRoleMgmtUpdate: !include schemas/userRoleMgmtUpdate.xsd
    usersCreate: !include schemas/usersCreate.xsd
    usersUpdate: !include schemas/usersUpdate.xsd
    vcConfig: !include schemas/vcConfig.xsd
    vdsContext: !include schemas/vdsContext.xsd
    vdnSegment: !include schemas/vdnSegment.xsd
    vdnSegmentUpdate: !include schemas/vdnSegmentUpdate.xsd
    vdnMulticast: !include schemas/vdnMulticast.xsd
    vdnMulticastUpdate: !include schemas/vdnMulticastUpdate.xsd
    vdnScopeCreate: !include schemas/vdnScopeCreate.xsd
    vdnScopeEdit: !include schemas/vdnScopeEdit.xsd
    vdnScopeUpdate: !include schemas/vdnScopeUpdate.xsd
    virtualServersCreate: !include schemas/virtualServersCreate.xsd
    vShieldVendorCreate: !include schemas/vShieldVendorCreate.xsd
    vShieldSolutionCreate: !include schemas/vShieldSolutionCreate.xsd
    vShieldSolutionActivate: !include schemas/vShieldSolutionActivate.xsd
    webResourcesCreate: !include schemas/webResourcesCreate.xsd
securitySchemes:
  - basic:
      type: Basic Authentication
/2.0/vdn/switches:
  displayName: vdsManage
  description: |
    Working with vSphere Distributed Switches
    ===========
  post:
    displayName: vdsPrepare
    description: |
      Prepare a vSphere Distributed Switch.
      ___
      The MTU is the maximum amount of data that can be transmitted in one
      packet before it is divided into smaller packets. VXLAN frames are slightly
      larger in size because of the traffic encapsulation, so the MTU required
      is higher than the standard MTU. You must set the MTU for each switch to
      1600 or higher.
    body:
      application/xml:
        example: |
          <vdsContext>
            <switch>
              <objectId>dvs-26</objectId>
              <type>
                <typeName>DistributedVirtualSwitch</typeName>
              </type>
              <name></name>
              <revision>0</revision>
              <objectTypeName>DistributedVirtualSwitch</objectTypeName>
            </switch>
            <teaming>ETHER_CHANNEL</teaming>
            <mtu>mtu-value</mtu>
          </vdsContext>
        schema: vdsContext
  get:
    displayName: vdsList
    description: |
      Retrieve information about all vSphere Distributed Switches.
    responses:
      200:
        body:
          application/xml:
            example: |
              <vdsContexts>
                <vdsContext>
                  <switch>
                    <objectId>dvs-35</objectId>
                    <objectTypeName>VmwareDistributedVirtualSwitch</objectTypeName>
                    <vsmUuid>423A993F-BEE6-1285-58F1-54E48D508D90</vsmUuid>
                    <nodeId>916287b3-761d-430b-8ab2-83878dfe3e7f</nodeId>
                    <revision>10</revision>
                    <type>
                      <typeName>VmwareDistributedVirtualSwitch</typeName>
                    </type>
                    <name>vds-site-a</name>
                    <scope>
                      <id>datacenter-21</id>
                      <objectTypeName>Datacenter</objectTypeName>
                      <name>Datacenter Site A</name>
                    </scope>
                    <clientHandle></clientHandle>
                    <extendedAttributes/>
                    <isUniversal>false</isUniversal>
                    <universalRevision>0</universalRevision>
                  </switch>
                  <mtu>1600</mtu>
                  <teaming>FAILOVER_ORDER</teaming>
                  <uplinkPortName>Uplink 4</uplinkPortName>
                  <promiscuousMode>false</promiscuousMode>
                </vdsContext>
                <vdsContext>
                  <switch>
                    <objectId>dvs-47</objectId>
                    <objectTypeName>VmwareDistributedVirtualSwitch</objectTypeName>
                    ...
                  </switch>
                  ...
                </vdsContext>
              </vdsContexts>
  /datacenter/{datacenterID}:
    displayName: vdsInDc
    description: |
      Working with vSphere Distributed Switches in a Datacenter
      ------
    uriParameters:
      datacenterID:
          required: true
          displayName: datacenterID
          description: |
            A valid datacenter ID (e.g. datacenter-21)
    get:
      displayName: vdsListInDc
      description: |
        Retrieve information about all vSphere Distributed Switches in the specified datacenter.
      responses:
        200:
          body:
            application/xml:
              example: |
                <vdsContexts>
                  <vdsContext>
                    <switch>
                      <objectId>dvs-35</objectId>
                      <objectTypeName>VmwareDistributedVirtualSwitch</objectTypeName>
                      <vsmUuid>423A993F-BEE6-1285-58F1-54E48D508D90</vsmUuid>
                      <nodeId>916287b3-761d-430b-8ab2-83878dfe3e7f</nodeId>
                      <revision>10</revision>
                      <type>
                        <typeName>VmwareDistributedVirtualSwitch</typeName>
                      </type>
                      <name>vds-site-a</name>
                      <scope>
                        <id>datacenter-21</id>
                        <objectTypeName>Datacenter</objectTypeName>
                        <name>Datacenter Site A</name>
                      </scope>
                      <clientHandle></clientHandle>
                      <extendedAttributes/>
                      <isUniversal>false</isUniversal>
                      <universalRevision>0</universalRevision>
                    </switch>
                    <mtu>1600</mtu>
                    <teaming>FAILOVER_ORDER</teaming>
                    <uplinkPortName>Uplink 4</uplinkPortName>
                    <promiscuousMode>false</promiscuousMode>
                  </vdsContext>
                  <vdsContext>
                    <switch>
                      <objectId>dvs-47</objectId>
                      <objectTypeName>VmwareDistributedVirtualSwitch</objectTypeName>
                      ...
                    </switch>
                    ...
                  </vdsContext>
                </vdsContexts>
  /{vdsId}:
    displayName: vds
    description: |
      Working With a Specific vSphere Distributed Switch
      ------
    uriParameters:
      vdsId:
          required: true
          displayName: switchId
          description: |
            A valid vSphere Distributed Switch ID (e.g. dvs-35)
    get:
      displayName: vdsShow
      description: |
        Retrieve information about the specified vSphere Distributed Switch.
      responses:
        200:
          body:
            application/xml:
              example: |
                <vdsContext>
                  <switch>
                    <objectId>dvs-35</objectId>
                    <objectTypeName>VmwareDistributedVirtualSwitch</objectTypeName>
                    <vsmUuid>423A993F-BEE6-1285-58F1-54E48D508D90</vsmUuid>
                    <nodeId>916287b3-761d-430b-8ab2-83878dfe3e7f</nodeId>
                    <revision>10</revision>
                    <type>
                      <typeName>VmwareDistributedVirtualSwitch</typeName>
                    </type>
                    <name>vds-site-a</name>
                    <scope>
                      <id>datacenter-21</id>
                      <objectTypeName>Datacenter</objectTypeName>
                      <name>Datacenter Site A</name>
                    </scope>
                    <clientHandle></clientHandle>
                    <extendedAttributes/>
                    <isUniversal>false</isUniversal>
                    <universalRevision>0</universalRevision>
                  </switch>
                  <mtu>1600</mtu>
                  <teaming>FAILOVER_ORDER</teaming>
                  <uplinkPortName>Uplink 4</uplinkPortName>
                  <promiscuousMode>false</promiscuousMode>
                </vdsContext>
    delete:
      displayName: vdsDelete
      description: |
        Delete the specified vSphere Distributed Switch.
/2.0/vdn/config:
  displayName: vdnConfig
  description: |
    Working with Segement ID Pools and Multicast Ranges
    ========
  /segments:
    displayName: vdnSegmentPools
    description: |
      Working with segment ID pools
      -------------
      Segment ID pools (also called segment ID ranges) provide virtual network
      identifiers (VNIs) to logical switches.
      ___
      You must configure a segment ID pool for each NSX Manager. You can have
      more than one segment ID pool. The segment ID pool includes the beginning
      and ending IDs.
      ___
      You should not configure more than 10,000 VNIs in a single vCenter
      server because vCenter limits the number of dvPortgroups to 10,000.
      ___
      If any of your transport zones will use multicast or hybrid replication
      mode, you must also configure a multicast address range.
    post:
      displayName: vdnSegmentPoolAdd
      description: |
        Add a segment ID pool.
        ___
        * **name** - Required property.
        * **desc** - Optional property.
        * **begin** - Required property. Minimum value is *5000*
        * **end** - Required property. Maximum value is *16777216*
      queryParameters:
          isUniversal:
            displayName: isUniversal
            description: |
              Set to *true* when creating a universal segment ID pool.
            type: boolean
            required: false
      body:
        application/xml:
          example: |
            <segmentRange>
              <name>Segment 1</name>
              <desc>Segment Range 1</desc>
              <begin>5000</begin>
              <end>12999</end>
            </segmentRange>
          schema: vdnSegment
    get:
      displayName: vdnSegmentPoolList
      description: |
        Retrieve information about all segment ID pools.
      responses:
        200:
          body:
            application/xml:
              example: |
                <segmentRanges>
                  <segmentRange>
                    <id>1</id>
                    <name>Local Segments</name>
                    <desc>Local Segment ID pool</desc>
                    <begin>5000</begin>
                    <end>5999</end>
                    <isUniversal>false</isUniversal>
                    <universalRevision>0</universalRevision>
                  </segmentRange>
                  <segmentRange>
                    <id>3</id>
                    <name>Universal-Segments</name>
                    <desc>Universal segment ID pool</desc>
                    <begin>200000</begin>
                    <end>201000</end>
                    <isUniversal>true</isUniversal>
                    <universalRevision>2</universalRevision>
                  </segmentRange>
                </segmentRanges>
    /{segmentPoolId}:
      displayName: vdnSegmentPool
      description: |
        Working With a Specific Segment ID Pool
        ------
      uriParameters:
        segmentPoolId:
          required: true
          displayName: segmentPoolId
          description: A valid *segmentPoolId*
      get:
        displayName: vdnSegmentPoolShow
        description: |
          Retrieve information about the specified segment ID pool.
        responses:
          200:
            body:
              application/xml:
                example: |
                  <segmentRange>
                    <id>1</id>
                    <name>Local Segments</name>
                    <desc>Local Segment ID pool</desc>
                    <begin>5000</begin>
                    <end>5999</end>
                    <isUniversal>false</isUniversal>
                    <universalRevision>0</universalRevision>
                  </segmentRange>
      put:
        displayName: vdnSegmentPoolChange
        description: |
          Update the specified segment ID pool.
          ___
          If the segment ID pool is universal you must send the API request to
          the primary NSX Manager.
        body:
          application/xml:
            example: |
              <segmentRange>
                <desc>Local Segment ID pool expanded</desc>
                <end>6999</end>
              </segmentRange>
            schema: vdnSegmentUpdate
      delete:
        displayName: vdnSegmentPoolDelete
        description: |
          Delete the specified segment ID pool.
          ___
          If the segment ID pool is universal you must send the API request to
          the primary NSX Manager.
  /multicasts:
    displayName: vdnMulticastPools
    description: |
      Working with Multicast Address Ranges
      ------
      If any of your transport zones will use multicast or hybrid replication
      mode, you must add a multicast address range (also called a multicast
      address pool). Specifying a multicast address range helps in spreading
      traffic across your network to avoid overloading a single multicast
      address.
    post:
      displayName: vdnMulticastPoolAdd
      description: |
        Add a multicast address range for logical switches.
        ___
        The address range includes the beginning and ending addresses.
      queryParameters:
          isUniversal:
            displayName: isUniversal
            description: |
              Set to *true* when creating a universal multicast address range.
            type: boolean
            required: false
      body:
        application/xml:
          example: |
            <multicastRange>
              <name>Range 2</name>
              <begin>237.0.0.0</begin>
              <end>237.255.255.255</end>
            </multicastRange>
          schema: vdnMulticast
    get:
      displayName: vdnMulticastPoolList
      description: |
        Retrieve information about all configured multicast address ranges.
        ___
        Universal multicast address ranges have the property isUniversal
        set to *true*.
      responses:
        200:
          body:
            application/xml:
              example: |
                <multicastRanges>
                  <multicastRange>
                    <id>5</id>
                    <name>239.0.0.0-239.255.255.255</name>
                    <begin>239.0.0.0</begin>
                    <end>239.255.255.255</end>
                    <isUniversal>false</isUniversal>
                    <universalRevision>0</universalRevision>
                  </multicastRange>
                  <multicastRange>
                    <id>10</id>
                    <name>Range 2</name>
                    <begin>237.0.0.0</begin>
                    <end>237.255.255.255</end>
                    <isUniversal>false</isUniversal>
                    <universalRevision>0</universalRevision>
                  </multicastRange>
                </multicastRanges>
    /{multicastAddresssRangeId}:
      displayName: vdnMulticastPool
      description: |
        Working With a Specific Multicast Address Range
        --------
      uriParameters:
        multicastAddresssRangeId:
          required: true
          displayName: multicastAddresssRangeId
          description: A valid multicast address range ID
      get:
        displayName: vdnMulticastPoolShow
        description: |
          Retrieve information about the specified multicast address range.
        responses:
          200:
            body:
              application/xml:
                example: |
                  <multicastRange>
                    <id>5</id>
                    <name>239.0.0.0-239.255.255.255</name>
                    <begin>239.0.0.0</begin>
                    <end>239.255.255.255</end>
                    <isUniversal>false</isUniversal>
                    <universalRevision>0</universalRevision>
                  </multicastRange>
      put:
        displayName: vdnMulticastPoolChange
        description: |
          Update the specified multicast address range.
          ___
          If the multicast address range is universal you must send the API
          request to the primary NSX Manager.
        body:
          application/xml:
            example: |
              <multicastRange>
                <name>Extended range 2</name>
                <desc>Extended range 2</desc>
                <end>238.255.255.255</end>
              </multicastRange>
            schema: vdnMulticastUpdate
      delete:
        displayName: vdnSegmentPoolDelete
        description: |
          Delete the specified multicast address range.
          ___
          If the multicast address range is universal you must send the API
          request to the primary NSX Manager.
  /vxlan/udp/port:
    displayName: vdnConfigUDP
    description: |
      Working with the VXLAN Port Configuration
      ----------
    get:
      displayName: vdnConfigUDPShow
      description: |
        Retrieve the UDP port configured for VXLAN traffic.
      responses:
        200:
          body:
            application/xml:
              example: |
                <int>4789</int>
    /{portNumber}:
      displayName: vdnConfigUDPUpdate
      description: |
        Update the VXLAN Port Configuration
        -------
      uriParameters:
        portNumber:
          required: true
          displayName: portNumber
          description: A valid UDP port for VXLAN
      put:
      # updated 6.2.3: Port change is no longer disruptive. New force query
      # parameter allows port change using the previous disruptive mechanism.
        displayName: vdnConfigUDPUpdate
        description: |
          Update the VXLAN port configuration to use port *portNumber*.
          ___
          This method changes the VXLAN port in a three phrase process, avoiding
          disruption of VXLAN traffic. In a cross-vCenter NSX environment,
          change the VXLAN port on the primary NSX Manager to propagate this
          change on all NSX Managers and hosts in the cross-vCenter NSX
          environment.

          **Method history:**

          Release | Modification
          --------|-------------
          6.2.3 | Method updated. Port change is now non-disruptive, and propagates to secondary NSX Managers if performed on the primary NSX Manager. Force parameter added.
        queryParameters:
          force:
            displayName: force
            type: boolean
            required: false
            description: |
              Set to *true* to force the change in VXLAN port.
              ___
              This updates the port configuration on the hosts directly, and
              might cause a disruption in VXLAN traffic. In a cross-vCenter
              NSX environment, this does not change the port on all NSX
              Managers.
    /taskStatus:
      displayName: vdnConfigUDPUpdateStatus
      description: |
        VXLAN Port Configuration Update Status
      get:
        displayName: vdnConfigUDPUpdateStatusRead
        description: |
          Retrieve the status of the VXLAN port configuration update.

          **Method history:**

          Release | Modification
          --------|-------------
          6.2.3 | Method introduced.
        responses:
          200:
            body:
              application/xml:
                example: |
                  <vxlanPortUpdatingStatus>
                    <prevPort>8472</prevPort>
                    <targetPort>4789</targetPort>
                    <taskPhase>PHASE_TWO</taskPhase>
                    <taskStatus>PAUSED</taskStatus>
                  </vxlanPortUpdatingStatus>
  /resources/allocated:
    displayName: allocatedResources
    description: |
      Working with Allocated Resources
      ------
    get:
      displayName: allocatedResourcesRead
      description: |
        Retrieve information about allocated segment IDs or multicast
        addresses.
      queryParameters:
        type:
          displayName: type
          description: set to **segmentId** or **multicastAddress**
        pagesize:
          displayName: pagesize
          description: !include documentation/reuse/pagesize-1024
          default: 256
        startindex:
          displayName: startindex
          description: !include documentation/reuse/startindex
          default: 0
/2.0/vdn/scopes:
  displayName: vdnScopes
  description: |
    Working with Transport Zones
    ==============
  get:
    displayName: vdnScopesList
    description: |
      Retrieve information about all transport zones (also known as network
      scopes).
    responses:
      200:
        body:
          application/xml:
            example: |
              <vdnScopes>
                <vdnScope>
                  <objectId>vdnscope-1</objectId>
                  <objectTypeName>VdnScope</objectTypeName>
                  <vsmUuid>423A993F-BEE6-1285-58F1-54E48D508D90</vsmUuid>
                  <nodeId>916287b3-761d-430b-8ab2-83878dfe3e7f</nodeId>
                  <revision>0</revision>
                  <type>
                    <typeName>VdnScope</typeName>
                  </type>
                  <name>Local-Transport-Zone-A</name>
                  <description></description>
                  <clientHandle></clientHandle>
                  <extendedAttributes/>
                  <isUniversal>false</isUniversal>
                  <universalRevision>0</universalRevision>
                  <id>vdnscope-1</id>
                  <clusters>
                    <cluster>
                      <cluster>
                        <objectId>domain-c33</objectId>
                        <objectTypeName>ClusterComputeResource</objectTypeName>
                        <vsmUuid>423A993F-BEE6-1285-58F1-54E48D508D90</vsmUuid>
                        <nodeId>916287b3-761d-430b-8ab2-83878dfe3e7f</nodeId>
                        <revision>11</revision>
                        <type>
                          <typeName>ClusterComputeResource</typeName>
                        </type>
                        <name>Compute Cluster A</name>
                        <scope>
                          <id>datacenter-21</id>
                          <objectTypeName>Datacenter</objectTypeName>
                          <name>Datacenter Site A</name>
                        </scope>
                        <clientHandle></clientHandle>
                        <extendedAttributes/>
                        <isUniversal>false</isUniversal>
                        <universalRevision>0</universalRevision>
                      </cluster>
                    </cluster>
                    <cluster>
                      <cluster>
                        <objectId>domain-c41</objectId>
                        <objectTypeName>ClusterComputeResource</objectTypeName>
                        ...
                        <isUniversal>false</isUniversal>
                        <universalRevision>0</universalRevision>
                      </cluster>
                    </cluster>
                  </clusters>
                  <virtualWireCount>4</virtualWireCount>
                  <controlPlaneMode>UNICAST_MODE</controlPlaneMode>
                </vdnScope>
                <vdnScope>
                  <objectId>universalvdnscope</objectId>
                  <objectTypeName>VdnScope</objectTypeName>
                  <vsmUuid>423A993F-BEE6-1285-58F1-54E48D508D90</vsmUuid>
                  <nodeId>916287b3-761d-430b-8ab2-83878dfe3e7f</nodeId>
                  <revision>1</revision>
                  <type>
                    <typeName>VdnScope</typeName>
                  </type>
                  <name>Universal-Transport-Zone</name>
                  <clientHandle></clientHandle>
                  <extendedAttributes/>
                  <isUniversal>true</isUniversal>
                  <universalRevision>0</universalRevision>
                  <id>universalvdnscope</id>
                  <clusters>
                    <cluster>
                      <cluster>
                        <objectId>domain-c33</objectId>
                        <objectTypeName>ClusterComputeResource</objectTypeName>
                        ...
                        <isUniversal>false</isUniversal>
                        <universalRevision>0</universalRevision>
                      </cluster>
                    </cluster>
                    <cluster>
                      <cluster>
                        <objectId>domain-c41</objectId>
                        <objectTypeName>ClusterComputeResource</objectTypeName>
                        ...
                        <isUniversal>false</isUniversal>
                        <universalRevision>0</universalRevision>
                      </cluster>
                    </cluster>
                  </clusters>
                  <virtualWireCount>4</virtualWireCount>
                  <controlPlaneMode>UNICAST_MODE</controlPlaneMode>
                </vdnScope>
              </vdnScopes>
  post:
    displayName: vdnScopeCreate
    description: |
      Create a transport zone.

      Request body parameters:

        * **name** - Required. The name of the transport zone.
        * **description** - Optional. Description of the transport zone.
        * **objectId** - Required. The cluster object ID from vSphere. One or more are
          required.
        * **controlPlaneMode** - Optional. The control plane mode. It can be
          one of the following:
            * *UNICAST_MODE*
            * *HYBRID_MODE*
            * *MULTICAST_MODE*
    queryParameters:
      isUniversal:
        displayName: isUniversal
        description: |
          Set the **isUniversal** property to *true* when creating a universal
          transport zone.
        type: boolean
        required: false
    body:
      application/xml:
        example: |
          <vdnScope>
            <name>Local-Transport-Zone-B</name>
            <clusters>
              <cluster>
                <cluster>
                  <objectId>domain-c7</objectId>
                </cluster>
              </cluster>
            </clusters>
            <controlPlaneMode>UNICAST_MODE</controlPlaneMode>
          </vdnScope>
        schema: vdnScopeCreate
  /{scopeId}:
    displayName: vdnScope
    description: |
      Working with a Specific Transport Zone
      ---------
    uriParameters:
      scopeId:
        required: true
        displayName: scopeId
        description: A valid transport zone ID (vdnScope objectId)
    get:
      displayName: vdnScopeProperties
      description: |
        Retrieve information about the specified transport zone.
      responses:
        200:
          body:
            application/xml:
              example: |
                <vdnScope>
                  <objectId>vdnscope-1</objectId>
                  <objectTypeName>VdnScope</objectTypeName>
                  <vsmUuid>423A993F-BEE6-1285-58F1-54E48D508D90</vsmUuid>
                  <nodeId>916287b3-761d-430b-8ab2-83878dfe3e7f</nodeId>
                  <revision>0</revision>
                  <type>
                    <typeName>VdnScope</typeName>
                  </type>
                  <name>Local-Transport-Zone-A</name>
                  <description></description>
                  <clientHandle></clientHandle>
                  <extendedAttributes/>
                  <isUniversal>false</isUniversal>
                  <universalRevision>0</universalRevision>
                  <id>vdnscope-1</id>
                  <clusters>
                    <cluster>
                      <cluster>
                        <objectId>domain-c33</objectId>
                        <objectTypeName>ClusterComputeResource</objectTypeName>
                        <vsmUuid>423A993F-BEE6-1285-58F1-54E48D508D90</vsmUuid>
                        <nodeId>916287b3-761d-430b-8ab2-83878dfe3e7f</nodeId>
                        <revision>11</revision>
                        <type>
                          <typeName>ClusterComputeResource</typeName>
                        </type>
                        <name>Compute Cluster A</name>
                        <scope>
                          <id>datacenter-21</id>
                          <objectTypeName>Datacenter</objectTypeName>
                          <name>Datacenter Site A</name>
                        </scope>
                        <clientHandle></clientHandle>
                        <extendedAttributes/>
                        <isUniversal>false</isUniversal>
                        <universalRevision>0</universalRevision>
                      </cluster>
                    </cluster>
                    <cluster>
                      <cluster>
                        <objectId>domain-c41</objectId>
                        ...
                      </cluster>
                    </cluster>
                  </clusters>
                  <virtualWireCount>4</virtualWireCount>
                  <controlPlaneMode>UNICAST_MODE</controlPlaneMode>
                </vdnScope>
    post:
      displayName: vdnScopeChange
      description: |
        Update the specified transport zone.
        ___
        You can add a cluster to or delete a cluster from a transport zone.
        ___
        You can also repair missing portgroups. For every logical switch
        created, NSX creates a corresponding portgroup in vCenter. If the
        portgroup is lost for any reason, the logical switch will stop
        functioning. The repair action recreates any missing portgroups.
      queryParameters:
        action:
          displayName: action
          description: |
            The **action** parameter values are:
              * *expand* - add a cluster to a transport zone.
              * *shrink* - remove a cluster from a transport zone.
              * *repair* - recreate missing distributed port groups.
            ___
          required: true
      body:
        application/xml:
          example: |
            <vdnScope>
             <objectId>universalvdnscope</objectId>
              <clusters>
               <cluster>
                <cluster>
                 <objectId>domain-c7</objectId>
                 </cluster>
               </cluster>
              </clusters>
            </vdnScope>
          schema: vdnScopeEdit
    delete:
      displayName: vdnScopeDelete
      description: |
        Delete the specified transport zone.
    /attributes:
      displayName: vdnScopeAttribUpdate
      description: |
        Working with transport zone attributes.
      put:
        displayName: vdnScopeAttribUpdate
        description: |
          Update the attributes of a transport zone.
          ___
          For example, you can update the name, description, or control plane
          mode. You must include the cluster object IDs for the transport zone
          in the request body.
        body:
          application/xml:
            example: |
              <vdnScope>
                <objectId>vdnscope-1</objectId>
                <name>Local-Transport-Zone Site-B</name>
                <clusters>
                  <cluster>
                    <cluster>
                      <objectId>domain-c7</objectId>
                    </cluster>
                  </cluster>
                </clusters>
              </vdnScope>
            schema: vdnScopeUpdate
    /conn-check/multicast:
      displayName: vdnScopeConnCheck
      description: |
        Testing multicast group connectivity.
        -------
      post:
        displayName: vdnScopeConnCheck
        description: |
          Test multicast group connectivity.
          ___
          Test multicast group connectivity between two hosts connected to the
          specified transport zone.
          ___
          Parameter **packetSizeMode** has one of the following values:
          * *0* - VXLAN standard packet size
          * *1* - minimum packet size
          * *2* - customized packet size.
          If you set **packetSizeMode** to *2*, you must specify the size using
          the **packetSize** parameter.
        body:
          application/xml:
            example: |
              <testParameters>
                <gateway>172.23.233.1</gateway>
                <packetSizeMode>0</packetSizeMode>
                <packetSize>1600</packetSize>
                <sourceHost>
                  <hostId>host-9</hostId>
                  <switchId>dvs-22</switchId>
                  <vlanId>54</vlanId>
                </sourceHost>
                <destinationHost>
                  <hostId>host-92</hostId>
                  <switchId>dvs-22</switchId>
                  <vlanId>54</vlanId>
                </destinationHost>
              </testParameters>
/2.0/vdn/scopes/{scopeId}/virtualwires:
  displayName: logicalSwitches
  description: |
    Working with Logical Switches in a Specific Transport Zone
    ==================
  uriParameters:
      scopeId:
        required: true
        displayName: scopeId
        description: |
          A valid tranzport zone ID (vdnScope objectId).
  get:
    displayName: logicalSwitchList
    description: |
      Retrieve information about all logical switches in the specified
      transport zone (network scope).
    queryParameters:
      startIndex:
          displayName: startIndex
          description: !include documentation/reuse/startindex
          default: 0
      pageSize:
          displayName: pageSize
          description: !include documentation/reuse/pagesize-1024
          default: 20
  post:
    displayName: logicalSwitchCreate
    description: |
      Create a logical switch.
      ___
      To create a universal logical switch use *universalvdnscope* as the
      scopeId in the URI and send the request to the primary NSX Manager.
      Request body parameters:
        * **name** - Optional. The name of the logical switch.
        * **description** - Optional. Description of the logical switch.
        * **tenantId** - Required.
        * **controlPlaneMode** - Optional. The control plane mode. If not
          specified, the **controlPlaneMode** of the transport zone is used. It
          can be one of the following:
            * *UNICAST_MODE*
            * *HYBRID_MODE*
            * *MULTICAST_MODE*
        * **guestVlanAllowed** - Optional. Default is *false*.
    body:
      application/xml:
        example: |
          <virtualWireCreateSpec>
            <name>Web-Tier-01</name>
            <description>Web tier network</description>
            <tenantId>virtual wire tenant</tenantId>
            <controlPlaneMode>UNICAST_MODE</controlPlaneMode>
            <guestVlanAllowed>false</guestVlanAllowed>
          </virtualWireCreateSpec>
        schema: logicalSwitchCreate
/api/2.0/vdn/traceflow:
  displayName: traceflows
  description: |
    Working with Traceflow
    ================
    For Traceflow to work as expected, make sure that the controller cluster is
    connected and in healthy state. The Traceflow operation requires active
    communication between vCenter, NSX Manager, controller cluster, and netcpa
    User World Agents (UWA) on the host. Traceflow observes marked packet as it
    traverses overlay network. Each packet is delivered to host VM and
    monitored as it crosses overlay network until it reaches the destination
    VM. The packet is never delivered to the destination guest VM. This means
    that Traceflow packet delivery is successful even when the guest VM is
    powered down. Unknown L2 Packets are always be sent to the bridge.
    Typically, the bridge forwards these packets to a VLAN and reports the
    Traceflow packet as delivered. The packet which is reported as delivered
    need not necessarily mean that the trace packet was delivered to the
    destination specified. You should conclude only after validating the
    observations.vdl2 serves ARP proxy for ARP packets coming from VMs.
    However, traceflow bypasses this process, hence vdl2 may broadcast the
    traceflow packet out.
  post:
    displayName: traceflowCreate
    description: Create a traceflow.
    body:
      application/xml:
        example: |
          <traceflowRequest>
            <vnicId>74eb1145-d40b-4061-8e64-1caddf2dbf81.001</vnicId>
            <timeout>10000</timeout>
            <routed>true</routed>
            <packet class="fieldsPacketData">
              <resourceType>FieldsPacketData</resourceType>
              <ethHeader>
                <srcMac>00:50:56:83:7e:87</srcMac>
                <dstMac>00:50:56:83:fa:6c</dstMac>
                <ethType>2048</ethType>
              </ethHeader>
              <ipHeader>
                <ttl>64</ttl>
                <srcIp>172.32.1.5</srcIp>
                <dstIp>172.34.1.5</dstIp>
              </ipHeader>
            </packet>
          </traceflowRequest>
        schema: traceflowCreate
  /{traceflowId}:
    displayName: traceflow
    description: |
      Working with a Specific Traceflow
      ---------
    get:
      displayName: traceflowRead
      description: |
        Query a specific traceflow by *tracflowId* which is the value returned
        after executing the create Traceflow API call.
      responses:
        200:
          body:
            application/xml:
              example: |
                <traceflowDto>
                  <operState>COMPLETE</operState>
                  <vnicId>74eb1145-d40b-4061-8e64-1caddf2dbf81.001</vnicId>
                  <id>00000000-0000-0000-0000-000056b5dec3</id>
                  <receivedCount>2</receivedCount>
                  <forwardedCount>1</forwardedCount>
                  <deliveredCount>1</deliveredCount>
                  <logicalReceivedCount>4</logicalReceivedCount>
                  <logicalDroppedCount>0</logicalDroppedCount>
                  <logicalForwardedCount>4</logicalForwardedCount>
                  <timeout>10000</timeout>
                  <completeAvailable>true</completeAvailable>
                  <result>SUCCESS</result>
                  <resultSummary>Traceflow delivered observation(s) reported</resultSummary>
                  <srcIp>172.32.1.5</srcIp>
                  <srcMac>00:50:56:83:7e:87</srcMac>
                  <dstMac>172.34.1.5</dstMac>
                  <lifMac>00:50:56:83:fa:6c</lifMac>
                </traceflowDto>
    /observations:
      displayName: traceflowObservations
      description: |
        Traceflow Observations
        -----
      get:
        displayName: traceflowObservationsList
        description: Retrieve traceflow observations.
        responses:
          200:
            body:
              application/xml:
                example: |
                  <traceflowObservations>
                    <traceflowObservationsDataPage>
                      <pagingInfo>
                        <pageSize>100</pageSize>
                        <startIndex>0</startIndex>
                        <totalCount>12</totalCount>
                        <sortOrderAscending>true</sortOrderAscending>
                        <sortBy></sortBy>
                      </pagingInfo>
                      <traceflowObservationReceived>
                        <roundId>00000000-0000-0000-0000-000056b5dec3</roundId>
                        <transportNodeId>a02fe610-5358-4a3d-8fef-7be60b7d4ea5</transportNodeId>
                        <hostName>10.146.104.42</hostName>
                        <hostId>host-22</hostId>
                        <component>PHYS</component>
                        <compDisplayName>vNIC</compDisplayName>
                        <hopCount>0</hopCount>
                      </traceflowObservationReceived>
                      <traceflowObservationLogicalReceived>
                        <roundId>00000000-0000-0000-0000-000056b5dec3</roundId>
                        <transportNodeId>a02fe610-5358-4a3d-8fef-7be60b7d4ea5</transportNodeId>
                        <hostName>10.146.104.42</hostName>
                        <hostId>host-22</hostId>
                        <component>FW</component>
                        <compDisplayName>Firewall</compDisplayName>
                        <hopCount>1</hopCount>
                      </traceflowObservationLogicalReceived>
                      <traceflowObservationLogicalForwarded>
                        <roundId>00000000-0000-0000-0000-000056b5dec3</roundId>
                        <transportNodeId>a02fe610-5358-4a3d-8fef-7be60b7d4ea5</transportNodeId>
                        <hostName>10.146.104.42</hostName>
                        <hostId>host-22</hostId>
                        <component>FW</component>
                        <compDisplayName>Firewall</compDisplayName>
                        <hopCount>2</hopCount>
                        <ruleId>1001</ruleId>
                      </traceflowObservationLogicalForwarded>
                      <traceflowObservationLogicalForwarded>
                        <roundId>00000000-0000-0000-0000-000056b5dec3</roundId>
                        <transportNodeId>a02fe610-5358-4a3d-8fef-7be60b7d4ea5</transportNodeId>
                        <hostName>10.146.104.42</hostName>
                        <hostId>host-22</hostId>
                        <component>LS</component>
                        <compDisplayName>1-switch-3</compDisplayName>
                        <hopCount>3</hopCount>
                        <vni>10000</vni>
                        <logicalCompId>universalwire-1</logicalCompId>
                        <logicalCompName>1-switch-3</logicalCompName>
                      </traceflowObservationLogicalForwarded>
                      <traceflowObservationLogicalReceived>
                        <roundId>00000000-0000-0000-0000-000056b5dec3</roundId>
                        <transportNodeId>a02fe610-5358-4a3d-8fef-7be60b7d4ea5</transportNodeId>
                        <hostName>10.146.104.42</hostName>
                        <hostId>host-22</hostId>
                        <component>LR</component>
                        <compDisplayName>1-vm-3</compDisplayName>
                        <hopCount>4</hopCount>
                        <vni>10000</vni>
                        <lifName>27100000000a</lifName>
                        <compId>10000</compId>
                        <srcNsxManager>4204ad55-71ec-927b-ca1b-aabfa36863ad</srcNsxManager>
                        <srcGlobal>true</srcGlobal>
                        <compName>default+edge-bbe379a7-e7b9-4ece-b97c-466cf746c93e</compName>
                        <logicalCompId>edge-bbe379a7-e7b9-4ece-b97c-466cf746c93e</logicalCompId>
                        <logicalCompName>1-vm-3</logicalCompName>
                        <otherLogicalCompId>universalwire-1</otherLogicalCompId>
                        <otherLogicalCompName>1-switch-3</otherLogicalCompName>
                      </traceflowObservationLogicalReceived>
                      <traceflowObservationLogicalForwarded>
                        <roundId>00000000-0000-0000-0000-000056b5dec3</roundId>
                        <transportNodeId>a02fe610-5358-4a3d-8fef-7be60b7d4ea5</transportNodeId>
                        <hostName>10.146.104.42</hostName>
                        <hostId>host-22</hostId>
                        <component>LR</component>
                        <compDisplayName>1-vm-3</compDisplayName>
                        <hopCount>5</hopCount>
                        <vni>10002</vni>
                        <lifName>27100000000c</lifName>
                        <compId>10000</compId>
                        <compName>default+edge-bbe379a7-e7b9-4ece-b97c-466cf746c93e</compName>
                        <srcNsxManager>4204ad55-71ec-927b-ca1b-aabfa36863ad</srcNsxManager>
                        <srcGlobal>true</srcGlobal>
                        <logicalCompId>edge-bbe379a7-e7b9-4ece-b97c-466cf746c93e</logicalCompId>
                        <logicalCompName>1-vm-3</logicalCompName>
                        <otherLogicalCompId>universalwire-3</otherLogicalCompId>
                        <otherLogicalCompName>3-switch-98</otherLogicalCompName>
                      </traceflowObservationLogicalForwarded>
                      <traceflowObservationLogicalReceived>
                        <roundId>00000000-0000-0000-0000-000056b5dec3</roundId>
                        <transportNodeId>a02fe610-5358-4a3d-8fef-7be60b7d4ea5</transportNodeId>
                        <hostName>10.146.104.42</hostName>
                        <hostId>host-22</hostId>
                        <component>LS</component>
                        <compDisplayName>3-switch-98</compDisplayName>
                        <hopCount>6</hopCount>
                        <vni>10002</vni>
                        <logicalCompId>universalwire-3</logicalCompId>
                        <logicalCompName>3-switch-98</logicalCompName>
                      </traceflowObservationLogicalReceived>
                      <traceflowObservationForwarded>
                        <roundId>00000000-0000-0000-0000-000056b5dec3</roundId>
                        <transportNodeId>a02fe610-5358-4a3d-8fef-7be60b7d4ea5</transportNodeId>
                        <hostName>10.146.104.42</hostName>
                        <hostId>host-22</hostId>
                        <component>PHYS</component>
                        <compDisplayName>10.146.104.42</compDisplayName>
                        <hopCount>7</hopCount>
                        <remoteIpAddress>172.19.172.142</remoteIpAddress>
                        <context>5109430534275084</context>
                      </traceflowObservationForwarded>
                      <traceflowObservationReceived>
                        <roundId>00000000-0000-0000-0000-000056b5dec3</roundId>
                        <transportNodeId>d2fd4b26-a664-423f-b0aa-8ba760cd967f</transportNodeId>
                        <hostName>10.146.103.3</hostName>
                        <hostId>host-20</hostId>
                        <component>PHYS</component>
                        <compDisplayName>10.146.103.3</compDisplayName>
                        <hopCount>8</hopCount>
                      </traceflowObservationReceived>
                      <traceflowObservationLogicalReceived>
                        <roundId>00000000-0000-0000-0000-000056b5dec3</roundId>
                        <transportNodeId>d2fd4b26-a664-423f-b0aa-8ba760cd967f</transportNodeId>
                        <hostName>10.146.103.3</hostName>
                        <hostId>host-20</hostId>
                        <component>FW</component>
                        <compDisplayName>Firewall</compDisplayName>
                        <hopCount>9</hopCount>
                      </traceflowObservationLogicalReceived>
                      <traceflowObservationLogicalForwarded>
                        <roundId>00000000-0000-0000-0000-000056b5dec3</roundId>
                        <transportNodeId>d2fd4b26-a664-423f-b0aa-8ba760cd967f</transportNodeId>
                        <hostName>10.146.103.3</hostName>
                        <hostId>host-20</hostId>
                        <component>FW</component>
                        <compDisplayName>Firewall</compDisplayName>
                        <hopCount>10</hopCount>
                        <ruleId>1001</ruleId>
                      </traceflowObservationLogicalForwarded>
                      <traceflowObservationDelivered>
                        <roundId>00000000-0000-0000-0000-000056b5dec3</roundId>
                        <transportNodeId>d2fd4b26-a664-423f-b0aa-8ba760cd967f</transportNodeId>
                        <hostName>10.146.103.3</hostName>
                        <hostId>host-20</hostId>
                        <component>PHYS</component>
                        <compDisplayName>vNIC</compDisplayName>
                        <hopCount>11</hopCount>
                        <vlanId>0</vlanId>
                      </traceflowObservationDelivered>
                    </traceflowObservationsDataPage>
                  </traceflowObservations>
/2.0/vdn/virtualwires:
  displayName: logicalSwitchesGlobal
  description: |
    Working with Logical Switches in All Transport Zones
    ===========
  get:
    displayName: logicalSwitchesRead
    description: |
      Retrieve information about all logical switches in all transport zones.
    queryParameters:
      startIndex:
        displayName: startIndex
        description: !include documentation/reuse/startindex
        default: 0
      pageSize:
        displayName: pageSize
        description: !include documentation/reuse/pagesize-1024
        default: 20
    body:
      application/xml:
        example: |
          <virtualWires>
            <dataPage>
              <pagingInfo>
                <pageSize>20</pageSize>
                <startIndex>0</startIndex>
                <totalCount>13</totalCount>
                <sortOrderAscending>true</sortOrderAscending>
              </pagingInfo>
              <virtualWire>
                <objectId>virtualwire-1</objectId>
                <objectTypeName>VirtualWire</objectTypeName>
                <vsmUuid>423A993F-BEE6-1285-58F1-54E48D508D90</vsmUuid>
                <nodeId>916287b3-761d-430b-8ab2-83878dfe3e7f</nodeId>
                <revision>3</revision>
                <type>
                  <typeName>VirtualWire</typeName>
                </type>
                <name>Transit-Network-01</name>
                <description></description>
                <clientHandle></clientHandle>
                <extendedAttributes/>
                <isUniversal>false</isUniversal>
                <universalRevision>0</universalRevision>
                <tenantId>virtual wire tenant</tenantId>
                <vdnScopeId>vdnscope-1</vdnScopeId>
                <vdsContextWithBacking>
                  <switch>
                    <objectId>dvs-47</objectId>
                    <objectTypeName>VmwareDistributedVirtualSwitch</objectTypeName>
                    <vsmUuid>423A993F-BEE6-1285-58F1-54E48D508D90</vsmUuid>
                    <nodeId>916287b3-761d-430b-8ab2-83878dfe3e7f</nodeId>
                    <revision>29</revision>
                    <type>
                      <typeName>VmwareDistributedVirtualSwitch</typeName>
                    </type>
                    <name>vds-mgt-edge</name>
                    <scope>
                      <id>datacenter-21</id>
                      <objectTypeName>Datacenter</objectTypeName>
                      <name>Datacenter Site A</name>
                    </scope>
                    <clientHandle></clientHandle>
                    <extendedAttributes/>
                    <isUniversal>false</isUniversal>
                    <universalRevision>0</universalRevision>
                  </switch>
                  <mtu>1600</mtu>
                  <promiscuousMode>false</promiscuousMode>
                  <backingType>portgroup</backingType>
                  <backingValue>dvportgroup-355</backingValue>
                  <missingOnVc>false</missingOnVc>
                </vdsContextWithBacking>
                <vdsContextWithBacking>
                  <switch>
                    <objectId>dvs-35</objectId>
                    <objectTypeName>VmwareDistributedVirtualSwitch</objectTypeName>
                    ...
                  </switch>
                  <mtu>1600</mtu>
                  <promiscuousMode>false</promiscuousMode>
                  <backingType>portgroup</backingType>
                  <backingValue>dvportgroup-354</backingValue>
                  <missingOnVc>false</missingOnVc>
                </vdsContextWithBacking>
                <vdnId>5000</vdnId>
                <guestVlanAllowed>false</guestVlanAllowed>
                <controlPlaneMode>UNICAST_MODE</controlPlaneMode>
                <ctrlLsUuid>7ad8bc71-5857-475c-af2a-a9e5337b0944</ctrlLsUuid>
                <macLearningEnabled>false</macLearningEnabled>
              </virtualWire>
              <virtualWire>
                <objectId>virtualwire-2</objectId>
                ...
              </virtualWire>
              <virtualWire>
                <objectId>virtualwire-3</objectId>
                ...
              </virtualWire>
              <virtualWire>
                <objectId>virtualwire-4</objectId>
                ...
              </virtualWire>
              <virtualWire>
                <objectId>universalwire-1</objectId>
                ...
              </virtualWire>
              ...
              <virtualWire>
                <objectId>virtualwire-9</objectId>
                ...
              </virtualWire>
            </dataPage>
          </virtualWires>
  /vm/vnic:
    displayName: logicalSwitchVmAttach
    description: |
      Working Virtual Machine Connections to Logical Switches
      -----
    post:
      displayName: logicalSwitchVmAttach
      description: |
        Attach a VM vNIC to, or detach a VM vNIC from a logical switch.
        ___
        Specify the logical switch ID in the **portgroupId** parameter. To
        detach a VM vNIC from a logical switch, leave the **portgroupId** parameter
        empty.
        ___
        To find the ID of a VM vNIC, do the following:
        1. In the vSphere MOB, navigate to the VM you want to connect or disconnect.
        2. Click **config** and take note of the **instanceUuid**.
        3. Click **hardware** and take note of the last three digits of the
        appropriate network interface device.
        ___
        Use these two values to form the VM vNIC ID.  For example, if the
        **instanceUuid** is *502e71fa-1a00-759b-e40f-ce778e915f16* and the
        appropriate **device** value is *device[4000]*, the **objectId** and
        **vnicUuid** are both *502e71fa-1a00-759b-e40f-ce778e915f16.000*.
      body:
        application/xml:
          example: |
            <com.vmware.vshield.vsm.inventory.dto.VnicDto>
              <objectId>502e71fa-1a00-759b-e40f-ce778e915f16.000</objectId>
              <vnicUuid>502e71fa-1a00-759b-e40f-ce778e915f16.000</vnicUuid>
              <portgroupId>virtualwire-2</portgroupId>
            </com.vmware.vshield.vsm.inventory.dto.VnicDto>
          schema: logicalSwitchVmAttach
  /{virtualWireID}:
    displayName: logicalSwitch
    description: |
      Working with a specific logical switch.
    uriParameters:
      virtualWireID:
        required: true
        displayName: virtualWireID
        description: A logical switch id, e.g. virtualwire-1002
    get:
      displayName: logicalSwitchShow
      description: |
        Retrieve information about the specified logical switch.
        ___
        If the switch is a universal logical switch the **isUniversal**
        parameter is set to true in the response body.
      body:
        application/xml:
          example: |
            <virtualWire>
              <objectId>universalwire-2</objectId>
              <objectTypeName>VirtualWire</objectTypeName>
              <vsmUuid>423A993F-BEE6-1285-58F1-54E48D508D90</vsmUuid>
              <nodeId>916287b3-761d-430b-8ab2-83878dfe3e7f</nodeId>
              <revision>3</revision>
              <type>
                <typeName>VirtualWire</typeName>
              </type>
              <name>ULS-Web-Tier-02</name>
              <clientHandle></clientHandle>
              <extendedAttributes/>
              <isUniversal>true</isUniversal>
              <universalRevision>2</universalRevision>
              <tenantId>ULS-Tenant</tenantId>
              <vdnScopeId>universalvdnscope</vdnScopeId>
              <vdsContextWithBacking>
                <switch>
                  <objectId>dvs-35</objectId>
                  <objectTypeName>VmwareDistributedVirtualSwitch</objectTypeName>
                  <vsmUuid>423A993F-BEE6-1285-58F1-54E48D508D90</vsmUuid>
                  <nodeId>916287b3-761d-430b-8ab2-83878dfe3e7f</nodeId>
                  <revision>29</revision>
                  <type>
                    <typeName>VmwareDistributedVirtualSwitch</typeName>
                  </type>
                  <name>vds-site-a</name>
                  <scope>
                    <id>datacenter-21</id>
                    <objectTypeName>Datacenter</objectTypeName>
                    <name>Datacenter Site A</name>
                  </scope>
                  <clientHandle></clientHandle>
                  <extendedAttributes/>
                  <isUniversal>false</isUniversal>
                  <universalRevision>0</universalRevision>
                </switch>
                <mtu>1600</mtu>
                <promiscuousMode>false</promiscuousMode>
                <backingType>portgroup</backingType>
                <backingValue>dvportgroup-397</backingValue>
                <missingOnVc>false</missingOnVc>
              </vdsContextWithBacking>
              <vdsContextWithBacking>
                ...
              </vdsContextWithBacking>
              <vdnId>200001</vdnId>
              <guestVlanAllowed>false</guestVlanAllowed>
              <controlPlaneMode>UNICAST_MODE</controlPlaneMode>
              <ctrlLsUuid>f360d6e5-c709-4aca-b8d1-37de500a867a</ctrlLsUuid>
              <macLearningEnabled>false</macLearningEnabled>
            </virtualWire>
    put:
      displayName: logicalSwitchUpdate
      description: |
        Update the specified logical switch.
        ___
        For example, you can update the name, description, or control plane
        mode.
      body:
        application/xml:
          example: |
            <virtualWire>
              <name>ULS-Web-Tier-02 </name>
              <description>Universal Web Logical Switch</description>
              <tenantId>virtual wire tenant</tenantId>
              <controlPlaneMode>UNICAST_MODE</controlPlaneMode>
            </virtualWire>
          schema: logicalSwitchUpdate
    delete:
      displayName: logicalSwitchDelete
      description: Delete the specified logical switch.
    /conn-check/multicast:
      displayName: logicalSwitchConnCheck
      description: |
        Testing Host Connectivity
        -----
      post:
        displayName: logicalSwitchConnCheck
        description: |
          Test multicast group connectivity.
          ___
          Test multicast group connectivity between two hosts connected to the
          specified logical switch.
          ___
          Parameter **packetSizeMode** has one of the following values:
          * *0* - VXLAN standard packet size
          * *1* - minimum packet size
          * *2* - customized packet size.
          If you set **packetSizeMode** to *2*, you must specify the size using
          the **packetSize** parameter.
        body:
          application/xml:
            example: |
              <testParameters>
                <gateway></gateway>
                <packetSizeMode></packetSizeMode>
                <packetSize></packetSize>
                <sourceHost>
                  <hostId></hostId>
                  <switchId></switchId>
                  <vlanId></vlanId>
                </sourceHost>
                <destinationHost>
                  <hostId></hostId>
                  <switchId></switchId>
                  <vlanId></vlanId>
                </destinationHost>
              </testParameters>
            schema: logicalSwitchConnCheck
    /conn-check/p2p:
      displayName: logicalSwitchPing
      description: |
        Test point-to-point connectivity.
      post:
        displayName: logicalSwitchPing
        description: |
          Test point-to-point connectivity.
          ___
          Test point-to-point connectivity between two hosts connected to the
          specified logical switch.
          ___
          Parameter **packetSizeMode** has one of the following values:
          * *0* - VXLAN standard packet size
          * *1* - minimum packet size
          * *2* - customized packet size.
          If you set **packetSizeMode** to *2*, you must specify the size using
          the **packetSize** parameter.
        body:
          application/xml:
            example: |
              <testParameters>
                <gateway></gateway>
                <packetSizeMode></packetSizeMode>
                <packetSize></packetSize>
                <sourceHost>
                  <hostId></hostId>
                  <switchId></switchId>
                  <vlanId></vlanId>
                </sourceHost>
                <destinationHost>
                  <hostId></hostId>
                  <switchId></switchId>
                  <vlanId></vlanId>
                </destinationHost>
              </testParameters>
            schema: logicalSwitchPing
    /hardwaregateways:
      displayName: logicalSwitchHardwareGatewayBindings
      description: |
        Working with Hardware Gateway Bindings for a Specific Logical Switch
        -----
      get:
        displayName: logicalSwitchHardwareGatewayBindingsList
        description: |
          Retrieve hardware gateway bindings for the specified logical switch.

          **Method history:**

          Release | Modification
          --------|-------------
          6.2.3 | Method introduced.
        responses:
          200:
            body:
              application/xml:
                example: |
                  <list>
                    <hardwareGatewayBinding>
                      <id>torbinding-2</id>
                      <hardwareGatewayId>torgateway-1</hardwareGatewayId>
                      <switchName>1-switch-579</switchName>
                      <portname>p1</portname>
                      <vlan>0</vlan>
                      <virtualWire>virtualwire-1</virtualWire>
                      <vni>5342</vni>
                    </hardwareGatewayBinding>
                    <hardwareGatewayBinding>
                      <id>torbinding-1</id>
                      <hardwareGatewayId>torgateway-2</hardwareGatewayId>
                      <switchName>1-switch-104</switchName>
                      <portname>p1</portname>
                      <vlan>0</vlan>
                      <virtualWire>virtualwire-1</virtualWire>
                      <vni>5342</vni>
                    </hardwareGatewayBinding>
                  </list>
      /{hardwareGatewayBindingId}:
        displayName: logicalSwitchHardwareGatewayBinding
        description: |
          Working with Connections Between Hardware Gateways and Logical Switches
          -------
        post:
          displayName: logicalSwitchHardwareGatewayBindingCreate
          description: |
            Manage the connection between a hardware gateway and a logical switch.

            **Method history:**

            Release | Modification
            --------|-------------
            6.2.3 | Method introduced.
          queryParameters:
            action:
              displayName: action
              description: |
                Specify *attach* to attach a hardware gateway to a logical
                switch.
                ___
                Specify *detach* to detach a hardware gateway from a logical
                switch.
              required: false
          body:
            application/xml:
              example: |
                <!-- Attach a hardware gateway to a logical switch and create a new binding with the information provided
                POST /api/2.0/vdn/virtualwires/<virtualwireid>/hardwaregateways -->

                <hardwareGatewayBinding>
                  <hardwareGatewayId>hardwarewgateway1</hardwareGatewayId>
                  <vlan>v1</vlan>
                  <switchName>s1</switchName>
                  <portName>s1</portName>
                </hardwareGatewayBinding> 

                <!-- Attach a hardware gateway to a logical switch, specifying an existing binding by ID

                POST /api/2.0/vdn/virtualwires/<virtualwireId>/hardwaregateways/<bindingId>?action=attach 

                <virtualWire>
                  ...
                  <hardwareGatewayBindings>
                    <hardwareGatewayBinding>
                      <id>binding id</id>
                    </hardwareGatewayBinding>
                  </hardwareGatewayBindings>
                </virtualWire> -->

                <!-- Detach a hardware gateway from a logical switch

                POST /api/2.0/vdn/virtualwires/<virtualwireId>/hardwaregateways/<bindingId>?action=detach -->
/2.0/xvs/networks/{ID}/features:
  displayName: arpMAC
  description: |
    Working with ARP Suppression and MAC Learning for Logical Switches
    ==============
  uriParameters:
    ID:
      required: true
      displayName: ID
      description: dvpg MoID or virtual wire ID
  get:
    displayName: arpMACRead
    description: Retrieve ARP suppression and MAC learning information.
  put:
    displayName: arpMACUpdate
    description: Enable or disable ARP suppression and MAC learning.
    body:
      application/xml:
        example: |
          <networkFeatureConfig>
            <ipDiscoveryConfig>
              <enabled></enabled>
            </ipDiscoveryConfig>
            <macLearningConfig>
              <enabled></enabled>
            </macLearningConfig>
          </networkFeatureConfig>
        schema: arpMACUpdate
/2.0/vdn/controller:
  displayName: nsxControllers
  description: |
    Working with NSX Controllers
    ==============
    For the unicast or hybrid control plane mode,
    you must add an NSX controller to manage overlay transport and provide
    East-West routing. The controller optimizes virtual machine broadcast (ARP
    only) traffic, and the learning is stored on the host and the controller.
  post:
    displayName: nsxControllerCreate
    description: |
      Adds a new NSX controller on the specified given cluster. The *hostId*
      parameter is optional. The *resourcePoolId* can be either the
      *clusterId* or *resourcePoolId*.
      ___
      The IP address of the controller node will be allocated
      from the specified IP pool. The *deployType* property determines the
      controller node memory size and can be small, medium, or large. However,
      different controller deployment types are not currently supported because
      the OVF overrides it and different OVF types require changes in the
      manager build scripts. Despite not being supported, an arbitrary
      *deployType* size must still be specified or an error will be returned.
      Request without body to upgrade controller cluster.
    body:
      application/xml:
        example: |
          <controllerSpec>
            <name></name>
            <description></description>
            <ipPoolId></ipPoolId>
            <resourcePoolId></resourcePoolId>
            <hostId></hostId>
            <datastoreId></datastoreId>
            <deployType></deployType>
            <networkId></networkId>
            <password></password>
          </controllerSpec>
        schema: controller
  get:
    displayName: nsxControllersRead
    description: |
      Retrieves details and runtime status for all controllers.  Runtime status
      can be one of the following:

        * **Deploying** - controller is being deployed and the procedure has not
        completed yet.
        * **Removing** - controller is being removed and the procedure has not
        completed yet.
        * **Running** - controller has been deployed and can respond to API
        invocation.
        * **Unknown** - controller has been deployed but fails to respond to API
        invocation.
    responses:
      200:
        body:
          application/xml:
            example: |
              <controllers>
                <controller>
                  <id></id>
                  <name></name>
                  <description></description>
                  <ipAddress></ipAddress>
                  <status></status>
                </controller>
              </controllers>
  /upgrade-available:
    displayName: nsxControllerUpgradeAvailability
    description: |
      Retrieve Controller Upgrade Availability
      ----
    get:
      displayName: nsxControllerUpgradeAvailability
      description: Retrieve controller upgrade availability.
  /progress/{jobId}:
    displayName: nsxControllerJob
    description: |
      Status of Controller Job
      -----
    uriParameters:
      jobId:
        required: true
        displayName: jobId
        description: Specified job Id
    get:
      displayName: nsxControllerJobRead
      description: |
        Retrieves status of controller creation or removal. The progress gives
        a percentage indication of current deploy / remove procedure.
      responses:
        200:
          body:
            application/xml:
              example: |
                <controllerDeploymentInfo>
                  <vmId></vmId>
                  <progress></progress>
                  <status></status>
                  <exceptionMessage></exceptionMessage>
                </controllerDeploymentInfo>
  /{controllerId}:
    displayName: nsxController
    description: |
      Working with a Specific Controller
      -----
    uriParameters:
      controllerId:
        required: true
        displayName: controllerId
        description: |
          Specified controller ID.

          To retrieve the controller IDs, log in to the vSphere Web Client.
          Navigate to Networking & Security > Installation > Management, and
          view the **NSX Controller nodes** section. The controller ID is
          listed in the **Controller ID** or **Controller Node** column,
          depending on NSX version. An example controller ID is
          *controller-1*. 

          In a cross-vCenter NSX environment, retrieve the controller IDs from
          rows where the NSX Manager column contains the primary NSX Manager
          IP address.
    delete:
      displayName: nsxControllerDelete
      description: |
        Deletes the NSX controller.
      queryParameters:
        forceRemoval:
          type: boolean
          required: true
          displayName: forceRemoval
          description: |
            Specify whether to force removal of controller. Must be set to
            true to remove last controller of the controller cluster.
    /techsupportlogs:
      displayName: nsxControllerLogs
      description: |
        Working with Controller Tech Support Logs
        -----
      get:
        displayName: nsxControllerLogsRead
        description: |
          Retrieves controller logs. Response content type is
          application/octet-stream and response header is filename. This
          streams a fairly large bundle back (possibly hundreds of MB).
    /syslog:
      displayName: nsxControllerSyslog
      description: |
        Working with Controller Syslog
        -----
      post:
        displayName: nsxControllerSyslogCreate
        description: Add controller syslog exporter on the controller.
        body:
          application/xml:
            example: |
              <controllerSyslogServer>
                <syslogServer></syslogServer>
                <port></port>
                <protocol></protocol>
                <level></level>
              </controllerSyslogServer>
            schema: controllerSyslog
      get:
        displayName: nsxControllerSyslogRead
        description: |
          Retrieve details about the syslog exporter on the controller.
        responses:
          200:
            body:
              application/xml:
                example: |
                  <controllerSyslogServer>
                    <syslogServer></syslogServer>
                    <port></port>
                    <protocol></protocol>
                    <level></level>
                  </controllerSyslogServer>
      delete:
        displayName: nsxControllerSyslogDelete
        description: |
          Deletes syslog exporter on the specified controller node.
    /snapshot:
      displayName: nsxControllerSnapshot
      description: |
        Working with Controller Cluster Snapshots
        -----
      get:
        displayName: nsxControllerSnapshot
        description: |
          Take a snapshot of the control cluster from the specified controller
          node.
  /cluster:
    displayName: nsxControllerCluster
    description: |
      Working with the NSX Controller Cluster Configuration
      ----
    get:
      displayName: nsxControllerClusterRead
      description: |
        Retrieve cluster wide configuration information for controller.
      responses:
        200:
          body:
            application/xml:
              example: |
                <controllerConfig>
                  <sslEnabled></sslEnabled>
                </controllerConfig>
    put:
      displayName: nsxControllerClusterUpdate
      description: |
        Modify cluster wide configuration information for controller.
      body:
        application/xml:
          example: |
            <controllerConfig>
              <sslEnabled></sslEnabled>
            </controllerConfig>
          schema: clusterUpdate
  /credential:
    displayName: nsxControllerPassword
    description: |
      Working with the NSX Controller Password
      ------
    put:
      displayName: nsxControllerPasswordUpdate
      description: Change the NSX controller password.
      body:
        application/xml:
          example: |
            <controllerCredential>
              <apiPassword></apiPassword>
            </controllerCredential>
          schema: nsxControllerPasswordUpdate
/2.0/services/application/scope/{scopeId}:
  displayName: servicesScope
  description: |
    Working with Services
    =============
  uriParameters:
    scopeId:
      required: true
      displayName: scopeId
      description: |
        Can be "globalroot-0", "universalroot-0" or datacenterId in upgrade use
        cases.
  get:
    displayName: servicesScopeRead
    description: List services that have been created on the scope.
  post:
    displayName: servicesScopeCreate
    description: Create a new service on the specified scope.
    body:
      application/xml:
        example: |
          <application>
            <objectId></objectId>
            <type>
              <typeName/>
            </type>
            <description></description>
            <name></name>
            <revision></revision>
            <objectTypeName></objectTypeName>
            <element>
              <applicationProtocol>mandatory</applicationProtocol>
              <value>mandatory</value>
            </element>
          </application>
        schema: servicesScopeCreate
/2.0/services/application/{applicationId}:
  displayName: service
  description: |
    Working with a Specified Service
    ============
  uriParameters:
    applicationId:
      required: true
      displayName: applicationId
      description: |
        Application ID. You can get a list of application IDs from `GET
        /api/2.0/services/application/scope/{scopeId}`.
  get:
    displayName: serviceRead
    description: Retrieve details about the specified service.
  put:
    displayName: serviceUpdate
    description: |
      Modify the name, description, applicationProtocol, or port value of a
      service.
    body:
      application/xml:
        example: |
          <application>
            <objectId></objectId>
            <type>
              <typeName></typeName>
            </type>
            <description></description>
            <name></name>
            <revision></revision>
            <objectTypeName></objectTypeName>
            <element>
              <applicationProtocol></applicationProtocol>
              <value></value>
            </element>
          </application>
        schema: serviceUpdate
  delete:
    displayName: serviceDelete
    description: Delete the specified service.
    queryParameters:
      force:
        type: boolean
        required: false
        displayName: force
        description: |
          Indicates if the delete should be forced or unforced. The default is
          unforced (false).
/2.0/services/applicationgroup:
  displayName: applicationgroup
  description: |
    Working with Service Groups
    ============
  /scope/{scopeId}:
    displayName: serviceGroups
    description: |
      Working with Service Groups on a Specific Scope
      -------
    uriParameters:
      scopeId:
        required: true
        displayName: scopeId
        description: |
          The scopeId can be "globalroot-0", "universalroot-0" or datacenterId
          in upgrade use cases
    post:
      displayName: serviceGroupsCreate
      description: Create a new service group on the specified scope.
      body:
        application/xml:
          example: |
            <applicationGroup>
              <description></description>
              <name></name>
              <revision></revision>
              <inheritanceAllowed></inheritanceAllowed>
            </applicationGroup>
          schema: serviceGroupsCreate
    get:
      displayName: serviceGroupsRead
      description: |
        Retrieve a list of service groups that have been created on the scope.
  /{applicationgroupId}:
    displayName: serviceGroup
    description: |
      Working with a Specific Service Group
      ----
    uriParameters:
      applicationgroupId:
        required: true
        displayName: applicationgroupId
        description: Application group ID
    get:
      displayName: serviceGroupRead
      description: Retrieve details about the specified service group.
    put:
      displayName: serviceGroupUpdate
      description: |
        Modify the name, description, applicationProtocol, or port value of
        the specified service group.
      body:
        application/xml:
          example: |
            <applicationGroup>
              <objectId></objectId>
              <type>
                <typeName></typeName>
              </type>
              <name></name>
              <description></description>
              <revision></revision>
              <objectTypeName></objectTypeName>
              <scope>
                <id></id>
                <objectTypeName></objectTypeName>
                <name></name>
              </scope>
              <extendedAttributes></extendedAttributes>
              <inheritanceAllowed></inheritanceAllowed>
              <member>
                <objectId></objectId>
                <type>
                  <typeName></typeName>
                </type>
                <name></name>
                <revision></revision>
                <objectTypeName></objectTypeName>
                <scope>
                  <id></id>
                  <objectTypeName></objectTypeName>
                  <name></name>
                </scope>
              </member>
            </applicationGroup>
          schema: serviceGroupUpdate
    delete:
      displayName: serviceGroupDelete
      description: Delete the specified service group from a scope.
      queryParameters:
        force:
          type: boolean
          required: false
          displayName: force
          description: |
            Indicates if the delete should be forced or unforced. The default
            is unforced (false).
    /members/{moref}:
      displayName: serviceGroupMembers
      description: |
        Working with a Specific Service Group Member
        -----
      uriParameters:
        moref:
          required: true
          displayName: moref
          description: Managed object reference to the member.
      put:
        displayName: serviceGroupMembersCreate
        description: Add a member to the service group.
      delete:
        displayName: serviceGroupMembersDelete
        description: Delete a member from the service group.
  /scope/{scopeId}/members:
    displayName: serviceGroupMembersScope
    description: |
      Working with Service Group Members on a Specific Scope
      ------
    uriParameters:
      scopeId:
        required: true
        displayName: scopeId
        description: globalroot-0 or datacenterId in upgrade use cases
    get:
      displayName: serviceGroupMembersScopeList
      description: |
        Get a list of member elements that can be added to the service groups
        created on a particular scope.
        ___
        Since service group allows only either services or other service
        groups as members to be added, this helps you get a list of all
        possible valid elements that can be added to the
        service.
/2.0/services/ipam/pools:
  displayName: ipPools
  description: |
    Working with IP Pools
    ========
  /scope/{scopeId}:
    displayName: ipPoolScope
    description: |
      Working with IP Pools on a Specific Scope
      -----
    uriParameters:
      scopeId:
        required: true
        displayName: scopeId
        description: |
          For *scopeID* use globalroot-0 or *datacenterId* in upgrade use
          cases.
    get:
      displayName: ipPoolRead
      description: |
        Retrieves all IP pools on the specified scope where the *scopeID* is the
        reference to the desired scope. An example of the *scopeID* is
        globalroot-0.
      responses:
        200:
          body:
            application/xml:
              example: |
                <ipamAddressPool>
                  <objectId>ipaddresspool-1</objectId>
                  <objectTypeName>IpAddressPool</objectTypeName>
                  <vsmUuid>4237BA90-C373-A71A-9827-1673BFA29498</vsmUuid>
                  <revision>1</revision>
                  <type>
                    <typeName>IpAddressPool</typeName>
                  </type>
                  <name>rest-ip-pool-1</name>
                  <extendedAttributes></extendedAttributes>
                  <prefixLength>23</prefixLength>
                  <gateway>192.168.1.1</gateway>
                  <dnsSuffix>example.com</dnsSuffix>
                  <dnsServer1>10.11.0.1</dnsServer1>
                  <dnsServer2>10.11.0.2</dnsServer2>
                  <ipRanges>
                    <ipRangeDto>
                      <id>iprange-1</id>
                      <startAddress>192.168.1.2</startAddress>
                      <endAddress>192.168.1.3</endAddress>
                    </ipRangeDto>
                  </ipRanges>
                  <totalAddressCount>2</totalAddressCount>
                  <usedAddressCount>0</usedAddressCount>
                  <usedPercentage>0</usedPercentage>
                </ipamAddressPool>
    post:
      displayName: ipPoolCreate
      description: |
        Create a pool of IP addresses. For *scopeId* use globalroot-0 or
        the *datacenterId* in upgrade use cases.
      body:
        application/xml:
          example: |
            <ipamAddressPool>
              <name></name>
              <prefixLength></prefixLength>
              <gateway></gateway>
              <dnsSuffix></dnsSuffix>
              <dnsServer1></dnsServer1>
              <dnsServer2></dnsServer2>
              <ipRanges>
                <ipRangeDto>
                  <startAddress></startAddress>
                  <endAddress></endAddress>
                </ipRangeDto>
              </ipRanges>
            </ipamAddressPool>
          schema: ipPool
  /{poolId}:
    displayName: ipPool
    description: |
      Working with a Specific IP Pool
      ------
    uriParameters:
      poolId:
        required: true
        displayName: poolId
        description: Specifiy the pool ID as *poolId* in the URI.
    get:
      displayName: ipPoolRead
      description: Retrieve details about a specific IP pool.
      responses:
        200:
          body:
            application/xml:
              example: |
                <ipamAddressPool>
                  <objectId>ipaddresspool-1</objectId>
                  <objectTypeName>IpAddressPool</objectTypeName>
                  <vsmUuid>4237BA90-C373-A71A-9827-1673BFA29498</vsmUuid>
                  <revision>1</revision>
                  <type>
                    <typeName>IpAddressPool</typeName>
                  </type>
                  <name>rest-ip-pool-1</name>
                  <extendedAttributes></extendedAttributes>
                  <prefixLength>23</prefixLength>
                  <gateway>192.168.1.1</gateway>
                  <dnsSuffix>example.com</dnsSuffix>
                  <dnsServer1>10.11.0.1</dnsServer1>
                  <dnsServer2>10.11.0.2</dnsServer2>
                  <ipRanges>
                    <ipRangeDto>
                      <id>iprange-1</id>
                      <startAddress>192.168.1.2</startAddress>
                      <endAddress>192.168.1.3</endAddress>
                    </ipRangeDto>
                  </ipRanges>
                  <totalAddressCount>2</totalAddressCount>
                  <usedAddressCount>0</usedAddressCount>
                  <usedPercentage>0</usedPercentage>
                </ipamAddressPool>
    put:
      displayName: ipPoolUpdate
      description: |
        To modify an IP pool, query the IP pool first. Then modify the output and
        send it back as the request body.
      body:
        application/xml:
          example: |
            <ipamAddressPool>
              <objectId></objectId>
              <objectTypeName></objectTypeName>
              <vsmUuid></vsmUuid>
              <revision></revision>
              <type>
                <typeName></typeName>
              </type>
              <name></name>
              <extendedAttributes></extendedAttributes>
              <prefixLength></prefixLength>
              <gateway></gateway>
              <dnsSuffix></dnsSuffix>
              <dnsServer1></dnsServer1>
              <dnsServer2></dnsServer2>
              <ipRanges>
                <ipRangeDto>
                  <id></id>
                  <startAddress></startAddress>
                  <endAddress></endAddress>
                </ipRangeDto>
              </ipRanges>
            </ipamAddressPool>
          schema: ipPoolUpdate
    delete:
      displayName: ipPoolDelete
      description: Delete an IP pool.
    /ipaddresses:
      displayName: ipPoolAllocate
      description: |
        Working with IP Pool Address Allocations
        ------
      get:
        displayName: ipPoolIpsRead
        description: |
          Retrieves all allocated IP addresses from the specified pool.
        responses:
          200:
            body:
              application/xml:
                example: |
                  <allocatedIpAddresses>
                    <allocatedIpAddress>
                      <id>allocatedipaddress-4</id>
                      <ipAddress>192.168.1.2</ipAddress>
                      <gateway>192.168.1.1</gateway>
                      <prefixLength>23</prefixLength>
                      <dnsServer1>10.112.0.1</dnsServer1>
                      <dnsServer2>10.112.0.2</dnsServer2>
                      <dnsSuffix>eng.vmware.com</dnsSuffix>
                      <allocationNote>sample note</allocationNote>
                    </allocatedIpAddress>
                  </allocatedIpAddresses>
      post:
        displayName: ipPoolAllocateIp
        description: |
          Allocate an IP Address from the pool. Use *ALLOCATE* in the
          **allocationMode** field in the body to allocate the next available
          IP. To allocate a specific one use *RESERVE* and pass the IP to
          reserve in the **ipAddress** fields in the body.
        body:
          application/xml:
            example: |
              <ipAddressRequest>
                <allocationMode>ALLOCATE</allocationMode>
                <ipAddress>192.168.1.2</ipAddress>
              </ipAddressRequest>
            schema: ipAddressRequest
        responses:
          200:
            body:
              application/xml:
                example: |
                  <allocatedIpAddress>
                    <id>allocatedipaddress-1</id>
                    <ipAddress>192.168.1.2</ipAddress>
                    <gateway>192.168.1.1</gateway>
                    <prefixLength>23</prefixLength>
                    <dnsServer1>10.112.0.1</dnsServer1>
                    <dnsServer2>10.112.0.2</dnsServer2>
                    <dnsSuffix>eng.vmware.com</dnsSuffix>
                    <allocationNote>sample note</allocationNote>
                  </allocatedIpAddress>
      /{ipAddress}:
        displayName: ipAddressRelease
        description: |
          Working with Specific IPs Allocated to an IP Pool
          ----
        uriParameters:
          ipAddress:
            required: true
            displayName: ipAddress
            description: |
              The IP address to release, e.g. '192.168.10.10'
        delete:
          displayName: ipAddressRelease
          description: Release an IP address allocation in the pool.
/2.0/services/licensing/capacityusage:
  displayName: capacityUsage
  description: |
    Working with Licensing Capacity
    ============
    The licensing capacity usage API command reports usage of CPUs, VMs and
    concurrent users for the distributed firewall and VXLAN.
  get:
    displayName: capacityUsageRead
    description: |
      Retrieve capacity usage information on the usage of CPUs, VMs and concurrent
      users for the distributed firewall and VXLAN.

      **Method history:**

      Release | Modification
      --------|-------------
      6.2.3 | Method introduced.
    responses:
      200:
        body:
          application/xml:
            example: |
              <featureCapacityUsageList>
                <featureCapacityUsageInfo>
                  <capacityUsageInfo>
                    <capacityType>CPU_CAPACITY_TYPE</capacityType>
                    <usageCount>16</usageCount>
                  </capacityUsageInfo>
                  <capacityUsageInfo>
                    <capacityType>VM_CAPACITY_TYPE</capacityType>
                    <usageCount>3</usageCount>
                  </capacityUsageInfo>
                  <capacityUsageInfo>
                    <capacityType>CONCURRENT_USER_CAPACITY_TYPE</capacityType>
                    <usageCount>3</usageCount>
                  </capacityUsageInfo>
                  <feature>dfw</feature>
                </featureCapacityUsageInfo>
                <featureCapacityUsageInfo>
                  <capacityUsageInfo>
                    <capacityType>CPU_CAPACITY_TYPE</capacityType>
                    <usageCount>16</usageCount>
                  </capacityUsageInfo>
                  <capacityUsageInfo>
                    <capacityType>VM_CAPACITY_TYPE</capacityType>
                    <usageCount>3</usageCount>
                  </capacityUsageInfo>
                  <capacityUsageInfo>
                    <capacityType>CONCURRENT_USER_CAPACITY_TYPE</capacityType>
                    <usageCount>3</usageCount>
                  </capacityUsageInfo>
                  <feature>vxlan</feature>
                </featureCapacityUsageInfo>
              </featureCapacityUsageList>
/2.0/services/securitytags/tag:
  displayName: securityTag
  description: |
    Working with Security Tags
    =====
  post:
    displayName: securityTagCreate
    description: Create a new security tag.
    body:
      application/xml:
        example: |
          <securityTag>
            <objectTypeName></objectTypeName>
            <type>
              <typeName></typeName>
            </type>
            <name></name>
            <description></description>
            <extendedAttributes></extendedAttributes>
          </securityTag>
        schema: securityTagCreate
  get:
    displayName: securityTagRead
    description: Retrieve security tags.
  /{tagId}:
    displayName: securityTagDelete
    description: Delete a security tag.
    uriParameters:
      tagId:
        description: Specified security tag.
        displayName: tagId
        required: true
    delete:
      displayName: securityTagDelete
      description: Delete the specified security tag.
    /vm:
      displayName: securityTagVMsList
      description: |
        Retrieve the list of VMs that have the specified tag attached to
        them.
      get:
        displayName: securityTagVMsList
        description: |
          Retrieve the list of VMs that have the specified tag attached to
          them.
      /{vmMoid}:
        displayName: securityTagVM
        description: Apply or detach a security tag to virtual machine.
        uriParameters:
          vmMoid:
            description: ID of VM
            displayName: vmMoid
            required: true
        put:
          displayName: securityTagVMAttach
          description: Apply a security tag to virtual machine.
        delete:
          displayName: securityTagVMDetach
          description: Detach a security tag from a virtual machine.
/2.0/services/ssoconfig:
  displayName: ssoConfig
  description: |
    Working with NSX Manager SSO Registration
    ============
  get:
    displayName: ssoConfigRead
    description: Retrieve SSO Configuration.
  post:
    displayName: ssoConfigSet
    description: Register NSX Manager to SSO Services.
    body:
      application/xml:
        example: |
          <ssoConfig>
            <ssoLookupServiceUrl></ssoLookupServiceUrl>
            <ssoAdminUsername></ssoAdminUsername>
            <ssoAdminUserpassword></ssoAdminUserpassword>
            <certificateThumbprint></certificateThumbprint>
          </ssoConfig>
        schema: ssoConfig
  delete:
    displayName: ssoConfigDelete
    description: Deletes the NSX Manager SSO Configuration.
  /status:
    displayName: ssoStatus
    description: |
      Working with SSO Configuration Status
      -----
    get:
      displayName: ssoStatusRead
      description: Retrieve the SSO configuration status of NSX Manager.
/2.0/services/usermgmt:
  displayName: userMgmt
  description: |
    Working with User Management
    ==========
  /user/{userId}:
    displayName: userMgmtUser
    description: |
      Manage Users on NSX Manager
      -----
    uriParameters:
      userId:
        required: true
        displayName: userId
        description: user ID
    get:
      displayName: userMgmtUserRead
      description: Get information about a user.
    delete:
      displayName: userMgmtUserDelete
      description: Remove the NSX role for a vCenter user.
  /role/{userId}:
    displayName: userRoleMgmt
    description: |
      Manage NSX Roles for Users
      -----
    uriParameters:
      userId:
        required: true
        displayName: userId
        description: User to retrieve role information from.
    get:
      displayName: userMgmtRoleRead
      description: |
        Retrieve a user's role (possible roles are super_user, vshield_admin,
        enterprise_admin, security_admin, and audit).
    post:
      displayName: userMgmtRoleCreate
      description: Add role and resources for a user.
      queryParameters:
        isGroup:
          displayName: isGroup
          description: |
            Set to "true" to apply to a group; set to "false" to apply to an
            individual user
          required: true
          type: boolean
      body:
        application/xml:
          example: |
            <accessControlEntry>
              <role></role>
              <resource>
                <resourceId></resourceId>
              </resource>
            </accessControlEntry>
          schema: userRoleMgmtCreate
    put:
      displayName: userMgmtRoleUpdate
      description: Change a user's role.
      body:
        application/xml:
          example: |
            <accessControlEntry>
              <role></role>
              <resource>
                <resourceId></resourceId>
              </resource>
            </accessControlEntry>
          schema: userRoleMgmtUpdate
    delete:
      displayName: userMgmtRoleDelete
      description: |
        Delete the role assignment for specified vCenter user. Once this role
        is deleted, the user is removed from NSX Manager. You cannot delete the
        role for a local user.
  /enablestate/{value}:
    displayName: userMgmtState
    description: |
      Working with User Account State
      -----
    uriParameters:
      value:
        required: true
        type: integer
        displayName: value
        description: value can be 0 to disable, or 1 to enable.
    put:
      displayName: userMgmtStateUpdate
      description: Enable or disable a user account.
  /users/vsm:
    displayName: userNSXManagerInfo
    description: |
      Working with NSX Manager Role Assignment
      ----
    get:
      displayName: userNSXManagerInfoRead
      description: |
        Get information about users who have been assigned a NSX Manager role
        (local users as well as vCenter users with NSX Manager role).
  /roles:
    displayName: userMgmtRoles
    description: |
      Working with Available NSX Manager Roles
      ----
    get:
      displayName: userMgmtRoleRead
      description: Read all possible roles in NSX Manager
  /scopingobjects:
    displayName: userScopingObjects
    description: |
      Retrieve a list of objects that can be used to define a user's access
      scope
    get:
      displayName: userScopingObjectsRead
      description: |
        Retrieve a list of objects that can be used to define a user's access
        scope
/2.0/services/securitygroup:
  displayName: secGroup
  description: |
    Working with Security Groups
    ===========
  /bulk/{scopeId}:
    displayName: secGroupBulk
    description: |
      Create a new security group
      ----
      Create a new security group on a global scope or universal scope. Use
      either "globalroot-0" or "universalroot-0". Universal security groups are
      read-only when querying a secondary NSX manager.
    uriParameters:
       scopeId:
         required: true
         displayName: scopeId
         description: |
          For the scopeId use globalroot-0 for non-universal security groups and
          universalroot-0 for universal security groups.
    post:
      displayName: secGroupBulkCreate
      description: Create a new security group on a scope.
      body:
        application/xml:
          example: |
            <securitygroup>
              <objectId></objectId>
              <objectTypeName></objectTypeName>
              <vsmUuid></vsmUuid>
              <revision></revision>
              <type>
                <typeName></typeName>
              </type>
              <name></name>
              <scope>
                <id></id>
                <objectTypeName></objectTypeName>
                <vsmUuid></vsmUuid>
                <name></name>
                <revision></revision>
              </scope>
              <clientHandle></clientHandle>
              <extendedAttributes></extendedAttributes>
              <member>
                <objectId></objectId>
                <objectTypeName></objectTypeName>
                <vsmUuid></vsmUuid>
                <revision></revision>
                <type>
                  <typeName></typeName>
                </type>
                <name></name>
                <scope>
                  <id></id>
                  <objectTypeName></objectTypeName>
                  <name></name>
                </scope>
                <clientHandle></clientHandle>
                <extendedAttributes></extendedAttributes>
              </member>
              <excludeMember>
                <objectId></objectId>
                <objectTypeName></objectTypeName>
                <vsmUuid></vsmUuid>
                <revision></revision>
                <type>
                  <typeName></typeName>
                </type>
                <name></name>
                <scope>
                  <id></id>
                  <objectTypeName></objectTypeName>
                  <name></name>
                </scope>
                <clientHandle></clientHandle>
                <extendedAttributes></extendedAttributes>
              </excludeMember>
              <dynamicMemberDefinition>
                <dynamicSet>
                  <operator></operator>
                  <dynamicCriteria>
                    <operator></operator>
                    <key></key>
                    <criteria></criteria>
                    <value></value>
                  </dynamicCriteria>
                </dynamicSet>
              </dynamicMemberDefinition>
            </securitygroup>
          schema: secGroupBulkCreate
    put:
      displayName: secGroupUpdate
      description: Update a security group.
      body:
        application/xml:
          example: |
            <securitygroup>
              <objectId></objectId>
              <objectTypeName></objectTypeName>
              <vsmUuid></vsmUuid>
              <revision></revision>
              <type>
                <typeName></typeName>
              </type>
              <name></name>
              <scope>
                <id></id>
                <objectTypeName></objectTypeName>
                <vsmUuid></vsmUuid>
                <name></name>
                <revision></revision>
              </scope>
              <clientHandle></clientHandle>
              <extendedAttributes></extendedAttributes>
              <member>
                <objectId></objectId>
                <objectTypeName></objectTypeName>
                <vsmUuid></vsmUuid>
                <revision></revision>
                <type>
                  <typeName></typeName>
                </type>
                <name></name>
                <scope>
                  <id></id>
                  <objectTypeName></objectTypeName>
                  <name></name>
                </scope>
                <clientHandle></clientHandle>
                <extendedAttributes/>
              </member>
              <excludeMember>
                <objectId></objectId>
                <objectTypeName></objectTypeName>
                <vsmUuid></vsmUuid>
                <revision></revision>
                <type>
                  <typeName></typeName>
                </type>
                <name></name>
                <scope>
                  <id></id>
                  <objectTypeName></objectTypeName>
                  <name></name>
                </scope>
                <clientHandle></clientHandle>
                <extendedAttributes></extendedAttributes>
              </excludeMember>
              <dynamicMemberDefinition>
                <dynamicSet>
                  <operator></operator>
                  <dynamicCriteria>
                    <operator></operator>
                    <key></key>
                    <criteria></criteria>
                    <value></value>
                  </dynamicCriteria>
                </dynamicSet>
              </dynamicMemberDefinition>
            </securitygroup>
          schema: secGroupBulkUpdate
  /scope/{scopeId}:
    displayName: secGroupScope
    description: |
      Working with Security Groups on a Specific Scope
      ----
    uriParameters:
      scopeId:
        required: true
        displayName: scopeId
        description: |
          scopeId can be "globalroot-0", "universalroot-0" or datacenterID /
          portgroupID in upgrade use cases
    get:
      displayName: secGroupScopeRead
      description: List all the security groups created on a specific scope.
    /memberTypes:
      displayName: secGroupMemberTypes
      description: |
        Working with Security Group Member Types
        ----
      get:
        displayName: secGroupScopeMembersRead
        description: |
          Retrieve a list of valid elements that can be added to a security
          group.
    /members/{memberType}:
      displayName: secGroupScopeMemberByType
      description: |
        Working with a Specific Security Group Member Type
        ----
      uriParameters:
        memberType:
          required: true
          displayName: memberType
          description: Specific member type
      get:
        displayName: secGroupScopeMemberTypeRead
        description: Retrieve members of a specific type in the specified scope.
  /{objectId}:
    displayName: secGroupObject
    description: |
      Working with a Specific Security Group
      ----
    uriParameters:
      objectId:
        required: true
        displayName: objectId
        description: Security group ID.
    get:
      displayName: secGroupObjectRead
      description: Retrieve all members of the specified security group.
    put:
      displayName: secGroupObjectUpdate
      description: Update members of the specified security group.
      body:
        application/xml:
          example: |
            <securitygroup>
              <objectId></objectId>
              <objectTypeName></objectTypeName>
              <revision></revision>
              <type>
                <typeName></typeName>
              </type>
              <name></name>
              <scope>
                <id></id>
                <objectTypeName></objectTypeName>
                <name></name>
              </scope>
              <clientHandle></clientHandle>
              <extendedAttributes></extendedAttributes>
              <isUniversal></isUniversal>
              <inheritanceAllowed></inheritanceAllowed>
            </securitygroup>
          schema: secGroupObjectUpdate
    delete:
      displayName: secGroupObjectDelete
      description: Delete an existing security group.
      queryParameters:
        force:
          displayName: force
          required: true
          type: boolean
    /members/{memberId}:
      displayName: secGroupMember
      description: |
        Working with Members of a Specific Security Group
        ----
      uriParameters:
        memberId:
          required: true
          displayName: memberId
          description: | 
            Security group member, can be a vSphere managed object ID or NSX
            object ID.
      put:
        displayName: secGroupMemberUpdate
        description: Add a new member to the specified security group.
      delete:
        displayName: secGroupMemberDelete
        description: Delete member from the specified security group.
    /translation/virtualmachines:
      displayName: secGroupVMNodes
      description: |
        Working with Virtual Machines in a Security Group
        ----
      get:
        displayName: secGroupVMNodesRead
        description: |
          Retrieve list of virtual machine entities that belong to a specific security
          group.
    /translation/ipaddresses:
      displayName: secGroupIPNodes
      description: |
        Working with IP Addresses in a Security Group
        -----
      get:
        displayName: secGroupIPNodesRead
        description: |
          Retrieve list of IP addresses that belong to a specific security
          group.
    /translation/macaddresses:
      displayName: secGroupMacNodes
      description: |
        Working with Mac Addresses in a Security Group
        -----
      get:
        displayName: secGroupMacNodesRead
        description: |
          Retrieve list of MAC addresses that belong to a specific security
          group.
    /translation/vnics:
      displayName: secGroupVnicNodes
      description: |
        Working with vNICs in a Security Group
        -----
      get:
        displayName: secGroupVnicNodesRead
        description: |
          Retrieve list of vNICs that belong to a specific security group.
  /lookup/virtualmachine/{virtualMachineId}:
    displayName: secGroupLookupVM
    description: |
      Working with Virtual Machine Security Group Membership
      ------
    uriParameters:
      virtualMachineId:
        required: true
        displayName: virtualMachineId
        description: Specified virtual machine
    get:
      displayName: secGroupLookupVMRead
      description: |
        Retrieve list of security groups that the specified virtual machine
        belongs to.
  /internal/scope/{scopeId}:
    displayName: secGroupInternal
    description: |
      Working with Internal Security Groups
      ----
    uriParameters:
      scopeId:
        required: true
        displayName: scopeId
        description: Specified transport zone (scope)
    get:
      displayName: secGroupInternalRead
      description: |
        Retrieve all internal security groups on the NSX Manager. These are used
         internally by the system and should not be created or modified by end
        users.
/2.0/services/ipset:
  displayName: ipsets
  description: |
    Working with IP Sets
    =======
  /scope/{scopeMoref}:
    displayName: ipsetList
    description: |
      Working with IP Sets on a Specific Scope
      ----
    uriParameters:
      scopeMoref:
        required: true
        displayName: scopeMoref
        description: |
          For scopeMoref use "globalroot-0" for non-universal IP sets and use
          "universalroot-0" for universal IP sets.
    get:
      displayName: ipsetList
      description: Retrieve all configured IPSets
  /{scopeMoref}:
    displayName: ipsetCreate
    description: |
      Creating New IP Sets
      -----
    uriParameters:
      scopeMoref:
        required: true
        displayName: scopeMoref
        description: |
          For scopeMoref use "globalroot-0" for non-universal IP sets and use
          "universalroot-0" for universal IP sets.
    post:
      displayName: ipsetCreate
      description: Create a new IP set.
      body:
        application/xml:
          example: |
            <ipset>
              <objectId></objectId>
              <type>
                <typeName></typeName>
              </type>
              <description></description>
              <name></name>
              <revision></revision>
              <objectTypeName></objectTypeName>
              <value></value>
              <inheritanceAllowed></inheritanceAllowed>
            </ipset>
          schema: ipsetCreate
  /{ipsetId}:
    displayName: ipset
    description: |
      Working with a Specific IP Set
      ----
    uriParameters:
      ipsetId:
        required: true
        displayName: ipsetId
        description: The IP set to be queried or changed.
    get:
      displayName: ipsetRead
      description: Retrieve an individual IP set.
    put:
      displayName: ipsetUpdate
      description: Modify an existing IP set.
      body:
          application/xml:
            example: |
              <ipset>
                <objectId></objectId>
                <type>
                  <typeName></typeName>
                </type>
                <description></description>
                <name></name>
                <objectTypeName></objectTypeName>
                <value></value>
              </ipset>
            schema: ipsetUpdate
    delete:
      displayName: ipsetDelete
      description: Delete an IP set.
      queryParameters:
          force:
            displayName: force
            description: Set to "true" when forcing the removal of an IP set.
            type: boolean
            required: false
/2.0/services/vcconfig:
  displayName: vCenterConfig
  description: |
    Configuring NSX Manager with vCenter Server
    =========
  get:
    displayName: vCenterConfigRead
    description: Get vCenter Server configuration details on NSX Manager.
  put:
    displayName: vCenterConfigUpdate
    description: Synchronize NSX Manager with vCenter server.
    body:
      application/xml:
        example: |
          <vcInfo>
            <ipAddress></ipAddress>
            <userName></userName>
            <password></password>
            <certificateThumbprint></certificateThumbprint>
            <assignRoleToUser></assignRoleToUser>
            <pluginDownloadServer></pluginDownloadServer>
            <pluginDownloadPort></pluginDownloadPort>
          </vcInfo>
        schema: vcConfig
  /status:
    displayName: vCenterStatus
    description: |
      Connection Status for vCenter Server
      -----
    get:
      displayName: vCenterStatusRead
      description: Get default vCenter Server connection status
/2.0/universalsync:
  displayName: universalSync
  description: |
    Working with Universal Sync Configuration in Cross-vCenter NSX
    ======
  /configuration/role:
    displayName: universalSyncConfigurationRole
    description: |
      Working with Universal Sync Configuration Roles
      ----
      You can set the role of an NSX Manager to primary, secondary, or
      standalone. If you set an NSX Manager’s role to primary, then use it to
      create universal objects, and then set the role to standalone, the role
      will be set as transit. In the transit role, the universal objects will
      still exist, but cannot be modified, other than being deleted.
    post:
      displayName: universalSyncConfigurationRoleSet
      description: Set the universal sync configuration role.
      queryParameters:
        action:
          displayName: action
          description: |
            Set the role of the NSX manager. Possible values are
            *set-as-standalone*, or *set-as-primary*. To set an NSX Manager as
            secondary, use the `POST
            /api/2.0/universalsync/configuration/nsxmanagers` method on the
            primary NSX Manager.
    get:
      displayName: universalSyncConfigurationRoleRead
      description: Retrieve the universal sync configuration role.
  /configuration/nsxmanagers:
      displayName: universalSyncConfigurationNsxManagers
      description: |
        Working with Universal Sync Configuration of NSX Managers
        -----
      post:
        displayName: universalSyncConfigurationNsxManagersCreate
        description: | 
          Add a secondary NSX manager.

          Run this method on the primary NSX Manager, providing details of the
          secondary NSX Manager.

          Retrieve the certificate thumbprint of the secondary NSX Manager
          using the `GET
          /api/1.0/appliance-management/certificatemanager/certificates/nsx`
          method. The **sha1Hash** parameter contains the thumbprint.
        body:
          application/xml:
            example: |
              <nsxManagerInfo>
                <nsxManagerIp></nsxManagerIp>
                <nsxManagerUsername></nsxManagerUsername>
                <nsxManagerPassword></nsxManagerPassword>
                <certificateThumbprint></certificateThumbprint>
                <isPrimary></isPrimary>
              </nsxManagerInfo>
            schema: universalSyncConfigurationNsxManagersCreate
      get:
        displayName: universalSyncConfigurationNsxManagersList
        description: |
          If run on a primary NSX Manager, it will list secondary NSX Managers
          configured on the primary NSX Manager.

          If run on a secondary NSX Manager, it will list information about
          the secondary NSX Manager and the primary NSX Manager it is
          associated with.
      delete:
        displayName: universalSyncConfigurationNsxManagersDelete
        description: Delete secondary NSX manager configuration.
      /{nsxManagerID}:
        displayName: universalSyncConfigurationManagers
        description: |
          Universal Sync Configuration of a Specific NSX Manager
          ----
        get:
          displayName: universalSyncConfigurationManagersRead
          description: |
            Retrieve information about the specified secondary NSX Manager.
        delete:
          displayName: universalSyncConfigurationManagersDelete
          description: Delete the specified secondary NSX Manager.
          queryParameters:
            forceRemoval:
              type: boolean
              required: false
              displayName: universalSyncConfigurationManagerDeleteforceRemoval
              description: |
                Force removal of a secondary NSX manager. Options are true and
                false.
        put:
          displayName: universalSyncConfigurationManagersUpdate
          description: |
            Update the the specified secondary NSX manager IP or thumbprint in
            the universal sync configuration.
          body:
            application/xml:
              example: |
                <nsxManagerInfo>
                  <uuid></uuid>
                  <nsxManagerIp></nsxManagerIp>
                  <certificateThumbprint></certificateThumbprint>
                </nsxManagerInfo>
              schema: universalSyncConfigurationManagersUpdate.xsd
  /sync:
    displayName: universalSyncSync
    description: |
      NSX Manager Synchronization
      ----
    post:
      displayName: universalSyncSync
      description: Sync all objects on the NSX Manager.
      queryParameters:
        action:
          displayName: application
          description: Use *invoke* to sync all objects on the NSX Manager.
  /entitystatus:
    displayName: universalSyncEntityStatus
    description: |
      Working with Universal Sync Entities
      ----
    get:
      displayName: universalSyncEntityStatusRead
      description: Retrieve the status of a universal sync entity.
      queryParameters:
        objectType:
          displayName: objectType
          description: Specifiy the object type. For example "VdnScope"
        objectId:
          displayName: objectId
          description: Specify the objectID. For example "globalvdnscope"
  /status:
    displayName: universalSyncStatus
    description: |
      Working wiht Universal Sync Status
      -----
    get:
      displayName: universalSyncStatusRead
      description: Retrieve the universal sync status.
/1.0/appliance-management:
  displayName: applianceManager
  description: |
    Working with Appliance Manager
    ========
  /global/info:
    displayName: globalInfo
    description: |
      Global Information for NSX Manager
      ----
    get:
      displayName: globalInfoRead
      description: |
        Retrieve global information containing version information as well as
        current logged in user.
  /summary/system:
    displayName: systemInfo
    description: | 
      Summary Information for NSX Manager
      ----
    get:
      displayName: summaryInfoRead
      description: |
        Retrieve system summary info such as address, dns name, version, CPU,
        memory and storage.
  /summary/components:
    displayName: componentInfo
    description: |
      Component Information for NSX Manager
      ----
    get:
      displayName: componentInfoRead
      description: |
        Retrieve summary of all available components and their status info.
  /system/restart:
    displayName: systemReboot
    description: |
      Reboot NSX Manager
      -----
    post:
      displayName: systemReboot
      description: Reboot the NSX Manager appliance.
  /system/cpuinfo:
    displayName: systemCPUInfo
    description: |
      NSX Manager CPU Information
      -----
    get:
      displayName: systemCPUInfo
      description: Retrieve NSX Manager CPU information.
  /system/uptime:
    displayName: systemUptime
    description: |
      NSX Manager Appliance Uptime Information
      ----
    get:
      displayName: systemUptime
      description: Retrieve NSX Manager uptime information.
  /system/meminfo:
    displayName: systemMemoryInfo
    description: |
      NSX Manager Appliance Memory Information
      -----
    get:
      displayName: systemMemoryInfo
      description: Retrieve NSX Manager memory information.
  /system/storageinfo:
    displayName: systemStorageInfo
    description: |
      NSX Manager Appliance Storage Information
      ----
    get:
      displayName: systemStorageInfo
      description: Retrieve NSX Manager storage information.
  /system/network:
    displayName: networkSettings
    description: |
      NSX Manager Appliance Network Settings
      ----
    get:
      displayName: networkSettingsRead
      description: |
        Retrieve network information i.e. host name, IP address, DNS settings
  /system/tlssettings:
    displayName: tlsSettings
    description: |
      Working with TLS Settings
      ----
    get:
      displayName: tlsSettingsList
      description: |
        Retrieve TLS settings.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.
      responses:
        200:
          body:
            application/xml:
              example: |
                <tlsSettings>
                  <serverEnabledProtocols>TLSv1,TLSv1.1,TLSv1.2</serverEnabledProtocols>
                  <clientEnabledProtocols>TLSv1,TLSv1.1,TLSv1.2</clientEnabledProtocols>
                </tlsSettings>
    post:
      displayName: tlsSettingsUpdate
      description: |
        Update TLS settings.
        ___
        Include a comma separated list of the TLS versions you want to enable,
        for both server and client.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.
      body:
        application/xml:
          example: |
            <tlsSettings>
              <serverEnabledProtocols>TLSv1.1,TLSv1.2</serverEnabledProtocols>
              <clientEnabledProtocols>TLSv1.1,TLSv1.2</clientEnabledProtocols>
            </tlsSettings>
    /dns:
      displayName: applianceDnsClient
      description: |
        Working with DNS Configuration
        -----
      put:
        displayName: applianceDnsClientUpdate
        description: Configure DNS.
        body:
          application/xml:
            example: |
              <dns>
                <ipv4Address></ipv4Address>
                <ipv6Address></ipv6Address>
                <domainList></domainList>
              </dns>
            schema: applianceDnsClientUpdate
      delete:
        displayName: applianceDnsClientDelete
        description: Delete DNS server configuration.
  /system/timesettings:
    displayName: systemTime
    description: |
      Working with Time Settings
      ------
    get:
      displayName: systemTimeRead
      description: |
        Retrieve time settings, like timezone or current date and time with
        NTP server, if configured.
    put:
      displayName: systemTimeUpdate
      description: |
        Configure time or specify the NTP server to use for time
        synchronization.
      body:
        application/xml:
          example: |
            <timeSettings>
              <ntpServer>
                <string></string>
              </ntpServer>
              <datetime></datetime>
              <timezone></timezone>
            </timeSettings>
          schema: systemTimeUpdate
    /ntp:
      displayName: ntp
      description: |
        Working with NTP Settings
        ----
      delete:
        displayName: ntpDelete
        description: Delete NTP server.
  /system/locale:
    displayName: systemLocale
    description: |
      Configure System Locale
      ----
    get:
      displayName: systemLocaleRead
      description: Retrieve locale info.
    put:
      displayName: systemLocaleUpdate
      description: Configure locale.
      body:
        application/xml:
          example: |
            <locale>
              <language></language>
              <country></country>
            </locale>
          schema: systemLocaleUpdate
  /system/syslogserver:
    displayName: systemSyslogServer
    description: |
      Working with Syslog Servers
      -----
    get:
      displayName: systemSyslogServerRead
      description: Retrieve syslog servers.
    put:
      displayName: systemSyslogServerUpdate
      description: Configure syslog servers.
      body:
        application/xml:
          example: |
            <syslogserver>
              <syslogServer></syslogServer>
              <port></port>
              <protocol></protocol>
            </syslogserver>
          schema: systemSyslogServerUpdate
    delete:
      displayName: systemSyslogServerDelete
      description: Delete syslog servers.
  /components:
    displayName: componentsManagement
    description: |
      Components management
      ----
    get:
      displayName: componentsManagementRead
      description: Retrieve all appliance manager components.
    /{componentID}:
      displayName: componentManagement
      description: |
        Working with a Specific Component
        ----
      uriParameters:
        componentID:
          required: true
          displayName: componentID
          description: Specified component ID.
      get:
        displayName: componentManagementRead
        description: Retrieve details for specified component.
      /dependencies:
        displayName: componentDependencies
        description: |
          Working with Component Dependencies
          ----
        get:
          displayName: componentDependenciesRead
          description: Retrieve dependency details for specified component.
      /dependents:
        displayName: componentDependents
        description: |
          Working with Component Dependents
          ----
        get:
          displayName: componentDependentsRead
          description: Retrieve dependents for the specified component.
      /status:
        displayName: componentStatus
        description: |
          Working with Component Status
        get:
          displayName: componentStatusRead
          description: Retrieve current status for specified component.
  /backuprestore/backupsettings:
    displayName: applianceMgrBackupSettings
    description: |
      NSX Manager Appliance Backup Settings
      -----
    get:
      displayName: applianceMgrBackupSettingsRead
      description: Retrieve backup settings.
    put:
      displayName: applianceMgrBackupSettingsUpdate
      description: Configure backup on the appliance manager.
      body:
        application/xml:
          example: |
            <backupRestoreSettings>
              <ftpSettings>
                <transferProtocol></transferProtocol>
                <hostNameIPAddress></hostNameIPAddress>
                <port></port>
                <userName></userName>
                <password></password>
                <backupDirectory></backupDirectory>
                <filenamePrefix></filenamePrefix>
                <passiveMode></passiveMode>
                <useEPRT></useEPRT>
                <useEPSV></useEPSV>
              </ftpSettings>
              <backupFrequency>
                <frequency></frequency>
                <dayOfWeek></dayOfWeek>
                <hourOfDay></hourOfDay>
                <minuteOfHour></minuteOfHour>
              </backupFrequency>
              <excludeTables>
                <excludeTable></excludeTable>
              </excludeTables>
            </backupRestoreSettings>
          schema: applianceMgrBackupSettingsUpdate
    delete:
      displayName: applianceMgrBackupSettingsDelete
      description: Delete appliance manager backup configuration.
  /backuprestore/backup:
    displayName: applianceMgrBackup
    description: |
      NSX Manager Appliance On-Demand Backup
      ----
    post:
      displayName: applianceMgrBackupCreate
      description: Backup NSX data on-demand.
  /backuprestore/backups:
    displayName: applianceMgrBackups
    description: |
      Working with NSX Manager Appliance Backup Files
      -----
    get:
      displayName: applianceMgrBackupsRead
      description: |
        Retrieve list of all backups available at configured backup location.
  /backuprestore/restore:
    displayName: applianceMgrBackupRestore
    description: |
      Restoring Data from a NSX Manager Appliance Backup File
      ------
    post:
      displayName: applianceMgrBackupRestoreExecute
      description: Restore data from a backup file.
      queryParameters:
        restoreFile:
          required: true
          displayName: restoreFile
          description: File name of restore file.
  /techsupportlogs/{componentID}:
    displayName: techLogs
    description: |
      Working with Tech Support Logs by Component
      ----
    uriParameters:
      componentID:
        required: true
        displayName: componentID
        description: |
          Specified component to generate tech support logs. For example,
          *NSX*.
    post:
      displayName: techLogsCreate
      description: | 
        Generate tech support logs. The location response header contains the
        location of the created tech support file. 
  /techsupportlogs/{filename}:
    displayName: techLogsDownload
    description: | 
      Working with Tech Support Log Files
      -----
    uriParameters:
      filename:
        required: true
        displayName: filename
        description: Name of log file to download.
    get:
      displayName: techLogsDownload
      description: Download tech support logs
  /notifications:
    displayName: notifications
    description: |
      Working with Support Notifications
      ----
    get:
      displayName: notificationsRead
      description: Retrieve all system generated notifications.
    delete:
      displayName: notificationsDelete
      description: Delete all notifications.
    /{ID}/acknowledge:
      displayName: notificationsAcknowledge
      description: |
        Acknowledge Notifications
        ----
      uriParameters:
        ID:
          displayName: ID
          description: Notification ID.
          required: true
      post:
        displayName: notificationsAcknowledge
        description: |
          Acknowledge a notification. The notification is then deleted from
          the system.
  /upgrade/uploadbundle/{componentID}:
    displayName: upgrade
    description: |
      Upgrading NSX Manager
      ----
      If you are upgrading from vCloud Networking and Security to NSX, all
      grouping objects from vShield Manager 5.5 are carried over to NSX.
      Though new objects in NSX can be created only at a global scope, the
      scope of upgraded objects is maintained, and these objects can be
      edited. For example, you can nest the following security groups within
      an upgraded security group at the datacenter scope:

      * security groups created at same datacenter scope (via REST only)
      * security groups created at portgroup scope, which fall under the
      datacenter (via REST only).

      Security groups created at the global scope cannot be nested under a
      security group created at a lower scope such as a
      datacenter.

      All users and associated roles are carried over to NSX as well.
      In all API calls for upgrading the NSX Manager, the **componentId**
      parameter can be *NSX* or *NSXAPIMGMT*.
    uriParameters:
      componentID:
        required: true
        displayName: componentID
        description: Component ID.
    post:
      displayName: upgradeBundleUpload
      description: Upload upgrade bundle.
    get:
      displayName: upgradeBundleDetails
      description: |
        After the upgrade bundle is uploaded, you can query upgrade details
        such as pre‐upgrade validation warning or error messages along with
        pre‐upgrade questions.
  /upgrade/start/{componentID}:
    displayName: upgradeStart
    description: |
      Start Upgrade
      ----
    uriParameters:
      componentID:
        required: true
        displayName: componentID
        description: Component ID
    get:
      displayName: upgradeStart
      description: Start upgrade process.
  /status/{componentID}:
    displayName: upgradeStatus
    description: |
      Upgrade Status
      ----
    uriParameters:
      componentID:
        required: true
        displayName: componentID
        description: Component ID.
    get:
      displayName: upgradeStatus
      description: Query upgrade status.
  /certificatemanager:
    displayName: certificateManager
    description: |
      Working with Certificates on the NSX Manager Appliance
      -------
    /pkcs12keystore/nsx:
      displayName: certificatesKeystore
      description: |
        Working with Keystore Files
        ------------
      post:
        displayName: certificatesKeystoreUpdate
        description: |
          Upload keystore file.
          ___
          Input is PKCS#12 formatted NSX file along with password.
        queryParameters:
          password:
            displayName: password
            description: Password.
    /certificates/nsx:
      displayName: certificateManagerNsx
      description: |
        NSX Manager Certificate Manager
        --------
      get:
        displayName: certificateManagerCertificatesNsxRead
        description: |
          Retrieve certificate information from NSX Manager.
        responses:
          200:
            body:
              application/xml:
                example: |
                  <x509Certificates>
                    <x509certificate>
                      <subjectCn></subjectCn>
                      <issuerCn></issuerCn>
                      <version></version>
                      <serialNumber></serialNumber>
                      <signatureAlgo></signatureAlgo>
                      <signature></signature>
                      <notBefore></notBefore>
                      <notAfter></notAfter>
                      <issuer></issuer>
                      <subject></subject>
                      <publicKeyAlgo></publicKeyAlgo>
                      <publicKeyLength></publicKeyLength>
                      <rsaPublicKeyModulus></rsaPublicKeyModulus>
                      <rsaPublicKeyExponent></rsaPublicKeyExponent>
                      <sha1Hash></sha1Hash>
                      <md5Hash></md5Hash>
                      <isCa></isCa>
                      <isValid></isValid>
                    </x509certificate>
                    ....
                  </x509Certificates>
    /csr/nsx:
      displayName: certificateCsr
      description: |
        Working with Certificate Signing Requests
        ------
      post:
        displayName: certificateCsrCreate
        description: |
          Create a certificate signing request (CSR) for NSX Manager.
          ___
          The response header contains the created file location.

          **Method history:**

          Release | Modification
          --------|-------------
          6.2.3 | Method introduced. Replaces `PUT /api/1.0/appliance-management/certificatemanager/nsx/csr`.
        body:
          application/xml:
            example: |
              <csr>
                <algorithm></algorithm>
                <keySize></keySize>
                <subjectDto>
                  <commonName></commonName>
                  <organizationUnit></organizationUnit>
                  <organizationName></organizationName>
                  <localityName></localityName>
                  <stateName></stateName>
                  <countryCode></countryCode>
                </subjectDto>
              </csr>
      get:
        displayName: certificateCsrRead
        description: |
          Retrieve generated certificate signing request (CSR).
    /uploadchain/nsx:
      displayName: certificateChain
      description: |
        Working with Certificate Chains
        -----
      post:
        displayName: certificateChainUpload
        description: |
          Upload certificate chain.
          ___
          Input is certificate chain file which is a PEM encoded chain of
          certificates received from the CA after signing a CSR.
/2.0/systemevent:
  displayName: systemEvents
  description: |
    Working with NSX Manager System Events
    ==========
  get:
    displayName: systemEventsRead
    description: Get NSX Manager system events
    queryParameters:
      startIndex:
        displayName: startIndex
        description: !include documentation/reuse/startindex
        required: false
      pageSize:
        displayName: pageSize
        description: !include documentation/reuse/pagesize-1024
        default: 256
        required: false
/2.0/auditlog:
  displayName: auditLogs
  description: |
    Working with NSX Manager Audit Logs
    ==========
  get:
    displayName: auditLogsRead
    description: Get NSX Manager audit logs
    queryParameters:
      startIndex:
        displayName: startIndex
        description: !include documentation/reuse/startindex
        required: false
      pageSize:
        displayName: pageSize
        description: !include documentation/reuse/pagesize-1024
        required: false
        default: 256
/2.0/nwfabric:
  displayName: nwfabric
  description: |
    Working with Network Fabric Configuration
    =====
  /configure:
    displayName: nwfabricConfig
    description: |
      Working with Network Virtualization Components and VXLAN.
      ___
      Cluster preparation can be broken down into the following:
        * Install VIB and non-VIB related action: Before any per-host config
        a VIB must be installed on the host. The feature can use this time to
        perform other bootstrapping tasks which do not depend on
        VIB-installation. e.g. VXLAN creates the vmknic-pg and sets up some
        opaque data.
        * Post-VIB install: Prepare each host for the feature. In the case of
        VXLAN, create vmknics.
    post:
      displayName: nwfabricConfigCreate
      description: |
        Install network fabric or VXLAN.
        ___
        You install the network infrastructure components in your virtual
        environment on a per-cluster level for each vCenter server, which
        deploys the required software on all hosts in the cluster. This software
        is also referred to as an NSX vSwitch. When a new host is added to this
        cluster, the required software is automatically installed on the newly
        added host. After the network infrastructure is installed on a cluster,
        Logical Firewall is enabled on that cluster.
        ___
        See examples for the following tasks:
        * Install Network Virtualization Components
        * Configure VXLAN
        * Configure VXLAN with LACPv2
        * Reset Communication
        ___
        | Name | Comments |
        |------|----------|
        |**resourceId** | vCenter MOB ID of cluster. For example, domain-7. A host can be specified when resetting communication. For example, host-24. |
        |**featureId** | Feature to act upon. Omit for network virtualization components operations. Use *com.vmware.vshield.vsm.vxlan* for VXLAN operations, *com.vmware.vshield.vsm.messagingInfra* for message bus operations.|
        |**ipPoolId** | Used for VXLAN installation. If not specified, DHCP is used for VTEP address assignment.|
        |**teaming** | Used for VXLAN installation. Options are *FAILOVER_ORDER*, *ETHER_CHANNEL*, *LACP_ACTIVE*, *LACP_PASSIVE*, *LOADBALANCE_LOADBASED*, *LOADBALANCE_SRCID*, *LOADBALANCE_SRCMAC*, *LACP_V2*|
        |**uplinkPortName** | The *uplinkPortName* as specified in vCenter.|
      body:
        application/xml:
          example: |
            <!-- * Install Network Virtualization Components

            POST /api/2.0/nwfabric/configure

            <nwFabricFeatureConfig>
              <resourceConfig>
                <resourceId>CLUSTER MOID</resourceId>
              </resourceConfig>
            </nwFabricFeatureConfig> -->

            <!-- * Configure VXLAN

            POST /api/2.0/nwfabric/configure

            <nwFabricFeatureConfig>
              <featureId>com.vmware.vshield.vsm.vxlan</featureId>
              <resourceConfig>
                <resourceId>CLUSTER MOID</resourceId>
                <configSpec class="clusterMappingSpec">
                  <switch>
                    <objectId>DVS MOID</objectId></switch>
                    <vlanId>0</vlanId>
                    <vmknicCount>1</vmknicCount>
                    <ipPoolId>IPADDRESSPOOL ID</ipPoolId>
                </configSpec>
              </resourceConfig>
              <resourceConfig>
                <resourceId>DVS MOID</resourceId>
                <configSpec class="vdsContext">
                  <switch>
                      <objectId>DVS MOID</objectId>
                  </switch>
                  <mtu>1600</mtu>
                  <teaming>ETHER_CHANNEL</teaming>
                </configSpec>
              </resourceConfig>
            </nwFabricFeatureConfig> -->

            <!-- * Configure VXLAN with LACPv2

            POST /api/2.0/nwfabric/configure

            <nwFabricFeatureConfig>
              <featureId>com.vmware.vshield.nsxmgr.vxlan</featureId>
              <resourceConfig>
                <resourceId>CLUSTER MOID</resourceId>
                <configSpec class="clusterMappingSpec">
                  <switch>
                    <objectId>DVS MOID</objectId>
                  </switch>
                  <vlanId>0</vlanId>
                  <vmknicCount>1</vmknicCount>
                </configSpec>
              </resourceConfig>
              <resourceConfig>
                <resourceId>DVS MOID</resourceId>
                <configSpec class="vdsContext">
                  <switch>
                    <objectId>DVS MOID</objectId>
                  </switch>
                  <mtu>1600</mtu>
                  <teaming>LACP_V2</teaming>
                  <uplinkPortName>LAG NAME</uplinkPortName>
                </configSpec>
              </resourceConfig>
            </nwFabricFeatureConfig> -->

            <!-- * Reset Communication

            POST /api/2.0/nwfabric/configure?action=synchronize

            <nwFabricFeatureConfig>
              <featureId>com.vmware.vshield.vsm.messagingInfra</featureId>
              <resourceConfig>
                <resourceId>resourceId</resourceId>
              </resourceConfig>
            </nwFabricFeatureConfig> -->

            <!-- * Basic Example -->
            <nwFabricFeatureConfig>
              <featureId></featureId>
              <resourceConfig>
                <resourceId></resourceId>
                <configSpec></configSpec>
              </resourceConfig>
            </nwFabricFeatureConfig>

          schema: nwFabricConfig
      queryParameters:
        action:
          displayName: action
          description: |
            Specify *synchronize* to reset communication between NSX Manager
            and a host or cluster.
    put:
      displayName: nwfabricConfigUpdate
      description: |
        Upgrade Network virtualization components.
        ____
        This API call can be used to upgrade network virtualization components.
        After NSX Manager is upgraded, previously prepared clusters must have
        the 6.x network virtualization components installed.
      body:
        application/xml:
          example: |
            <nwFabricFeatureConfig>
              <resourceConfig>
                <resourceId>CLUSTER MOID</resourceId>
              </resourceConfig>
            </nwFabricFeatureConfig>
          schema: nwFabricConfig
    delete:
      displayName: nwfabricConfigDelete
      description: |
        Remove VXLAN or network virtualization components.
        ___
        Removing network virtualization components removes previously
        installed VIBs, tears down NSX Manager to ESXi messaging, and removes
        any other network fabric dependent features such as logical switches.
        If a feature such as logical switches is being used in your
        environment, this call fails.
        ___
        Removing VXLAN does not remove the network virtualization components
        from the cluster.
        ___
        | Name | Comments |
        |------|----------|
        |**resourceId** | vCenter MOB ID of cluster. For example, domain-7.|
        |**featureId** | Feature to act upon. Omit for network virtualization components operations. Use *com.vmware.vshield.vsm.vxlan* for VXLAN operations.|
      body:
        application/xml:
          example: |
            <!-- * Remove Network Virtualization Components -->

            <nwFabricFeatureConfig>
              <resourceConfig>
                <resourceId>CLUSTER MOID</resourceId>
              </resourceConfig>
            </nwFabricFeatureConfig>

            <!-- * Remove VXLAN

            <nwFabricFeatureConfig>
              <featureId>com.vmware.vshield.vsm.vxlan</featureId>
              <resourceConfig>
                <resourceId>CLUSTER MOID</resourceId>
               </resourceConfig>
            </nwFabricFeatureConfig>

            * Remove VXLAN with vDS context

            <nwFabricFeatureConfig>
              <featureId>com.vmware.vshield.vsm.vxlan</featureId>
              <resourceConfig>
                <resourceId>CLUSTER MOID</resourceId>
                <configSpec class="map">
                  <entry>
                    <keyclass="java.lang.String">vxlan</key>
                    <valueclass="java.lang.String">cascadeDeleteVdsContext</value>
                  </entry>
                </configSpec>
              </resourceConfig>
            </nwFabricFeatureConfig> -->
          schema: nwFabricConfig
  /features:
    displayName: nwfabricFeatures
    get:
      displayName: nwfabricFeatures
      description: |
        Retrieves all network fabric features available on the cluster. Multiple
        **featureInfo** sections may be returned.
      responses:
        200:
          body:
            application/xml:
              example: |
                <featureInfos>
                  <featureInfo>
                    <name>FEATURE NAME</name>
                    <featureId>FEATURE ID</featureId>
                    <version>FEATURE VERSION</version>
                  </featureInfo>
                </featureInfos>
  /status:
    displayName: nwfabricStatus
    description: Working with network fabric status.
    get:
      displayName: nwfabricStatus
      description: |
        Retrieve the network fabric status of the specified resource.
      queryParameters:
        resource:
          displayName: resource
          description: |
            Set **resource** to the correct *resourceId* which is a valid
            vCenter MOID (e.g. domain-c34 for a cluster).
          required: true
      responses:
        200:
          body:
            application/xml:
              example: |
                <resourceStatuses>
                  <resourceStatus>
                    <resource>
                      <objectId>resource-id</objectId>
                      <objectTypeName>ClusterComputeResource</objectTypeName>
                      <nsxmgrUuid>jfldj</nsxmgrUuid>
                      <revision>2</revision>
                      <type>
                        <typeName>ClusterComputeResource</typeName>
                      </type>
                      <name>c-1</name>
                      <scope>
                        <id>datacenter-2</id>
                        <objectTypeName>Datacenter</objectTypeName>
                        <name>dc-1</name>
                      </scope>
                      <clientHandle></clientHandle>
                      <extendedAttributes></extendedAttributes>
                    </resource>
                    <nwFabricFeatureStatus>
                      <featureId>com.vmware.vshield.nsxmgr.nwfabric.hostPrep</featureId>
                      <featureVersion>5.5</featureVersion>
                      <updateAvailable>false</updateAvailable>
                      <status>RED</status>
                      <message></message>
                      <installed>true</installed>
                    </nwFabricFeatureStatus>
                    <nwFabricFeatureStatus>
                      <featureId>com.vmware.vshield.nsxmgr.vxlan</featureId>
                      <featureVersion>5.5</featureVersion>
                      <updateAvailable>false</updateAvailable>
                      <status>UNKNOWN</status>
                      <installed>false</installed>
                    </nwFabricFeatureStatus>
                    <nwFabricFeatureStatus>
                      <featureId>com.vmware.vshield.nsxmgr.messagingInfra</featureId>
                      <featureVersion>5.5</featureVersion>
                      <updateAvailable>false</updateAvailable>
                      <status>UNKNOWN</status>
                      <installed>false</installed>
                    </nwFabricFeatureStatus>
                    <nwFabricFeatureStatus>
                      <featureId>com.vmware.vshield.firewall</featureId>
                      <featureVersion>5.5</featureVersion>
                      <updateAvailable>false</updateAvailable>
                      <status>UNKNOWN</status>
                      <installed>false</installed>
                    </nwFabricFeatureStatus>
                  </resourceStatus>
                </resourceStatuses>
    /child/{parentResourceID}:
      displayName: childStatus
      description: |
        Working with network fabric status of child resources.
      uriParameters:
        parentResourceID:
          required: true
          displayName: parentResourceID
          description: Parent resource ID
      get:
        displayName: childStatusRead
        description: |
          Retrieve the network fabric status of child resources of the specified resource.
        responses:
          200:
            body:
              application/xml:
                example: |
                  <resourceStatuses>
                    <resourceStatus>
                      <resource>
                        <objectId>host-9</objectId>
                        <objectTypeName>HostSystem</objectTypeName>
                        <nsxmgrUuid>jfldj</nsxmgrUuid>
                        <revision>4</revision>
                        <type>
                          <typeName>HostSystem</typeName>
                        </type>
                        <name>10.135.14.186</name>
                        <scope>
                          <id>domain-c34</id>
                          <objectTypeName>ClusterComputeResource</objectTypeName>
                          <name>c-1</name>
                        </scope>
                        <clientHandle></clientHandle>
                        <extendedAttributes></extendedAttributes>
                      </resource>
                      <nwFabricFeatureStatus>
                        <featureId>com.vmware.vshield.nsxmgr.nwfabric.hostPrep</featureId>
                        <featureVersion>5.5</featureVersion>
                        <updateAvailable>false</updateAvailable>
                        <status>RED</status>
                        <message></message>
                        <installed>true</installed>
                      </nwFabricFeatureStatus>
                      <nwFabricFeatureStatus>
                        <featureId>com.vmware.vshield.nsxmgr.vxlan</featureId>
                        <featureVersion>5.5</featureVersion>
                        <updateAvailable>false</updateAvailable>
                        <status>UNKNOWN</status>
                        <installed>false</installed>
                      </nwFabricFeatureStatus>
                      <nwFabricFeatureStatus>
                        <featureId>com.vmware.vshield.nsxmgr.messagingInfra</featureId>
                        <featureVersion>5.5</featureVersion>
                        <updateAvailable>false</updateAvailable>
                        <status>UNKNOWN</status>
                        <installed>false</installed>
                      </nwFabricFeatureStatus>
                      <nwFabricFeatureStatus>
                        <featureId>com.vmware.vshield.firewall</featureId>
                        <featureVersion>5.5</featureVersion>
                        <updateAvailable>false</updateAvailable>
                        <status>UNKNOWN</status>
                        <installed>false</installed>
                      </nwFabricFeatureStatus>
                    </resourceStatus>
                  </resourceStatuses>
    /alleligible/{resourceType}:
      displayName: statusResourceType
      description: |
        Working with status of resources by criterion.
      uriParameters:
        resourceType:
          required: true
          displayName: resourceType
          description: Valid resource type
      get:
        displayName: statusResourceTypeRead
        description: |
          Retrieve status of resources by criterion.
        responses:
          200:
            body:
              application/xml:
                example: |
                  <resourceStatuses>
                    <resourceStatus>
                      <resource>
                        <objectId>domain-c34</objectId>
                        <objectTypeName>ClusterComputeResource</objectTypeName>
                        <nsxmgrUuid>jfldj</nsxmgrUuid>
                        <revision>2</revision>
                        <type>
                          <typeName>ClusterComputeResource</typeName>
                        </type>
                        <name>c-1</name>
                        <scope>
                          <id>datacenter-2</id>
                          <objectTypeName>Datacenter</objectTypeName>
                          <name>dc-1</name>
                        </scope>
                        <clientHandle></clientHandle>
                        <extendedAttributes></extendedAttributes>
                      </resource>
                      <nwFabricFeatureStatus>
                        <featureId>com.vmware.vshield.nsxmgr.nwfabric.hostPrep</featureId>
                        <featureVersion>5.5</featureVersion>
                        <updateAvailable>false</updateAvailable>
                        <status>RED</status>
                        <message></message>
                        <installed>true</installed>
                      </nwFabricFeatureStatus>
                      <nwFabricFeatureStatus>
                        <featureId>com.vmware.vshield.nsxmgr.vxlan</featureId>
                        <featureVersion>5.5</featureVersion>
                        <updateAvailable>false</updateAvailable>
                        <status>UNKNOWN</status>
                        <installed>false</installed>
                      </nwFabricFeatureStatus>
                      <nwFabricFeatureStatus>
                        <featureId>com.vmware.vshield.nsxmgr.messagingInfra</featureId>
                        <featureVersion>5.5</featureVersion>
                        <updateAvailable>false</updateAvailable>
                        <status>UNKNOWN</status>
                        <installed>false</installed>
                      </nwFabricFeatureStatus>
                      <nwFabricFeatureStatus>
                        <featureId>com.vmware.vshield.firewall</featureId>
                        <featureVersion>5.5</featureVersion>
                        <updateAvailable>false</updateAvailable>
                        <status>UNKNOWN</status>
                        <installed>false</installed>
                      </nwFabricFeatureStatus>
                    </resourceStatus>
                    <resourceStatus>
                      <resource>
                        <objectId>domain-c32</objectId>
                        <objectTypeName>ClusterComputeResource</objectTypeName>
                        <nsxmgrUuid>jfldj</nsxmgrUuid>
                        <revision>1</revision>
                        <type>
                          <typeName>ClusterComputeResource</typeName>
                        </type>
                        <name>c-2</name>
                        <scope>
                          <id>datacenter-12</id>
                          <objectTypeName>Datacenter</objectTypeName>
                          <name>dc-2</name>
                        </scope>
                        <clientHandle></clientHandle>
                        <extendedAttributes></extendedAttributes>
                      </resource>
                      <nwFabricFeatureStatus>
                        <featureId>com.vmware.vshield.nsxmgr.nwfabric.hostPrep</featureId>
                        <updateAvailable>false</updateAvailable>
                        <status>UNKNOWN</status>
                        <installed>false</installed>
                      </nwFabricFeatureStatus>
                      <nwFabricFeatureStatus>
                        <featureId>com.vmware.vshield.nsxmgr.vxlan</featureId>
                        <featureVersion>5.5</featureVersion>
                        <updateAvailable>false</updateAvailable>
                        <status>UNKNOWN</status>
                        <installed>false</installed>
                      </nwFabricFeatureStatus>
                      <nwFabricFeatureStatus>
                        <featureId>com.vmware.vshield.nsxmgr.messagingInfra</featureId>
                        <featureVersion>5.5</featureVersion>
                        <updateAvailable>false</updateAvailable>
                        <status>UNKNOWN</status>
                        <installed>false</installed>
                      </nwFabricFeatureStatus>
                      <nwFabricFeatureStatus>
                        <featureId>com.vmware.vshield.firewall</featureId>
                        <featureVersion>5.5</featureVersion>
                        <updateAvailable>false</updateAvailable>
                        <status>UNKNOWN</status>
                        <installed>false</installed>
                      </nwFabricFeatureStatus>
                    </resourceStatus>
                  </resourceStatuses>
  /clusters/{clusterID}:
    displayName: nwfabricClusters
    description: Working with locale ID configuration for clusters.
    get:
      displayName: nwfabricClustersRead
      description: Retrieve the locale ID for the specified cluster.
    put:
      displayName: nwfabricClustersUpdate
      description: Update the locale ID for the specified cluster.
      body:
        application/xml:
          example: |
            <nwFabricClusterConfig>
              <localeId></localeId>
            </nwFabricClusterConfig>
          schema: nwfabricClustersUpdate
    delete:
      displayName: nwfabricClustersDelete
      description: Delete locale ID for the specified cluster.
  /hosts/{hostID}:
    displayName: nwfabricHosts
    description: Working with locale ID configuration for hosts.
    get:
      displayName: nwfabricHostsRead
      description: Retrieve the locale ID for the specified host.
    put:
      displayName: nwfabricHostsUpdate
      description: Update the locale ID for the specified host.
      body:
        application/xml:
          example: |
            <nwFabricHostConfig>
              <localeId></localeId>
            </nwFabricHostConfig>
          schema: nwfabricHostsUpdate
    delete:
      displayName: nwfabricHostsDelete
      description: Delete the locale ID for the specified host.
/2.0/si/deploy:
  displayName: securityFabric
  description: |
    Working with Security Fabric
    ======
  post:
    displayName: securityFabricCreate
    description: Deploy security fabric
    queryParameters:
      startTime:
        displayName: startTime
        description: |
          Time to start deployment task. If not specified, deploy immediately
    body:
      application/xml:
        example: |
          <clusterDeploymentConfigs>
            <clusterDeploymentConfig>
              <clusterId></clusterId>
              <datastore></datastore>
              <services>
                <serviceDeploymentConfig>
                  <serviceId></serviceId>
                  <dvPortGroup></dvPortGroup>
                  <ipPool></ipPool>
                </serviceDeploymentConfig>
              </services>
            </clusterDeploymentConfig>
          </clusterDeploymentConfigs>
        schema: securityFabricCreate
  put:
    displayName: serviceUpgrade
    description: Upgrade service to recent version
    queryParameters:
      startTime:
        displayName: startTime
        description: optional; specify time to start upgrade
    body:
      application/xml:
        example: |
          <clusterDeploymentConfigs>
            <clusterDeploymentConfig>
              <clusterId></clusterId>
              <datastore></datastore>
              <services>
                <serviceDeploymentConfig>
                  <serviceId></serviceId>
                  <serviceInstanceId></serviceInstanceId>
                  <dvPortGroup></dvPortGroup>
                  <ipPool></ipPool>
                </serviceDeploymentConfig>
              </services>
            </clusterDeploymentConfig>
          </clusterDeploymentConfigs>
        schema: serviceUpgrade
  /service/{serviceID}:
    displayName: service
    description: Working with a specified service
    uriParameters:
      serviceID:
        displayName: serviceID
        description: Specified service
        required: true
    get:
      displayName: serviceRead
      description: Retrieve all clusters on which the service is installed
    delete:
      displayName: serviceDelete
      description: Uninstall specified service from specified clusters
      queryParameters:
        clusters:
          displayName: clusters
          description: |
            Comma-separated list of cluster id's that service needs to be
            uninstalled from
        startTime:
          displayName: startTime
          description: |
            Time for uninstall to be scheduled. If not specified, uninstall
            immediately
    /dependsOn:
      displayName: serviceDependency
      description: Identify service on which the specified service depends on
      get:
        displayName: serviceDependencyRead
        description: Identify service on which the specified service depends on
  /cluster/{clusterID}:
    displayName: serviceCluster
    description: Working with installed services on a cluster
    uriParameters:
      clusterID:
        required: true
        displayName: clusterID
        description: Cluster ID
    get:
      displayName: serviceRead
      description: Retrieve all services deployed along with their status
    delete:
      displayName: serviceDelete
      description: |
        Uninstall a service. Fails if you try to remove a service that another
        service depends on
      queryParameters:
        services:
          displayName: services
          description: |
            Comma-separated list of service id's to specify which services to
            uninstall
        startTime:
          displayName: startTime
          description: |
            Time for uninstall to be scheduled. If not specified, do immediately
    /service/{serviceID}:
      displayName: serviceDetails
      description: Information about a service
      uriParameters:
        serviceID:
          displayName: serviceID
          description: Service ID on cluster
      get:
        displayName: serviceDetailsRead
        description: Retrieve detailed information about the service
/2.0/dlp:
  displayName: dataSecurityConfiguration
  description: |
    Working with Data Security
    =======
  /regulation:
    displayName: dlpRegulation
    description: Data loss prevention regulation
    get:
      displayName: dlpRegulationRead
      description: Retrieve the list of available regulations for a policy.
  /policy/regulations:
    displayName: dlpPolicyRegulations
    description: |
      Enable one or more regulations by putting the regulation IDs into the
      policy. You can get the IDs from the output of the dlpRegulation GET call
    put:
      displayName: dlpPolicyRegulationsUpdate
      description: |
        Enable one or more regulations by putting the regulation IDs into the
        policy. You can get the IDs from the output of the dlpRegulation GET
        call
      body:
        application/xml:
          example: |
            <set>
              <long></long>
            </set>
          schema: dlpPolicyRegulationsUpdate
  /classificationvalue:
    displayName: dlpClassificationValue
    description: Classification values associated with regulations
    get:
      displayName: dlpClassificationValueRead
      description: Get all classification values
  /policy/classificationvalues:
    displayName: dlpRegexClassificationValue
    description: Configure a customized regex as a classification value
    put:
      displayName: dlpRegexClassificationValueUpdate
      description: Configure a customized regex as a classification value
      body:
        application/xml:
          example: |
            <set>
              <ClassificationValue>
                <id></id>
                <classification>
                  <id></id>
                  <name></name>
                  <providerName></providerName>
                  <description></description>
                  <customizable></customizable>
                </classification>
                <value></value>
              </ClassificationValue>
            </set>
          schema: dlpRegexClassificationValueUpdate
  /excludableareas:
    displayName: dlpExcludableAreas
    description: |
      Retrieve list of datacenters, clusters, and resource pools that are
      excludable from policy inspection
    get:
      displayName: dlpExcludableAreasList
      description: |
        Retrieve list of datacenters, clusters, and resource pools that are
        excludable from policy inspection
  /policy/excludedareas:
    displayName: dlpExcludeArea
    description: |
      (DEPRECATED; use PUT /2.0/dlp/policy/excludedsecuritygroups instead)
      Exclude areas from policy inspection
    put:
      displayName: dlpExcludeAreaUpdate
      description: |
        (DEPRECATED; use PUT /2.0/dlp/policy/excludedsecuritygroups instead)
        Exclude areas from policy inspection
      body:
        application/xml:
          example: |
            <set>
              <string></string>
            </set>
          schema: dlpExcludeAreaUpdate
  /policy/includedsecuritygroups:
    displayName: dlpIncludeSecGroup
    description: Include security groups in data security scan
    get:
      displayName: dlpIncludeSecGroupRead
      description: |
        Retrieve security groups that have been included in data security scans
    put:
      displayName: dlpIncludeSecGroupUpdate
      description: Include security groups in data security scan
      body:
        application/xml:
          example: |
            <set>
              <string></string>
              <string></string>
            </set>
          schema: dlpIncludeSecGroupUpdate
  /policy/excludedsecuritygroups:
    displayName: dlpExcludeSecGroup
    description: Exclude security groups in data security scan
    get:
      displayName: dlpExcludeSecGroupRead
      description: |
        Retrieve security groups that have been excluded from data security
        scans
    put:
      displayName: dlpExcludeSecGroupUpdate
      description: Exclude security groups in data security scan
      body:
        application/xml:
          example: |
            <set>
              <string></string>
              <string></string>
              </set>
          schema: dlpExcludeSecGroupUpdate
  /policy/FileFilters:
    displayName: dlpFileFilters
    description: Configure file filters for scanning
    put:
      displayName: dlpFileFiltersUpdate
      description: Configure file filters for scanning
      body:
        application/xml:
          example: |
            <FileFilters>
              <scanAllFiles></scanAllFiles>
              <lastModifiedAfter></lastModifiedAfter>
              <extensionsIncluded></extensionsIncluded>
              <extensions></extensions>
            </FileFilters>
          schema: dlpFileFiltersUpdate
  /policy/saved:
    displayName: dlpPolicySaved
    description: Retrieve last saved policy
    get:
      displayName: dlpPolicySavedList
      description: Get saved policy
  /policy/published:
    displayName: dlpPolicyPublished
    description: Retrieve currently published SDD policy
    get:
      displayName: dlpPolicyPublishedList
      description: Retrieve currently published policy
  /policy/publish:
    displayName: dlpPolicyPublish
    description: |
      After updating a policy with added regulations, excluded areas, or
      customized regex values, publish an updated policy to enforce new
      parameters
    put:
      displayName: dlpPolicyPublishExecute
      description: Publish the updated policy
  /scanop:
    displayName: dlpScanning
    description: Start, pause, resume, or stop a data security scan
    put:
      displayName: dlpScanningUpdate
      description: Start, pause, resume, or stop a data security scan
      body:
        application/xml:
          example: |
            <ScanOp></ScanOp>
          schema: dlpScanningUpdate
  /scanstatus:
    displayName: dlpScanStatus
    description: Retrieve the status of a scan operation
    get:
      displayName: dlpScanStatusList
      description: Retrieve the status of a scan operation
  /scan/current/vms/{ID}:
    displayName: dlpScanVMs
    description: Retrieve information about the vm's being scanned
    uriParameters:
      ID:
        displayName: ID
        description: |
          Limit filter results by VC MOID of datacenter, cluster, or resource
          pool
    get:
      displayName: dlpScanVMsRead
      description: Retrieve information about the vm's being scanned
      queryParameters:
        scanstatus:
          displayName: scanstatus
          description: |
            Specify scan status of vm's to be retrieved
            (all|notstarted|started|completed)
        pagesize:
          displayName: pagesize
          description: !include documentation/reuse/pagesize-1024
          default: 256
        startindex:
          displayName: startindex
          description: !include documentation/reuse/startindex
  /completedscansummaries:
    displayName: dlpScanSummaries
    description: |
      Retrieve start and end time, total number of vm's scanned, and total
      number of violations for the last five completed data security scans
    get:
      displayName: dlpScanSummariesRead
      description: Retrieve scan summaries
  /scan/{scanID}/detailsascsv:
    displayName: dlpPreviousScan
    description: Retrieve report on results of previous scan in CSV format
    uriParameters:
      scanID:
        required: true
        displayName: scanID
        description: Specified scan ID
    get:
      displayName: dlpPreviousScanRead
      description: |
        Retrieve ID, Name, Scan status, and Violation counts for VM's scanned
        during specified scan
  /scan/{scanID}/policyasxml:
    displayName: dlpPolicyAsXML
    description: |
      Retrieve XML representation of the policy used in the previous scan
    uriParameters:
      scanID:
        required: true
        displayName: scanID
        description: Specified previous scan
    get:
      displayName: dlpPolicyAsXMLList
      description: |
        Retrieve XML representation of the policy used in the previous scan
  /violations:
    displayName: dlpViolations
    description: Query the regulations that have been violated in scans
    get:
      displayName: dlpViolationsRead
      description: Get violation count for entire inventory
    /{contextID}:
      displayName: dlpViolation
      description: Get violation count for specific resource
      uriParameters:
        contextID:
          required: true
          displayName: contextID
          description: |
            Specified resource (moid of datacenter, cluster, folder, resource
            pool, or vm)
      get:
        displayName: dlpViolationRead
        description: Get violation count for specific resource
  /violatingfiles:
    displayName: dlpViolatingFiles
    description: Get violating files and the regulations each file violated
    get:
      displayName: dlpViolatingFilesRead
      description: Get violating files and the regulations each file violated
      queryParameters:
        pagesize:
          displayName: pagesize
          description: !include documentation/reuse/pagesize
          required: true
        startindex:
          displayName: startindex
          description: Page number from which the results will be returned.
          required: true
    /{contextID}:
      displayName: dlpViolatingFilesContext
      description: Get violating files for a resource
      uriParameters:
        contextID:
         required: true
         displayName: contextID
         description: |
          Specified resource (moid of datacenter, cluster, folder, resource
          pool, or vm)
      get:
        displayName: dlpViolatingFilesContext
        description: Get violating files for a resource
        queryParameters:
          pagesize:
            displayName: pagesize
            description: !include documentation/reuse/pagesize
          startindex:
            displayName: startindex
            description: Page number from which the results will be returned.
  /violatingfilesascsv:
    displayName: dlpViolatingFilesCSV
    description: |
      Display the violating files and the regulations each file violated in CSV
      format
    get:
      displayName: dlpViolatingFilesCSVList
      description: |
        Display the violating files and the regulations each file violated in
        CSV format
    /{contextID}:
      displayName: dlpViolatingFilesContextCSV
      description: |
        Get violated regulations and violating files for the resource in CSV
        format
      uriParameters:
        contextID:
         required: true
         displayName: contextID
         description: |
          Specified resource (moid of datacenter, cluster, folder, resource
          pool, or vm)
      get:
        displayName: dlpViolatingFilesContextCSVList
        description: |
          Get violated regulations and violating files for the resource in
          CSV format
/1.0/eventcontrol:
  displayName: eventControl
  description: |
    Working with Data Collection for Activity Monitoring
    ===========
  /vm/{vmID}/request:
    displayName: dataCollectionVM
    description: |
      Working With Data Collection on a Specific Virtual Machine
      ----
    uriParameters:
      vmID:
        displayName: vmID
        description: MOID of the guest vm
        required: true
    post:
      displayName: dataCollectionVMCreate
      description: Enable or disable data collection on a virtual machine
      body:
        application/xml:
          example: |
            <perVmConfig>
              <actions>
                <action>
                  <type></type>
                  <value></value>
                </action>
              </actions>
            </perVmConfig>
          schema: dataCollectionVMCreate
  /eventcontrol-root/request:
    displayName: dataCollectionKillSwitch
    description: |
      Working with the Data Collection Kill Switch
      ----
    post:
      displayName: dataCollectionKillSwitchToggle
      description: Turn on/off data collection at global level
      body:
        application/xml:
          example: |
            <request>
              <actions>
                <action>
                  <type></type>
                  <value></value>
                </action>
              </actions>
            </request>
          schema: dataCollectionKillSwitchToggle
  /config/vm/{vmID}:
    displayName: dataCollectionVMInfo
    description: |
      Retrieve Data Collection Configuration
      -----
    uriParameters:
      vmID:
        displayName: vmID
        description: MOID of the guest vm
        required: true
    get:
      displayName: dataCollectionVMInfoRead
      description: Retrieve per vm configuration for data collection
/3.0/ai:
  displayName: activityMonitoring
  description: |
    Working with Activity monitoring
    ======
  /records:
    displayName: userActivity
    description: |
      Get aggregated user activity (action records) using parameters. Requires
      vShield Endpoint and NSX Endpoint configured, and Data collection enabled
      on 1+ vm's
    get:
      displayName: userActivityRead
      description: Get aggregated user activity
      queryParameters:
        query:
          displayName: query
          description: Name of report (resource,adg,containers,sam,vma)
          default: resource
          required: true
        interval:
          displayName: interval
          description: |
            Relative time to current time (number followed by either m,h,d,s)
          example: 60m
          required: true
        stime:
          displayName: stime
          description: Start time for query
          default: 2012-02-28T21:00
        etime:
          displayName: etime
          description: End time for query
          default: 2012-02-29T21:00
        param:
          displayName: param
          description: |
            Parameter to be applied to query (<param-name>:<param-type>:
              <comma-separated-values>:operator)
          default: src:SECURITY_GROUP:1:INCLUDE
        pagesize:
          displayName: pagesize
          description: !include documentation/reuse/pagesize-rec-100-2000
          default: 1000
        startindex:
          displayName: startindex
          description: !include documentation/reuse/startindex
          default: 100
  /userdetails:
    displayName: userDetails
    description: |
      Retrieve user detail records in accordance with given query parameters
    get:
      displayName: userDetailsRead
      description: |
        Retrieve user detail records in accordance with given query parameters
      queryParameters:
        query:
          displayName: query
          description: Name of report (resource,adg,containers,sam,vma)
          required: true
          default: resource
        interval:
          displayName: interval
          description: |
            Relative time to current time (number followed by either m,h,d,s)
          example: 60m
          required: true
        stime:
          displayName: stime
          description: Start time for query
          default: 2012-02-28T21:00
        etime:
          displayName: etime
          description: End time for query
          default: 2012-02-29T21:00
        param:
          displayName: param
          description: |
            Parameter to be applied to query (<param-name>:<param-type>:
              <comma-separated-values>:operator)
          default: src:SECURITY_GROUP:1:INCLUDE
        pagesize:
          displayName: pagesize
          description: !include documentation/reuse/pagesize-rec-100-2000
          default: 1000
        startindex:
          displayName: startindex
          description: !include documentation/reuse/startindex
          default: 100
  /user/{userID}:
    displayName: specificUserDetails
    description: Retrieve details for a specific user
    uriParameters:
      userID:
        required: true
        displayName: userID
        description: User ID
    get:
      displayName: specificUserDetailsRead
      description: Retrieve details for a specific user
  /app:
    displayName: appDetails
    description: Retrieve app details
    get:
      displayName: appDetailsRead
      description: Retrieve app details
    /{appID}:
      displayName: specificAppDetails
      description: Retrieve details for specific app
      uriParameters:
        appID:
          required: true
          displayName: appID
          description: Specified app ID
      get:
        displayName: specificAppDetailsRead
        description: Retrieve details for specific app
  /host:
    displayName: hostDetails
    description: Host details
    get:
      displayName: hostDetailsRead
      description: |
        Retrieve list of all discovered hosts (both by agent introspection and
        LDAP Sync) and their detail
    /{hostID}:
      displayName: specificHostDetails
      description: Specific host details
      uriParameters:
        hostID:
          displayName: hostID
          description: Specified host ID
          required: true
      get:
        displayName: specificHostDetailsRead
        description: Get host details
  /desktoppool:
    displayName: desktopPool
    description: Desktop pool details
    get:
      displayName: desktopPoolRead
      description: |
        Retrieve list of all discovered desktop pools by agent introspection
    /{desktoppoolID}:
      displayName: specificDesktopPool
      description: Specific desktop pool details
      uriParameters:
        desktoppoolID:
          displayName: desktoppoolID
          description: Specified desktop pool
          required: true
      get:
        displayName: specificDesktopPoolRead
        description: Retrieve specific desktop pool details
  /vm:
    displayName: vmDetails
    description: Virtual machine details
    get:
      displayName: vmDetailsRead
      description: Retrieve list of all discovered vm's
    /{vmID}:
      displayName: specificVMDetails
      description: Specific VM details
      uriParameters:
        vmID:
          required: true
          displayName: vmID
          description: VM ID
      get:
        displayName: specificVMDetailsRead
        description: Retrieve details about a specific virtual machine
  /directorygroup:
    displayName: dirGroup
    description: LDAP directory group details
    get:
      displayName: dirGroupRead
      description: |
        Retrieve list of all discovered (and configured) LDAP directory groups
    /{directorygroupID}:
      displayName: specificDirGroup
      description: Specific directory group details
      uriParameters:
        directorygroupID:
          displayName: directorygroupID
          description: Specified directory group
          required: true
      get:
        displayName: specificDirGroupRead
        description: Retrieve details about a specific directory group
    /user/{userID}:
      displayName: userDirGroup
      description: AD groups that a user belongs to
      uriParameters:
        userID:
          displayName: userID
          required: true
          description: User ID
      get:
        displayName: userDirGroupRead
        description: Retrieve AD groups that user belongs to
  /securitygroup:
    displayName: secgroupDetails
    description: Security group details
    get:
      displayName: secgroupDetailsRead
      description: Retrieve list of all observed security groups
    /{secgroupID}:
      displayName: specificSecgroupDetails
      description: Specific security group details
      uriParameters:
        secgroupID:
          required: true
          displayName: secgroupID
          description: Specified security group
      get:
        displayName: specificSecgroupDetailsRead
        description: Retrieve details about specific security group
/1.0/directory:
  displayName: domain
  description: |
    Working with Domains
    ===========
  /updateDomain:
    displayName: domainUpdate
    description: |
      Updating Domains
      ---------------
    post:
      displayName: domainCreate
      description: Register or update a domain with NSX Manager
      body:
        application/xml:
          example: |
            <DirectoryDomain>
              <name>example.com</name>
              <netbiosName>Example</netbiosName>
              <username>Administrator</username>
              <password>xxx</password>
            </DirectoryDomain>
          schema: domainCreate
  /listDomains:
    displayName: domainList
    description: |
      Retrieve LDAP Domains
      ---
    get:
      displayName: domainListRead
      description: Retrieve all agent discovered (or configured) LDAP domains
  /deleteDomain/{ID}:
    displayName: domainDelete
    description: |
      Delete a Specific Domain
      ----
    uriParameters:
      ID:
        required: true
        displayName: ID
        description: Domain ID
    delete:
      displayName: domainDelete
      description: Delete domain
  /directory:
    displayName: ldapEventLogServer
    description: |
      Working with LDAP Servers and EventLog Servers
      ----
    /updateLdapServer:
      displayName: ldapServerCreate
      description: | 
        Create LDAP Server
        ----
      post:
        displayName: ldapServerCreate
        description: Create LDAP server.
        body:
          application/xml:
            example: |
              <LDAPServer>
                <domainId></domainId>
                <hostName></hostName>
                <enabled></enabled>
              </LDAPServer>
            schema: ldapServerCreate
    /listLdapServersForDomain/{domainID}:
      displayName: ldapServerDomain
      description: |
        Query LDAP Servers for a Domain
        ----
      uriParameters:
        domainID:
          displayName: domainID
          description: Specified domain
          required: true
      get:
        displayName: ldapServerDomainRead
        description: Query LDAP servers for a domain
    /fullSync/{domainID}:
      displayName: ldapServerSync
      description: |
        Start LDAP Full Sync
        ----
      uriParameters:
        domainID:
          displayName: domainID
          description: Specified domain
          required: true
      put:
        displayName: ldapServerSync
        description: Start LDAP full sync.
    /deltaSync/{domainID}:
      displayName: ldapServerDeltaSync
      description: |
        Start LDAP Delta Sync
        -----
      uriParameters:
        domainID:
          displayName: domainID
          description: Specified domain
          required: true
      put:
        displayName: ldapServerDeltaSync
        description: Start LDAP delta sync.
    /deleteLdapServer/{serverID}:
      displayName: ldapServerDelete
      description: |
        Delete LDAP Server
        ----
      uriParameters:
        serverID:
          required: true
          displayName: serverID
          description: Specified LDAP server
      delete:
        displayName: ldapServerDelete
        description: Delete LDAP server.
    /updateEventLogServer:
      displayName: eLogServer
      description: |
        EventLog Server
        ----
      post:
        displayName: eLogServerCreate
        description: Create EventLog server
        body:
          application/xml:
            example: |
              <EventlogServer>
                <id></id>
                <domainId></domainId>
                <hostName></hostName>
                <enabled></enabled>
              </EventlogServer>
            schema: eLogServerCreate
    /listEventLogServersForDomain/{domainID}:
      displayName: eLogServerDomainRead
      description: |
        Working with EventLog Servers for a Domain
        ----
      uriParameters:
        domainID:
          required: true
          displayName: domainID
          description: Specified domain
      get:
        displayName: eLogServerDomainRead
        description: Query EventLog servers for a domain
    /deleteEventLogServer/{serverID}:
      displayName: eLogServerDelete
      description: Delete EventLog server
      uriParameters:
        serverID:
          required: true
          displayName: serverID
          description: Specified EventLog server ID
      delete:
        displayName: eLogServerDelete
        description: Delete EventLog server
/1.0/identity:
  displayName: mappingLists
  description: |
    Working with Mapping Lists
    =========
  /userIpMapping:
    displayName: userIpMapping
    description: Query user-to-ip mapping list from database
    get:
      displayName: userIpMappingRead
      description: Query user-to-ip mapping list from database
  /hostIpMapping:
    displayName: hostIpMapping
    description: Query host-to-ip mapping list from database
    get:
      displayName: hostIpMappingRead
      description: Query host-to-ip mapping list from database
  /ipToUserMapping:
    displayName: ipToUserMapping
    description: Query set of users associated with a given set of Ip addresses
    get:
      displayName: ipToUserMappingRead
      description: Query set of users associated with a given set of Ip addresses
  /directoryGroupsForUser/{userID}:
    displayName: userDirGroups
    description: |
      Query set of Windows Domain Groups (AD Groups) to which the specified
      user belongs
    uriParameters:
      userID:
        required: true
        displayName: userID
        description: User ID
    get:
      displayName: userDirGroupsRead
      description: |
        Query set of Windows Domain Groups (AD Groups) to which the specified
        user belongs
  /staticUserMapping/{userID}/{IP}:
    displayName: staticUserMapping
    description: Create static user IP mapping
    uriParameters:
      userID:
        required: true
        displayName: userID
        description: User ID
      IP:
        required: true
        displayName: IP
        description: IP address
    post:
      displayName: staticUserMappingCreate
      description: Create static user IP mapping
  /staticUserMappings:
    displayName: staticUserMappings
    description: Query static user IP mapping list
    get:
      displayName: staticUserMappingsRead
      description: Query static user IP mapping list
  /staticUserMappingsbyUser/{userID}:
    displayName: staticUserMappingsbyUser
    description: Query static user IP mapping for specified user
    uriParameters:
      userID:
        required: true
        displayName: userID
        description: User ID
    get:
      displayName: staticUserMappingsbyUserRead
      description: Query static user IP mapping for specified user
    delete:
      displayName: staticUserMappingsbyUserDelete
      description: Delete static user IP mapping for specified user
  /staticUserMappingsbyIP/{IP}:
    displayName: staticUserMappingsbyIP
    description: Query static user IP mapping for specified IP
    uriParameters:
      IP:
        required: true
        displayName: IP
        description: IP address
    get:
      displayName: staticUserMappingsbyIPRead
      description: Query static user IP mapping for specified IP
    delete:
      displayName: staticUserMappingsbyIPDelete
      description: Delete static user IP mapping for specified IP
/1.0/sam/syslog:
  displayName: activityMonitoringSyslog
  description: |
    Working with Activity Monitoring Syslog Support
    ==========
  /enable:
    displayName: syslogEnable
    description: |
      Enable Syslog Support
    post:
      displayName: syslogEnable
      description: Enable syslog support.
  /disable:
    displayName: syslogDisable
    description: |
      Disable Syslog Support
      ----
    post:
      displayName: syslogDisable
      description: Disable syslog support.
/2.0/si:
  displayName: solutionIntegration
  description: |
    Working with Solution Integrations
    =========
  /host/{hostID}/agents:
    displayName: hostAgents
    description: Agents on a specified host
    uriParameters:
      hostID:
        required: true
        displayName: hostID
        description: Specified host
    get:
      displayName: hostAgentsRead
      description: Retrieve all agents on the host
  /agent/{agentID}:
    displayName: agentInformation
    description: Agent details (host components and appliances)
    uriParameters:
      agentID:
        required: true
        displayName: agentID
        description: Specified agent
    get:
      displayName: agentInformationRead
      description: Retrieve agent details
  /deployment/{deploymentunitID}/agents:
    displayName: deploymentAgents
    description: Agents for a specified deployment
    uriParameters:
      deploymentunitID:
        required: true
        displayName: deploymentunitID
        description: Specified deployment
    get:
      displayName: deploymentAgentsRead
      description: Retrieve all agents for the specified deployment
  /fabric/sync/conflicts:
    displayName: agentConflicts
    description: Working with conflicting agencies
    get:
      displayName: agentConflictsRead
      description: |
        Retrieve conflicting Deployment Units and EAM Agencies, if any, and the
        allowed operations on them
    put:
      displayName: agentConflictsUpdate
      description: |
        Create deployment units for conflicting EAM Agencies, delete
        conflicting EAM agencies, or delete deployment units for conflicting
        EAM agencies
      body:
        application/xml:
          example: |
            <conflictResolverInfo>
              <agencyAction></agencyAction>
            </conflictResolverInfo>
/2.0/services/macset:
  displayName: macsets
  description: |
    Working with MAC Sets
    =============
  /{macsetId}:
    displayName: macset
    description: Operations on an individual MAC set
    uriParameters:
      macsetId:
        required: true
        displayName: macsetId
        description: |
          Specified MACset ID (Can be retrieved by listing the MACset on a scope)
    get:
      displayName: macsetRead
      description: Retrieve details about a MAC set
      responses:
        200:
          body:
            application/xml:
              example: |
                <macset>
                  <objectId>macset-1</objectId>
                  <objectTypeName>MACSet</objectTypeName>
                  <vsmUuid>4226CACF-0558-AFF3-5D92-279B201C40E2</vsmUuid>
                  <nodeId>72eee9ab-bb75-49ba-a782-d7dffedd180a</nodeId>
                  <revision>4</revision>
                  <type>
                  <typeName>MACSet</typeName>
                  </type>
                  <name>system-generated-broadcast-macset</name>
                  <scope>
                    <id>globalroot-0</id>
                    <objectTypeName>GlobalRoot</objectTypeName>
                    <name>Global</name>
                  </scope>
                  <clientHandle></clientHandle>
                  <extendedAttributes>
                    <extendedAttribute>
                      <name>isReadOnly</name>
                      <value>true</value>
                    </extendedAttribute>
                    <extendedAttribute>
                      <name>isHidden</name>
                      <value>true</value>
                    </extendedAttribute>
                    <extendedAttribute>
                      <name>facadeHidden</name>
                      <value>true</value>
                    </extendedAttribute>
                  </extendedAttributes>
                  <isUniversal>false</isUniversal>
                  <universalRevision>0</universalRevision>
                  <inheritanceAllowed>false</inheritanceAllowed>
                  <value>FF:FF:FF:FF:FF:FF</value>
                </macset>
    put:
      displayName: macsetUpdate
      description: Modify an existing MAC set.
      body:
        application/xml:
          example: |
            <macset>
              <objectId></objectId>
              <type>
                <typeName></typeName>
              </type>
              <description></description>
              <name></name>
              <revision></revision>
              <objectTypeName></objectTypeName>
              <value></value>
            </macset>
          schema: macSetCreateUpdate
    delete:
      displayName: macsetDelete
      description: Delete a MAC set
      queryParameters:
        force:
          required: false
          displayName: force
          description: |
            Indicates forced or unforced delete. With forced delete, the object
            is deleted even if used in other places such as firewall rules,
            causing invalid referrals. For unforced delete, the object is deleted
            only if it is no used by other configurations; otherwise the delete
            fails.
          type: boolean
  /scope/{scopeId}:
    displayName: macsetScopes
    description: Working with MAC Sets.
    uriParameters:
      scopeId:
        required: true
        displayName: scopeId
        description: |
          Can be "globalroot-0", "universalroot-0" or datacenterId in upgrade
          use cases. Universal MAC sets are read-only from secondary managers.
    post:
      displayName: macsetScopesCreate
      description: Create a MACset on a specified scope
      body:
        application/xml:
          example: |
            <macset>
              <objectId></objectId>
              <type>
                <typeName></typeName>
              </type>
              <description></description>
              <name></name>
              <revision></revision>
              <objectTypeName></objectTypeName>
              <value></value>
            </macset>
          schema: macSetCreateUpdate
    get:
      displayName: macsetScopesRead
      description: List MACsets created on a specified scope
      responses:
        200:
          body:
            application/xml:
              example: |
                <list>
                  <macset>
                    <objectId>macset-1</objectId>
                    <objectTypeName>MACSet</objectTypeName>
                    <vsmUuid>4226CACF-0558-AFF3-5D92-279B201C40E2</vsmUuid>
                    <nodeId>72eee9ab-bb75-49ba-a782-d7dffedd180a</nodeId>
                    <revision>4</revision>
                    <type>
                      <typeName>MACSet</typeName>
                    </type>
                    <name>system-generated-broadcast-macset</name>
                    <scope>
                      <id>globalroot-0</id>
                      <objectTypeName>GlobalRoot</objectTypeName>
                      <name>Global</name>
                    </scope>
                    <clientHandle></clientHandle>
                    <extendedAttributes>
                      <extendedAttribute>
                        <name>isReadOnly</name>
                        <value>true</value>
                      </extendedAttribute>
                      <extendedAttribute>
                        <name>isHidden</name>
                        <value>true</value>
                      </extendedAttribute>
                      <extendedAttribute>
                        <name>facadeHidden</name>
                        <value>true</value>
                      </extendedAttribute>
                    </extendedAttributes>
                    <isUniversal>false</isUniversal>
                    <universalRevision>0</universalRevision>
                    <inheritanceAllowed>false</inheritanceAllowed>
                    <value>FF:FF:FF:FF:FF:FF</value>
                  </macset>
                </list>
/2.0/services/taskservice/job:
  displayName: taskFramework
  description: |
    Working with the Task Framework
    ======
    Working with filtering criteria and paging information for jobs on the task
    framework
  get:
    displayName: taskFrameworkCriteria
    description: Query job instances by criterion
    queryParameters:
      startIndex:
        displayName: startIndex
        description: !include documentation/reuse/startindex
        default: 0
        required: false
        type: integer
      pageSize:
        displayName: pageSize
        description: !include documentation/reuse/pagesize
        default: 10
        required: false
        type: integer
      sortBy:
        displayName: sortBy
        description: Always sorted by "startTime"
        required: false
      sortOrderAscending:
        displayName: sortOrderAscending
        description: Sort in ascending order of start time (true/false)
        required: false
        type: boolean
  /{jobId}:
    displayName: taskFrameworkJobs
    description: Job instances on the task framework
    uriParameters:
      jobId:
        required: true
        displayName: jobId
        description: Specified job Id
    get:
      displayName: taskFrameworkJobsRead
      description: Retrieve all job instances for the specified job ID
/2.0/endpointsecurity:
  displayName: guestIntrospection
  description: |
    Working with Guest Introspection and Third-party Endpoint Protection (Anti-virus) Solutions
    ============

    About Guest Introspection and Endpoint Protection Solutions
    ----------
    VMware's Guest Introspection Service enables vendors to deliver an introspection-based, endpoint protection (anti-virus) solution
    that uses the hypervisor to scan guest virtual machines from the outside, with only a thin agent on each guest virtual machine.

    Version Compatibility
    -----------

    **Note:** The management APIs listed in this section are to be used only with partner endpoint protection solutions
    that were developed with EPSec Partner Program 3.0 or earlier (for vShield 5.5 or earlier).
    These partner solutions are also supported on NSX 6.0 and need the APIs listed below.
    These APIs should not be used with partner solutions developed specifically for NSX 6.0 or later, as
    these newer solutions automate the registration and deployment process by using the new features introduced in NSX.
    Using these with newer NSX 6.0 based solutions could result in loss of features.

    Register a Solution
    ----------

    To register a third-party solution with Guest Introspection, clients can use four REST calls to do the following:
    1. Register the vendor.
    2. Register one or more solutions.
    3. Set the solution IP address and port (for all hosts).
    4. Activate registered solutions per host.

    **Note:** Steps 1 through 3 need to be performed once per solution. Step 4 needs to be performed for each host.

    Unregister a Solution
    ----------

    To unregister a solution, clients perform these steps in reverse:
    1. Deactivate solutions per host.
    2. Unset a solution’s IP address and port.
    3. Unregister solutions.
    4. Unregister the vendor.

    Updating Registration Information
    -----------

    To update registration information for a vendor or solution, clients must:
    1. Unregister the vendor or solution.
    2. Reregister the vendor or solution.
  /registration:
    displayName: guestIntrospectionRegistration
    description: Register a Vendor and Solution with Guest Introspection

    post:
      displayName: guestIntrospectionVendorCreate
      description: |
        Register the vendor of an endpoint protection solution. Specify the following parameters in the request.

        | Name            | Comments |
        |-----------------|------------|
        |**vendorId**     | VMware-assigned ID for the vendor. |
        |**vendorTitle**  | Vendor-specified title. |
        |**vendorDescription** | Vendor-specified description. |
      body:
        application/xml:
          example: |
            <VendorInfo>
              <id>vendorId</id>
              <title>vendorTitle</title>
              <description>vendorDescription</description>
            </VendorInfo>
          schema: vShieldVendorCreate
    /vendors:
      displayName: guestIntrospectionVendorsInfo
      description: Registered Guest Introspection vendors
      get:
        displayName: vShieldVendorsInfoRead
        description: Retrieve the list of all registered Guest Introspection vendors.
    /{vendorID}:
      displayName: guestIntrospectionSolution
      description: Guest Introspection vendors and endpoint protection solutions
      uriParameters:
        vendorID:
          displayName: vendorID
          description: VMware-assigned ID for the vendor.
          required: true
      post:
        displayName: guestIntrospectionSolutionCreate
        description: |
          Register an endpoint protection solution. Specify the following parameters in the request.

          | Name            | Comments |
          |-----------------|------------|
          |**solutionAltitude**     | VMware-assigned altitude for the solution. *Altitude* is a number that VMware assigns to uniquely identify the solution. The altitude describes the type of solution and the order in which the solution receives events relative to other solutions on the same host. |
          |**solutionTitle**  | Vendor-specified title for the solution. |
          |**solutionDescription** | Vendor-specified description of the solution. |
        body:
          application/xml:
            example: |
              <SolutionInfo>
                <altitude>solutionAltitude</altitude>
                <title>solutionTitle</title>
                <description>solutionDescription</description>
              </SolutionInfo>
            schema: vShieldSolutionCreate
      get:
        displayName: guestIntrospectionVendorInfoRead
        description: Retrieve registration information for a Guest Introspection vendor.
      delete:
        displayName: guestIntrospectionVendorDelete
        description: Unregister a Guest Introspection vendor.
      /solutions:
        displayName: guestIntrospectionSolutionsInfo
        description: |
          Information about registered endpoint protection solutions
        get:
          displayName: guestIntrospectionSolutionsInfoRead
          description: |
            Get registration information for all endpoint protection solutions for a Guest Introspection vendor.
      /{altitude}:
        displayName: guestIntrospectionSolutionInfo
        description: Endpoint protection solution registration information
        uriParameters:
          altitude:
            displayName: altitude
            description: |
              VMware-assigned number that uniquely identifies a solution. Describes
              the type of solution and the order in which the solution receives
              events relative to other solutions on the same host.
        get:
          displayName: guestIntrospectionSolutionInfoRead
          description: Get registration information for an endpoint protection solution.
        delete:
          displayName: guestIntrospectionSolutionDelete
          description: Unregister an endpoint protection solution.
        /location:
          displayName: guestIntrospectionSolutionIPPort
          description: |
                       IP address and port for an endpoint protection solution.

                       To change the location of an endpoint protection solution:
                       1. Deactivate all security virtual machines.
                       2. Change the location.
                       3. Reactivate all security virtual machines.
          post:
            displayName: guestIntrospectionSolutionIPPortSet
            description: Set the IP address and port on the vNIC host for an endpoint protection solution.
            body:
              application/xml:
                example: |
                  <LocationInfo>
                    <ip>solutionIpAddress</ip>
                    <port>solutionIPPort</port>
                  </LocationInfo>
                schema: solutionIPPortSet
          get:
            displayName: guestIntrospectionSolutionIPPortGet
            description: Get the IP address and port on the vNIC host for an endpoint protection solution.
          delete:
            displayName: guestIntrospectionSolutionIPPortDelete
            description: Unset the IP address and port for an endpoint protection solution.
  /activation:
    displayName: guestIntrospectionSolutionActivation
    description: Activate an Endpoint Protection Solution.
    get:
      displayName: guestIntrospectionSolutionActivationRead
      description: |
        Retrieve activation information for all activated security VMs on the specified host.
      queryParameters:
        hostId:
          required: true
          displayName: hostId
          description: Host ID associated with activated security VMs.
      responses:
        200:
          body:
            application/xml:
              example: |
                <ActivatedSVMs>
                  <ActivationInfo>
                    <moid>vm-819</moid>
                    <hostMoid>host-9</hostMoid>
                    <vmName>VMWARE-Data Security-10.24.130.174</vmName>
                    <hostName>10.24.130.174</hostName>
                    <clusterName>Dev</clusterName>
                    <dcName>dev</dcName>
                    <vendorId>VMWARE</vendorId>
                    <solutionId>6341068275337723904</solutionId>
                  </ActivationInfo>
                  ...
                </ActivatedSVMs>
    /{vendorID}/{solutionID}:
      displayName: guestIntrospectionSolutionActivatedVMs
      description: Activated security virtual machines
      uriParameters:
        vendorID:
          displayName: vendorID
          description: VMware-assigned ID for the vendor.
          required: true
        solutionID:
          displayName: solutionID
          description: solution ID for the endpoint protection solution.
          required: true
      get:
        displayName: guestIntrospectionSolutionActivatedVMsRead
        description: |
          Retrieve a list of activated security VMs for an endpoint protection solution.
        responses:
          200:
            body:
              application/xml:
                example: |
                  <ActivatedSVMs>
                    <ActivationInfo>
                      <moid>vm-819</moid>
                      <hostMoid>host-9</hostMoid>
                      <vmName>VMWARE-Data Security-10.24.130.174</vmName>
                      <hostName>10.24.130.174</hostName>
                      <clusterName>Dev</clusterName>
                      <dcName>dev</dcName>
                      <vendorId>VMWARE</vendorId>
                      <solutionId>6341068275337723904</solutionId>
                    </ActivationInfo>
                    ...
                  </ActivatedSVMs>
    /{vendorID}/{altitude}:
      displayName: guestIntrospectionSolutionActivate
      description: Activate a registered endpoint protection solution.
      uriParameters:
        vendorID:
          displayName: vendorID
          description: VMware-assigned ID for the vendor.
          required: true
        altitude:
          displayName: altitude
          description: |
            VMware-assigned number to uniquely identify a solution. Describes the
            type of solution and the order in which the solution receives events
            relative to other solutions on the same host.
      post:
        displayName: guestIntrospectionSolutionActivate
        description: |
          Activate an endpoint protection solution that has been registered and located. Specify the following parameter in the request body.

          | Name            | Comments |
          |-----------------|------------|
          |**svmMoid**     | Managed object ID of the virtual machine of the activated endpoint protection solution. |
        body:
          application/xml:
            example: |
              <ActivationInfo>
                <moid>svmMoid</moid>
              </ActivationInfo>
            schema: vShieldSolutionActivate
      /{moid}:
        displayName: guestIntrospectionSolutionStatus
        description: Get the activation status or deactivate an endpoint protection solution on a host.
        uriParameters:
          moid:
            required: true
            displayName: moid
            description: Managed object reference of a VM.
        get:
         displayName: guestIntrospectionSolutionActivationStatusRead
         description: Retrieve the endpoint protection solution activation status, either true (activated) or false (not activated).
        delete:
          displayName: guestIntrospectionSolutionDeactivate
          description: Deactivate an endpoint protection solution on a host.
/4.0/firewall:
  displayName: dfw
  description: |
    Working with Distributed Firewall
    =================================
  /globalroot-0/config:
    displayName: dfwConfig
    description: |
      Distributed firewall rules configuration
      ___
      The following table lists the elements that can be used in firewall
      rules.
      ___
      | Element | Keyword for API | Used in |
      |---|---|---|
      | All Edges | ALL_EDGES | appliedTo |
      | application | Application | service |
      | application group | ApplicationGroup | service |
      | cluster | compute resource | ClusterComputeResource<br>appliedTo |
      | datacenter | Datacenter | source/destination<br>appliedTo |
      | distributed firewall | DISTRIBUTED_FIREWALL | appliedTo |
      | distributed virtual port group | DistributedVirtualPortgroup | source/destination<br>appliedTo |
      | Edge ID | Edge | appliedTo |
      | global root | GlobalRoot | source/destination |
      | host | HostSystem | appliedTo |
      | IP set | IPSet | source/destination |
      | IPv4 addresses | Ipv4Address | source/destination |
      | IPv6 addresses | Ipv6Address | source/destination |
      | logical switch | VirtualWire | source/destination<br>appliedTo |
      | MAC set | MACSet | source/destination |
      | network | Network | for legacy portgroups, network can be used in source or destination instead of appliedTo |
      | profile | ALL_PROFILE_BINDINGS | |
      | resource pool | ResourcePool | source/destination |
      | security group | SecurityGroup | source/destination |
      | virtual app | VirtualApp | source/destination |
      | virtual machine | VirtualMachine | source/destination<br>appliedTo |
      | vNIC | Vnic | source/destination<br>appliedTo |
    get:
      displayName: dfwConfigShow
      description: |
        Retrieve distributed firewall rule configuration.
        ___
        If no query parameters are used, all rule configuration is retrieved.
        Use the query parameters to filter the rule configuration information.
      body:
        application/xml:
          example: |
            <firewallConfiguration timestamp="1360144793284">
              <contextId>globalroot-0</contextId>
              <layer3Sections>
                <section id="2" name="defaultSectionLayer3" generationNumber="1360144793284" timestamp="1360144793284">
                  <rule id="2" disabled="false" logged="false">
                    <name>Default Rule</name>
                    <action>DENY</action>
                    <appliedToList>
                      <appliedTo>
                        <name>DISTRIBUTED_FIREWALL</name>
                        <value>DISTRIBUTED_FIREWALL</value>
                        <type>DISTRIBUTED_FIREWALL</type>
                        <isValid>true</isValid>
                      </appliedTo>
                    </appliedToList>
                    <sectionId>2</sectionId>
                  </rule>
                </section>
              </layer3Sections>
              <layer2Sections>
                <section id="1" name="defaultSectionLayer2" generationNumber="1360144793284" timestamp="1360144793284">
                  <rule id="1" disabled="false" logged="false">
                    <name>Default Rule</name>
                    <action>ALLOW</action>
                    <appliedToList>
                      <appliedTo>
                        <name>DISTRIBUTED_FIREWALL</name>
                        <value>DISTRIBUTED_FIREWALL</value>
                        <type>DISTRIBUTED_FIREWALL</type>
                        <isValid>true</isValid>
                      </appliedTo>
                    </appliedToList>
                    <sectionId>1</sectionId>
                  </rule>
                </section>
              </layer2Sections>
            </firewallConfiguration>
      queryParameters:
        ruleType:
          required: false
          displayName: ruleType
          description: |
            **ruleType** can be *LAYER3*, *LAYER2*, *L3REDIRECT*. **ruleType**
            is mandatory if other query parameters are sent.
            **Note:** Filtering is not supported for layer 2 rules, so
            specifying *LAYER2* will return all rule types.
        source:
          required: false
          displayName: source
          description: |
            **source** can contain IPv4/v6 address or vm-id
        destination:
          required: false
          displayName: destination
          description: |
            **destination** can contain IPv4/v6 address or vm-id
        ruleId:
          required: false
          displayName: ruleId
          description: |
            filter by **ruleId**
        comment:
          required: false
          displayName: comment
          description: |
            **comment** can contain any portion of the comment entered for the
            rules. Search is case insensitive.
        name:
          required: false
          displayName: name
          description: |
            **name** can contain any portion of the rule name entered for the rules.
            Search is case insensitive.
        siProfile:
          required: false
          displayName: siProfile
          description: |
            **siProfile** can contain any portion of the service profile name
            associated with L3 redirect rule. Search is case insensitive.
        edgeId:
          required: false
          displayName: edgeId
          description: |
            Filter for rules applicable to the Edge specified by **edgeId**.
        action:
          required: false
          displayName: action
          description: |
            Filter for specific **action** (*allow*, *deny*)
    put:
      displayName: dfwConfigUpdate
      description: !include documentation/reuse/firewall/dfwConfigUpdate
      headers:
        If-Match:
          required: true
          displayName: If-Match
          description: !include documentation/reuse/firewall/if-match
      body:
        application/xml:
          example: |
            <firewallConfiguration timestamp="1359979620727">
              <contextId>globalroot-0</contextId>
              <layer3Sections>
                <section id="2" name="defaultSectionLayer3" generationNumber="1359979620727" timestamp="1359979620727">
                  <rule disabled="false" logged="true">
                    <name>okn-1</name>
                    <action>ALLOW</action>
                    <sources excluded="false">
                      <source>
                        <value>datacenter-57</value>
                        <type>Datacenter</type>
                      </source>
                      <source>
                        <value>domain-c62</value>
                        <type>ClusterComputeResource</type>
                      </source>
                      <source>
                        <value>10.112.1.1</value>
                        <type>Ipv4Address</type>
                      </source>
                    </sources>
                    <services>
                      <service>
                        <destinationPort>80</destinationPort>
                        <protocol>6</protocol>
                        <subProtocol>6</subProtocol>
                      </service>
                      <service>
                        <value>application-161</value>
                        <type>Application</type>
                      </service>
                    </services>
                    <appliedToList>
                      <appliedTo>
                        <value>5013bcd8-c666-1e28-c7a9-600da945954f.000</value>
                        <type>Vnic</type>
                      </appliedTo>
                      <appliedTo>
                        <value>vm-126</value>
                        <type>VirtualMachine</type>
                      </appliedTo>
                    </appliedToList>
                  </rule>
                  <rule disabled="true" logged="true">
                    <name>Matru-1</name>
                    <action>ALLOW</action>
                    <sectionId>2</sectionId>
                  </rule>
                  <rule disabled="true" logged="true">
                    <name>Matru-2</name>
                    <action>ALLOW</action>
                    <sectionId>2</sectionId>
                  </rule>
                  <rule disabled="true" logged="true">
                    <name>Matru-3</name>
                    <action>ALLOW</action>
                    <sectionId>2</sectionId>
                  </rule>
                  <rule id="2" disabled="true" logged="false">
                    <name>Default Rule</name>
                    <action>DENY</action>
                    <sectionId>2</sectionId>
                  </rule>
                </section>
              </layer3Sections>
              <layer2Sections>
                <section id="1" name="defaultSectionLayer2" generationNumber="1359979620727" timestamp="1359979620727">
                  <rule id="1" disabled="false" logged="false">
                    <name>Default Rule</name>
                    <action>ALLOW</action>
                    <sectionId>1</sectionId>
                  </rule>
                </section>
              </layer2Sections>
            </firewallConfiguration>
    delete:
      displayName: dfwConfigDelete
      description: |
        Restore default configuration.
        ___
        Restores a configuration with one defaultLayer3 section with default
        allow rule and one defaultLayer2Section with default allow rule.
    /layer3sections:
      displayName: dfwL3Section
      description: !include documentation/reuse/firewall/dfwL3Section
      get:
        displayName: dfwL3SectionRead
        description: |
          Retrieve rules from the layer 3 section specified by section
          **name**.
        queryParameters:
          name:
            required: true
            displayName: name
            description: Name of the section to retrieve.
        responses:
          200:
            body:
              application/xml:
                example: |
                  <section id="4" name="TestSection" generationNumber="1360149234572" timestamp="1360149234572">
                    <rule id="16" disabled="false" logged="true">
                      <name>okn-2</name>
                      <action>ALLOW</action>
                      <appliedToList>
                        <appliedTo>
                          <name>vm1 - Network adapter 1</name>
                          <value>5013bcd8-c666-1e28-c7a9-600da945954f.000</value>
                          <type>Vnic</type>
                          <isValid>true</isValid>
                        </appliedTo>
                        <appliedTo>
                          <name>Small XP-2</name>
                          <value>vm-126</value>
                          <type>VirtualMachine</type>
                          <isValid>true</isValid>
                        </appliedTo>
                      </appliedToList>
                      <sectionId>4</sectionId>
                      <sources excluded="false">
                        <source>
                          <name>5.1 ESX</name>
                          <value>datacenter-57</value>
                          <type>Datacenter</type>
                          <isValid>true</isValid>
                        </source>
                        <source>
                          <name>5.1</name>
                          <value>domain-c62</value>
                          <type>ClusterComputeResource</type>
                          <isValid>true</isValid>
                        </source>
                        <source>
                          <value>10.112.1.1</value>
                          <type>Ipv4Address</type>
                          <isValid>true</isValid>
                        </source>
                      </sources>
                      <services>
                        <service>
                          <destinationPort>80</destinationPort>
                          <protocol>6</protocol>
                          <subProtocol>6</subProtocol>
                        </service>
                        <service>
                          <name>VMware-VDM2.x-Ephemeral</name>
                          <value>application-161</value>
                          <isValid>true</isValid>
                        </service>
                      </services>
                      <appliedToList>
                        <appliedTo>
                          <name>DISTRIBUTED_FIREWALL</name>
                          <value>DISTRIBUTED_FIREWALL</value>
                          <type>DISTRIBUTED_FIREWALL</type>
                          <isValid>true</isValid>
                        </appliedTo>
                      </appliedToList>
                    </rule>
                    <rule id="15" disabled="true" logged="true">
                      <name>Matru-3</name>
                      <action>ALLOW</action>
                      <appliedToList>
                        <appliedTo>
                          <name>DISTRIBUTED_FIREWALL</name>
                          <value>DISTRIBUTED_FIREWALL</value>
                          <type>DISTRIBUTED_FIREWALL</type>
                          <isValid>true</isValid>
                        </appliedTo>
                      </appliedToList>
                      <sectionId>4</sectionId>
                    </rule>
                    <rule id="14" disabled="true" logged="true">
                      <name>test-3</name>
                      <action>ALLOW</action>
                      <appliedToList>
                        <appliedTo>
                          <name>DISTRIBUTED_FIREWALL</name>
                          <value>DISTRIBUTED_FIREWALL</value>
                          <type>DISTRIBUTED_FIREWALL</type>
                          <isValid>true</isValid>
                        </appliedTo>
                      </appliedToList>
                      <sectionId>4</sectionId>
                    </rule>
                    <rule id="13" disabled="true" logged="true">
                      <name>test-2</name>
                      <action>ALLOW</action>
                      <appliedToList>
                        <appliedTo>
                          <name>DISTRIBUTED_FIREWALL</name>
                          <value>DISTRIBUTED_FIREWALL</value>
                          <type>DISTRIBUTED_FIREWALL</type>
                          <isValid>true</isValid>
                        </appliedTo>
                      </appliedToList>
                      <sectionId>4</sectionId>
                    </rule>
                    <rule id="12" disabled="true" logged="false">
                      <name>test-1</name>
                      <action>DENY</action>
                      <appliedToList>
                        <appliedTo>
                          <name>DISTRIBUTED_FIREWALL</name>
                          <value>DISTRIBUTED_FIREWALL</value>
                          <type>DISTRIBUTED_FIREWALL</type>
                          <isValid>true</isValid>
                        </appliedTo>
                      </appliedToList>
                      <sectionId>4</sectionId>
                    </rule>
                  </section>
      post:
        # updated in 6.2.2 to allow positional insertion of section
        # with operation and anchorId query parameters
        displayName: dfwL3SectionCreate
        description: |
          Create a layer 3 distributed firewall section.
          ___
          By default, the section is created at the top of the firewall table.
          You can specify a location for the section with the **operation**
          and **anchorId** query parameters.
        queryParameters:
          operation: !include documentation/reuse/firewall/operation.raml
          anchorId: !include documentation/reuse/firewall/anchorId.raml
        body:
          application/xml:
            example: |
              <section name="TestSection">
                <rule disabled="false" logged="true">
                  <name>okn-2</name>
                  <action>ALLOW</action>
                  <appliedToList>
                    <appliedTo>
                      <name>vm1 - Network adapter 1</name>
                      <value>5013bcd8-c666-1e28-c7a9-600da945954f.000</value>
                      <type>Vnic</type>
                      <isValid>true</isValid>
                    </appliedTo>
                    <appliedTo>
                      <name>Small XP-2</name>
                      <value>vm-126</value>
                      <type>VirtualMachine</type>
                      <isValid>true</isValid>
                    </appliedTo>
                  </appliedToList>
                  <sources excluded="false">
                    <source>
                      <name>5.1 ESX</name>
                      <value>datacenter-57</value>
                      <type>Datacenter</type>
                      <isValid>true</isValid>
                    </source>
                    <source>
                      <name>5.1</name>
                      <value>domain-c62</value>
                      <type>ClusterComputeResource</type>
                      <isValid>true</isValid>
                    </source>
                    <source>
                      <value>10.112.1.1</value>
                      <type>Ipv4Address</type>
                      <isValid>true</isValid>
                    </source>
                  </sources>
                  <services>
                    <service>
                      <destinationPort>80</destinationPort>
                      <protocol>6</protocol>
                      <subProtocol>6</subProtocol>
                    </service>
                    <service>
                      <name>VMware-VDM2.x-Ephemeral</name>
                      <value>application-161</value>
                      <isValid>true</isValid>
                    </service>
                  </services>
                </rule>
                <rule disabled="true" logged="true">
                  <name>Matru-3</name>
                  <action>ALLOW</action>
                </rule>
                <rule disabled="true" logged="true">
                  <name>test-3</name>
                  <action>ALLOW</action>
                </rule>
                <rule disabled="true" logged="true">
                  <name>test-2</name>
                  <action>ALLOW</action>
                </rule>
                <rule disabled="true" logged="false">
                  <name>test-1</name>
                  <action>DENY</action>
                </rule>
              </section>
            schema: dfwSection
      /{sectionId}:
        displayName: dfwL3SectionId
        description: |
          Working with a specific layer 3 distributed firewall section.
        uriParameters:
          sectionId:
            required: true
            displayName: sectionId
            description: The ID of the section to modify.
        get:
          displayName: dfwL3SectionIdRead
          description: Retrieve information about the specified layer 3 section.
          responses:
            200:
              body:
                application/xml:
                  example: |
                    <section id="4" name="TestSection" generationNumber="1360149234572" timestamp="1360149234572">
                      <rule id="16" disabled="false" logged="true">
                        <name>okn-2</name>
                        <action>ALLOW</action>
                        <appliedToList>
                          <appliedTo>
                            <name>vm1 - Network adapter 1</name>
                            <value>5013bcd8-c666-1e28-c7a9-600da945954f.000</value>
                            <type>Vnic</type>
                            <isValid>true</isValid>
                          </appliedTo>
                          <appliedTo>
                            <name>Small XP-2</name>
                            <value>vm-126</value>
                            <type>VirtualMachine</type>
                            <isValid>true</isValid>
                          </appliedTo>
                        </appliedToList>
                        <sectionId>4</sectionId>
                        <sources excluded="false">
                          <source>
                            <name>5.1 ESX</name>
                            <value>datacenter-57</value>
                            <type>Datacenter</type>
                            <isValid>true</isValid>
                          </source>
                          <source>
                            <name>5.1</name>
                            <value>domain-c62</value>
                            <type>ClusterComputeResource</type>
                            <isValid>true</isValid>
                          </source>
                          <source>
                            <value>10.112.1.1</value>
                            <type>Ipv4Address</type>
                            <isValid>true</isValid>
                          </source>
                        </sources>
                        <services>
                          <service>
                            <destinationPort>80</destinationPort>
                            <protocol>6</protocol>
                            <subProtocol>6</subProtocol>
                          </service>
                          <service>
                            <name>VMware-VDM2.x-Ephemeral</name>
                            <value>application-161</value>
                            <isValid>true</isValid>
                          </service>
                        </services>
                        <appliedToList>
                          <appliedTo>
                            <name>DISTRIBUTED_FIREWALL</name>
                            <value>DISTRIBUTED_FIREWALL</value>
                            <type>DISTRIBUTED_FIREWALL</type>
                            <isValid>true</isValid>
                          </appliedTo>
                        </appliedToList>
                      </rule>
                      <rule id="15" disabled="true" logged="true">
                        <name>Matru-3</name>
                        <action>ALLOW</action>
                        <appliedToList>
                          <appliedTo>
                            <name>DISTRIBUTED_FIREWALL</name>
                            <value>DISTRIBUTED_FIREWALL</value>
                            <type>DISTRIBUTED_FIREWALL</type>
                            <isValid>true</isValid>
                          </appliedTo>
                        </appliedToList>
                        <sectionId>4</sectionId>
                      </rule>
                      <rule id="14" disabled="true" logged="true">
                        <name>test-3</name>
                        <action>ALLOW</action>
                        <appliedToList>
                          <appliedTo>
                            <name>DISTRIBUTED_FIREWALL</name>
                            <value>DISTRIBUTED_FIREWALL</value>
                            <type>DISTRIBUTED_FIREWALL</type>
                            <isValid>true</isValid>
                          </appliedTo>
                        </appliedToList>
                        <sectionId>4</sectionId>
                      </rule>
                      <rule id="13" disabled="true" logged="true">
                        <name>test-2</name>
                        <action>ALLOW</action>
                        <appliedToList>
                          <appliedTo>
                            <name>DISTRIBUTED_FIREWALL</name>
                            <value>DISTRIBUTED_FIREWALL</value>
                            <type>DISTRIBUTED_FIREWALL</type>
                            <isValid>true</isValid>
                          </appliedTo>
                        </appliedToList>
                        <sectionId>4</sectionId>
                      </rule>
                      <rule id="12" disabled="true" logged="false">
                        <name>test-1</name>
                        <action>DENY</action>
                        <appliedToList>
                          <appliedTo>
                            <name>DISTRIBUTED_FIREWALL</name>
                            <value>DISTRIBUTED_FIREWALL</value>
                            <type>DISTRIBUTED_FIREWALL</type>
                            <isValid>true</isValid>
                          </appliedTo>
                        </appliedToList>
                        <sectionId>4</sectionId>
                      </rule>
                    </section>
        post:
          displayName: dfwL3SectionIdRevise
          description: Move the specified layer 3 section.
          headers:
            If-Match:
              required: true
              displayName: If-Match
              description: !include documentation/reuse/firewall/if-match
          queryParameters:
            action:
              displayName: action
              required: true
              description: |
                Set **action** to *revise* to change the position of the
                firewall rule section.
            operation: !include documentation/reuse/firewall/operation.raml
            anchorId: !include documentation/reuse/firewall/anchorId.raml
          body:
            application/xml:
              example: |
                <!-- POST /api/4.0/firewall/globalroot-0/config/layer3sections/1007?action=revise&operation=insert_before&anchorId=1006
                If-Match: 1477989118875 -->

                <section id="1007" name="Web Section" generationNumber="1477989118875" timestamp="1477989118875" type="LAYER3">
                  ...
                </section>
        put:
          displayName: dfwL3SectionIdUpdate
          description: !include documentation/reuse/firewall/dfwL3SectionIdUpdate
          headers:
            If-Match:
              required: true
              displayName: If-Match
              description: !include documentation/reuse/firewall/if-match
          body:
            application/xml:
              example: |
                <section id="4" name="TestSectionRenamed" generationNumber="1336034461743" timestamp="1360149234572">
                  <rule id="16" disabled="false" logged="false">
                    <name>okn-2</name>
                    <action>ALLOW</action>
                    <appliedToList>
                      <appliedTo>
                        <name>vm1 - Network adapter 1</name>
                        <value>5013bcd8-c666-1e28-c7a9-600da945954f.000</value>
                        <type>Vnic</type>
                        <isValid>true</isValid>
                      </appliedTo>
                      <appliedTo>
                        <name>Small XP-2</name>
                        <value>vm-126</value>
                        <type>VirtualMachine</type>
                        <isValid>true</isValid>
                      </appliedTo>
                    </appliedToList>
                    <sectionId>4</sectionId>
                    <sources excluded="false">
                      <source>
                        <name>5.1 ESX</name>
                        <value>datacenter-57</value>
                        <type>Datacenter</type>
                        <isValid>true</isValid>
                      </source>
                      <source>
                        <name>5.1</name>
                        <value>domain-c62</value>
                        <type>ClusterComputeResource</type>
                        <isValid>true</isValid>
                      </source>
                      <source>
                        <value>10.112.1.1</value>
                        <type>Ipv4Address</type>
                        <isValid>true</isValid>
                      </source>
                    </sources>
                    <services>
                      <service>
                        <destinationPort>80</destinationPort>
                        <protocol>6</protocol>
                        <subProtocol>6</subProtocol>
                      </service>
                      <service>
                        <name>VMware-VDM2.x-Ephemeral</name>
                        <value>application-161</value>
                        <isValid>true</isValid>
                      </service>
                    </services>
                  </rule>
                  <rule id="15" disabled="true" logged="true">
                    <name>Matru-3</name>
                    <action>DENY</action>
                    <sectionId>4</sectionId>
                  </rule>
                  <rule id="14" disabled="true" logged="true">
                    <name>test-3</name>
                    <action>ALLOW</action>
                    <sectionId>4</sectionId>
                  </rule>
                  <rule id="13" disabled="true" logged="true">
                    <name>test-2</name>
                    <action>ALLOW</action>
                    <sectionId>4</sectionId>
                  </rule>
                  <rule id="12" disabled="true" logged="false">
                    <name>test-1</name>
                    <action>DENY</action>
                    <sectionId>4</sectionId>
                  </rule>
                </section>
        delete:
          displayName: dfwL3SectionIdDelete
          description: Delete the specified layer 3 distributed firewall section.
        /rules:
          displayName: dfwL3Rules
          description: |
            Working with distributed firewall rules in a layer 3 section.
          post:
            displayName: dfwL3RulesAdd
            description: !include documentation/reuse/firewall/dfwL2RulesAdd
            headers:
              If-Match:
                required: true
                displayName: If-Match
                description: !include documentation/reuse/firewall/if-match
            body:
              application/xml:
                example: |
                  <rule disabled="false" logged="false">
                    <name>AddRuleTest</name>
                    <action>allow</action>
                    <notes></notes>
                    <appliedToList>
                      <appliedTo>
                        <value>datacenter-26</value>
                        <type>Datacenter</type>
                      </appliedTo>
                    </appliedToList>
                    <sectionId>2</sectionId>
                    <sources excluded="true">
                      <source>
                        <value>datacenter-26</value>
                        <type>Datacenter</type>
                      </source>
                    </sources>
                    <services>
                      <service>
                        <value>application-216</value>
                      </service>
                    </services>
                  </rule>
                schema: dfwRule
          /{ruleId}:
            displayName: dfwL3Rule
            description: |
              Operations on L3 rules in sections identified by section Id and
              Rule Id
            uriParameters:
              ruleId:
                required: true
                displayName: ruleId
                description: The ID of the rule beeing read, updated or deleted
            get:
              displayName: dfwL3RuleRead
              description: |
                Retrieve information about the specified distributed firewall rule.
            put:
              displayName: dfwL3RuleUpdate
              description: !include documentation/reuse/firewall/dfwL3RuleUpdate
              headers:
                If-Match:
                  required: true
                  displayName: If-Match
                  description: !include documentation/reuse/firewall/if-match
              body:
                application/xml:
                  example: |
                    <rule id="23" disabled="enabled" logged="true">
                      <name>AddRuleTestUpdated</name>
                      <action>allow</action>
                      <notes></notes>
                      <appliedToList>
                        <appliedTo>
                          <value>datacenter-26</value>
                          <type>Datacenter</type>
                        </appliedTo>
                      </appliedToList>
                      <sectionId>2</sectionId>
                      <sources excluded="true">
                        <source>
                          <value>datacenter-26</value>
                          <type>Datacenter</type>
                        </source>
                      </sources>
                      <services>
                        <service>
                          <value>application-216</value>
                        </service>
                      </services>
                    </rule>
            delete:
              displayName: dfwL3RuleDelete
              description: Delete the specified distributed firewall rule.
              headers:
                If-Match:
                  required: true
                  displayName: If-Match
                  description: !include documentation/reuse/firewall/if-match
    /layer2sections:
      displayName: dfwL2Section
      description: !include documentation/reuse/firewall/dfwL2Section
      get:
        displayName: dfwL2SectionRead
        description: |
          Retrieve rules from the layer 2 section specified by section
          **name**.
        queryParameters:
          name:
            required: false
            displayName: name
            description: Name of the Section to read
      post:
        # updated in 6.2.2 to allow positional insertion of section
        # with operation and anchorId query parameters
        displayName: dfwL2SectionCreate
        description: |
          Create a layer 2 distributed firewall section.
          ___
          By default, the section is created at the top of the firewall table.
          You can specify a location for the section with the **operation**
          and **anchorId** query parameters.
        queryParameters:
          operation: !include documentation/reuse/firewall/operation.raml
          anchorId: !include documentation/reuse/firewall/anchorId.raml
        body:
         application/xml:
           example: |
            <section name="" managedBy="" type="">
              <rule disabled="" logged="">
                <name></name>
                <action></action>
                <appliedToList>
                  <appliedTo>
                    <name></name>
                    <value></value>
                    <type></type>
                    <isValid></isValid>
                  </appliedTo>
                </appliedToList>
                <sources excluded="">
                  <source>
                    <name></name>
                    <value></value>
                    <type></type>
                    <isValid></isValid>
                  </source>
                </sources>
                <destinations excluded="">
                  <destination>
                    <name></name>
                    <value></value>
                    <type></type>
                    <isValid></isValid>
                  </destination>
                </destinations>
                <services>
                  <service>
                    <destinationPort></destinationPort>
                    <protocol></protocol>
                    <subProtocol></subProtocol>
                  </service>
                </services>
              </rule>
            </section>
           schema: dfwSection
      /{sectionId}:
        displayName: dfwL2SectionId
        description: |
          Working with a specific layer 2 distributed firewall section.
        uriParameters:
          sectionId:
            required: true
            displayName: sectionId
            description: The ID of the section to modify.
        get:
          displayName: dfwL2SectionIdRead
          description: Retrieve information about the specified layer 2 section.
        post:
          displayName: dfwL2SectionIdRevise
          description: Move the specified layer 2 section.
          headers:
            If-Match:
              required: true
              displayName: If-Match
              description: !include documentation/reuse/firewall/if-match
          queryParameters:
            action:
              displayName: action
              required: true
              description: |
                Set **action** to *revise* to change the position of the
                firewall rule section.
            operation: !include documentation/reuse/firewall/operation.raml
            anchorId: !include documentation/reuse/firewall/anchorId.raml
          body:
            application/xml:
              example: |
                <!-- POST /api/4.0/firewall/globalroot-0/config/layer2sections/1009?action=revise&operation=insert_before&anchorId=1008
                If-Match: 1478307787160 -->

                <section id="1009" name="Test Section" generationNumber="1478307787160" timestamp="1478307787160" type="LAYER2">
                  ...
                </section>
        put:
          displayName: dfwL2SectionIdUpdate
          description: !include documentation/reuse/firewall/dfwL2SectionIdUpdate
          headers:
            If-Match:
              required: true
              displayName: If-Match
              description: !include documentation/reuse/firewall/if-match
          body:
            application/xml:
              example: |
                <section id="" name="" generationNumber="" timestamp="">
                  <rule id="" disabled="" logged="">
                    <name></name>
                    <action></action>
                    <appliedToList>
                      <appliedTo>
                        <name></name>
                        <value></value>
                        <type></type>
                        <isValid></isValid>
                      </appliedTo>
                    </appliedToList>
                    <sectionId></sectionId>
                    <sources excluded="">
                      <source>
                        <name></name>
                        <value></value>
                        <type></type>
                        <isValid></isValid>
                      </source>
                    </sources>
                    <services>
                      <service>
                        <destinationPort></destinationPort>
                        <protocol></protocol>
                        <subProtocol></subProtocol>
                      </service>
                    </services>
                  </rule>
                </section>
        delete:
          displayName: dfwL2SectionIdDelete
          description: Deletes a L2 section and its content by ID
        /rules:
          displayName: dfwL2Rules
          description: |
            Working with distributed firewall rules in a layer 2 section.
          post:
            displayName: dfwL2RulesAdd
            description: !include documentation/reuse/firewall/dfwL2RulesAdd
            headers:
              If-Match:
                required: true
                displayName: If-Match
                description: !include documentation/reuse/firewall/if-match
            body:
              application/xml:
                example: |
                  <rule disabled="" logged="">
                    <name></name>
                    <action></action>
                    <notes></notes>
                    <appliedToList>
                      <appliedTo>
                        <value></value>
                        <type></type>
                      </appliedTo>
                    </appliedToList>
                    <sources excluded="">
                      <source>
                        <name></name>
                        <value></value>
                        <type></type>
                        <isValid></isValid>
                      </source>
                    </sources>
                    <destinations excluded="">
                      <destination>
                        <name></name>
                        <value></value>
                        <type></type>
                        <isValid></isValid>
                      </destination>
                    </destinations>
                    <services>
                      <service>
                        <value></value>
                      </service>
                    </services>
                  </rule>
                schema: dfwRule
          /{ruleId}:
            displayName: dfwL2Rule
            description: |
              Operations on L2 rules in sections identified by section Id and
              Rule Id
            uriParameters:
              ruleId:
                required: true
                displayName: ruleId
                description: The ID of the rule beeing read, updated or deleted
            get:
              displayName: dfwL2RuleRead
              description: |
                Read the configuration of a specific rule identified by rule Id
            put:
              displayName: dfwL2RuleUpdate
              description: !include documentation/reuse/firewall/dfwL2RuleUpdate
              headers:
                If-Match:
                  required: true
                  displayName: If-Match
                  description: !include documentation/reuse/firewall/if-match
              body:
                application/xml:
                  example: |
                    <rule id="" disabled="" logged="">
                      <name></name>
                      <action></action>
                      <notes></notes>
                      <sources excluded="">
                        <source>
                          <value></value>
                          <type></type>
                          <isValid></isValid>
                        </source>
                      </sources>
                      <destinations excluded="">
                        <destination>
                          <name></name>
                          <value></value>
                          <type></type>
                          <isValid></isValid>
                        </destination>
                      </destinations>
                      <services>
                        <service>
                          <name></name>
                          <value></value>
                          <type></type>
                          <isValid></isValid>
                        </service>
                      </services>
                      <appliedToList>
                        <appliedTo>
                          <name></name>
                          <value></value>
                          <type></type>
                          <isValid></isValid>
                        </appliedTo>
                      </appliedToList>
                    </rule>
            delete:
              displayName: dfwL2RuleDelete
              description: Delete the specified distributed firewall rule.
              headers:
                If-Match:
                  required: true
                  displayName: If-Match
                  description: !include documentation/reuse/firewall/if-match
    /layer3redirectsections:
      displayName: layer3RedirectSections
      description: Layer3 redirect sections and rules
      post:
        displayName: layer3RedirectSectionsCreate
        description: Add L3 redirect section
        body:
          application/xml:
            example: |
              <section>
                <name></name>
                <action></action>
                <appliedToList>
                  <appliedTo>
                    <name></name>
                    <value></value>
                    <type></type>
                    <isValid></isValid>
                  </appliedTo>
                </appliedToList>
                <sectionId></sectionId>
              </section>
            schema: layer3RedirectSectionsCreate
      /{section}:
        displayName: section
        description: Layer3 redirect section
        uriParameters:
          section:
            required: true
            displayName: section
            description: Specify section by ID or name
        get:
          displayName: sectionRead
          description: Get L3 redirect section configuration
        put:
          displayName: sectionUpdate
          description: |
            Modify L3 Redirect section. You will need to get the Etag value out
            of the GET first. Then pass the modified version of the whole
            redirect section configuration in the GET body
          headers:
            If-Match:
              required: true
              displayName: If-Match
              description: !include documentation/reuse/firewall/if-match
          body:
            application/xml:
              example: |
                <section id="" name="" generationNumber="" timestamp="">
                  <rule id="" disabled="" logged="">
                    <name></name>
                    <action></action>
                    <appliedToList>
                      <appliedTo>
                        <name></name>
                        <value></value>
                        <type></type>
                        <isValid></isValid>
                      </appliedTo>
                    </appliedToList>
                    <sectionId></sectionId>
                  </rule>
                </section>
              schema: layer3RedirectSectionUpdate
        delete:
          displayName: sectionDelete
          description: Delete specified L3 redirect section
        /rules:
          displayName: rules
          description: L3 redirect rules for specified section
          post:
            displayName: rulesCreate
            description: Add L3 redirect rule
            body:
              application/xml:
                example: |
                  <section id="" name="" generationNumber="" timestamp="">
                    <name></name>
                    <action></action>
                    <appliedToList>
                      <appliedTo>
                        <name></name>
                        <value></value>
                        <type></type>
                        <isValid></isValid>
                      </appliedTo>
                    </appliedToList>
                    <sectionId></sectionId>
                  </section>
                schema: rulesCreate
          /{ruleID}:
            displayName: rule
            description: Rule for specified section
            uriParameters:
              ruleID:
                displayName: ruleID
                required: true
                description: Specified redirect rule
            get:
              displayName: ruleRead
              description: Get L3 redirect rule
            put:
              displayName: ruleUpdate
              description: |
                Modify L3 redirect rule. You will need Etag value from the
                response header of GET call. Then, pass Etag value as the
                if-match header in PUT call
              headers:
                If-Match:
                  required: true
                  displayName: If-Match
                  description: !include documentation/reuse/firewall/if-match
              body:
                application/xml:
                  example: |
                    <rule id="" disabled="" logged="">
                      <name></name>
                      <action></action>
                      <appliedToList>
                        <appliedTo>
                          <name></name>
                          <value></value>
                          <type></type>
                          <isValid></isValid>
                        </appliedTo>
                      </appliedToList>
                    </rule>
                  schema: ruleUpdate
            delete:
              displayName: ruleDelete
              description: Delete specified L3 redirect rule
    /layer3redirect/profiles:
      displayName: serviceInsertionProfiles
      description: |
        Service Insertion profiles that can be applied to layer3 redirect rules
      get:
        displayName: serviceInsertionProfilesRead
        description: Retrieve the Service Insertion profiles
  /globalroot-0/state:
    displayName: dfwUpgrade
    description: |
      Enable distributed firewall after upgrade.
      ___
      After upgrading NSX Manager, controllers, and network virtualization
      components, check the status of distributed firewall. If it is ready to
      enable, you can enable distributed firewall.
      ___
      | State | Description |
      |-------|-------------|
      | backwardCompatible | This is the default state after an upgrade from vCloud Networking and Security to NSX, which means that vShield App is being used for protection instead of distributed firewall.|
      | backwardCompatibleReadyForSwitch | Once the clusters are prepared with NSX binaries, this state is enabled. You can enable distributed firewall only after firewall is in this state. |
      | switchingToForward | This is an intermediate state when you change firewall to distributed firewall. |
      | forward | This is the default state for green field deployments or after you have switched from vShield App to distributed firewall. |
      | switchFailed | This state is unlikely, but may be present if NSX Manager failed to switch to distributed firewall. |
    get:
      displayName: dfwUpgradeRead
      description: |
        Retrieve current state of firewall functioning after NSX upgrade.
    put:
      displayName: dfwUpgradeEnable
      description: Enable distributed firewall.
  /globalroot-0/status:
    displayName: dfwStatus
    description: |
      Working with Distributed Firewall Status
      ----
      Retrieve status of last publish action for each cluster in the NSX
      environment.

      The status output displays a generation number (**generationNumber**) for
      each rule set, which can be used to verify whether a change in rule sets
      has propagated to a host. In 6.2.4, a generation number for objects
      (**generationNumberObjects**) has been added to the status API. This allows
      you to verify whether a change in objects consumed in firewall rules has
      propagated to a host. Note that the object generation number may change
      frequently and will always be equal to or greater than the ruleset
      generation number.

      Starting in NSX 6.2.4, clusters (and hosts inside the cluster) are no
      longer included in the firewall status output if distributed firewall is
      disabled at the cluster level, or if the cluster is not prepared (NSX
      VIBs are not installed). In earlier versions of NSX these clusters and
      hosts are included in the output. However, because they are not
      configured for firewall, after a firewall rule publish their status is
      *inprogress*.
    get:
      displayName: dfwStatusRead
      description: |
        Get firewall configuration status

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.4 | Method updated. Parameter **generationNumberObjects** added. Clusters not configured for firewall are excluded from the status output.
      responses:
        200:
          body:
            application/xml:
              example: |
                <firewallStatus>
                  <startTime>1478235234617</startTime>
                  <status>published</status>
                  <generationNumber>1478235234617</generationNumber>
                  <generationNumberObjects>1478235234617</generationNumberObjects>
                  <clusterList>
                    <clusterStatus>
                      <clusterId>domain-c33</clusterId>
                      <status>published</status>
                      <generationNumber>1478235234617</generationNumber>
                      <generationNumberObjects>1478235234617</generationNumberObjects>
                      <hostStatusList>
                        <hostStatus>
                          <hostId>host-32</hostId>
                          <hostName>esx-02a.corp.local</hostName>
                          <status>published</status>
                          <errorCode>0</errorCode>
                          <startTime>1478235235421</startTime>
                          <endTime>1478235235429</endTime>
                          <generationNumber>1478235234617</generationNumber>
                          <clusterId>domain-c33</clusterId>
                          <generationNumberObjects>1478235234617</generationNumberObjects>
                        </hostStatus>
                        <hostStatus>
                          <hostId>host-28</hostId>
                          <hostName>esx-01a.corp.local</hostName>
                          <status>published</status>
                          <errorCode>0</errorCode>
                          <startTime>1478235235421</startTime>
                          <endTime>1478235235431</endTime>
                          <generationNumber>1478235234617</generationNumber>
                          <clusterId>domain-c33</clusterId>
                          <generationNumberObjects>1478235234617</generationNumberObjects>
                        </hostStatus>
                      </hostStatusList>
                    </clusterStatus>
                    <clusterStatus>
                      <clusterId>domain-c41</clusterId>
                      <status>published</status>
                      <generationNumber>1478235234617</generationNumber>
                      <generationNumberObjects>1478235234617</generationNumberObjects>
                      <hostStatusList>
                        <hostStatus>
                          <hostId>host-202</hostId>
                          <hostName>esxmgt-01a.corp.local</hostName>
                          <status>published</status>
                          <errorCode>0</errorCode>
                          <startTime>1478235235436</startTime>
                          <endTime>1478235235442</endTime>
                          <generationNumber>1478235234617</generationNumber>
                          <clusterId>domain-c41</clusterId>
                          <generationNumberObjects>1478235234617</generationNumberObjects>
                        </hostStatus>
                        <hostStatus>
                          <hostId>host-203</hostId>
                          <hostName>esxmgt-02a.corp.local</hostName>
                          <status>published</status>
                          <errorCode>0</errorCode>
                          <startTime>1478235235436</startTime>
                          <endTime>1478235235444</endTime>
                          <generationNumber>1478235234617</generationNumber>
                          <clusterId>domain-c41</clusterId>
                          <generationNumberObjects>1478235234617</generationNumberObjects>
                        </hostStatus>
                      </hostStatusList>
                    </clusterStatus>
                  </clusterList>
                </firewallStatus>
    /layer3sections/{sectionID}:
      displayName: L3SectionStatus
      description: |
        Working with Layer 3 Section Status
      uriParameters:
        sectionID:
          required: true
          displayName: sectionID
          description: Section ID
      get:
        displayName: L3SectionStatusRead
        description: |
          Retrieve status of the last publish action for the specified layer 3 section.

          **Method history:**

          Release | Modification
          --------|-------------
          6.2.4 | Method updated. Parameter **generationNumberObjects** added. Clusters not configured for firewall are excluded from the status output.
    /layer2sections/{sectionID}:
      displayName: L2SectionStatus
      description: L2 section status
      uriParameters:
        sectionID:
          required: true
          displayName: sectionID
          description: Section ID
      get:
        displayName: L2SectionStatusRead
        description: |
          Retrieve status of the last publish action for the specified layer 2 section.

          **Method history:**

          Release | Modification
          --------|-------------
          6.2.4 | Method updated. Parameter **generationNumberObjects** added. Clusters not configured for firewall are excluded from the status output.
  /globalroot-0/drafts:
    displayName: dfwDrafts
    description: Import and export firewall configurations
    post:
      displayName: dfwDraftsCreate
      description: Save a firewall configuration
      body:
        application/xml:
          example: |
            <firewallDraft name="">
              <description></description>
              <preserve></preserve>
              <mode></mode>
              <config>
                <contextId></contextId>
                <layer3Sections>
                  <section name="" >
                    <rule id="" disabled="true|false" logged="true|false">
                      <name></name>
                      <action></action>
                      <precedence></precedence>
                    </rule>
                  </section>
                </layer3Sections>
                <layer2Sections>
                  <section name="">
                    <rule id="" disabled="true|false" logged="true|false">
                      <name></name>
                      <action></action>
                      <precedence></precedence>
                    </rule>
                  </section>
                </layer2Sections>
              </config>
            </firewallDraft>
          schema: dfwDraftsCreate
    get:
      displayName: dfwSaveConfigRead
      description: Displays the draft IDs of all saved configurations
    /{draftID}:
      displayName: dfwDraft
      description: Specified saved firewall configuration
      uriParameters:
        draftID:
          required: true
          displayName: draftID
          description: Specified draft ID (retrieved through dfwDrafts GET call)
      get:
        displayName: dfwDraftRead
        description: Get a saved firewall configuration
      put:
        displayName: dfwDraftUpdate
        description: Update a saved firewall configuration
        body:
          application/xml:
            example: |
              <firewallDraft name="">
                <description></description>
                <preserve></preserve>
                <mode></mode>
                <config>
                  <contextId></contextId>
                  <layer3Sections>
                    <section name="" >
                      <rule id="" disabled="true|false" logged="true|false">
                        <name></name>
                        <action></action>
                        <precedence></precedence>
                      </rule>
                    </section>
                  </layer3Sections>
                  <layer2Sections>
                    <section name="">
                      <rule id="" disabled="true|false" logged="true|false">
                        <name></name>
                        <action></action>
                        <precedence></precedence>
                      </rule>
                    </section>
                  </layer2Sections>
                </config>
              </firewallDraft>
            schema: dfwDraftUpdate
      delete:
        displayName: dfwDraftDelete
        description: Delete a configuration
      /action/export:
        displayName: dfwConfigExport
        description: Export a configuration
        get:
          displayName: dfwConfigExportExecute
          description: Export a configuration
          queryParameters:
              getLatestForUniversal:
                displayName: getLatestForUniversal
                description: |
                  Set to "true" to export the lasted universal draft from a
                  secondary NSX manager.
                type: boolean
                required: false
      /action/import:
        displayName: dfwConfigImport
        description: Import a configuration
        post:
          displayName: dfwConfigImportExecute
          description: Import a configuration
          body:
            application/xml:
              example: |
                <firewallDraft id="" name="" timestamp="">
                  <description></description>
                  <preserve></preserve>
                  <user></user>
                  <mode></mode>
                  <config timestamp="">
                    <contextId></contextId>
                    <layer3Sections>
                      <section name="" timestamp="">
                        <rule id="" disabled="true|false" logged="true|false">
                          <name></name>
                          <action></action>
                          <precedence></precedence>
                        </rule>
                      </section>
                    </layer3Sections>
                    <layer2Sections>
                      <section name="" timestamp="">
                        <rule id="" disabled="true|false" logged="true|false">
                          <name></name>
                          <action></action>
                          <precedence></precedence>
                        </rule>
                      </section>
                    </layer2Sections>
                    <generationNumber></generationNumber>
                  </config>
                </firewallDraft>
              schema: dfwConfigImport
  /stats/eventthresholds:
    displayName: dfwThresholds
    description: |
      Configure memory, CPU, and connections per second (CPS) thresholds for
      distributed firewall.
      ___
      The firewall module generates system events when the memory and CPU
      usage crosses these thresholds.
    get:
      displayName: dfwThresholdsRead
      description: |
        Retrieve threshold configuration for distributed firewall.
      responses:
        200:
          body:
            application/xml:
              example: |
                <eventThresholds>
                  <cpu>
                    <percentValue>80</percentValue>
                  </cpu>
                  <memory>
                    <percentValue>90</percentValue>
                  </memory>
                  <connectionsPerSecond>
                    <value>250000</value>
                  </connectionsPerSecond>
                </eventThresholds>
    put:
      displayName: dfwThresholdsUpdate
      description: |
        Update threshold configuration for distributed firewall.
      body:
        application/xml:
          example: |
            <eventThresholds>
              <cpu>
                <percentValue>80</percentValue>
              </cpu>
              <memory>
                <percentValue>90</percentValue>
              </memory>
              <connectionsPerSecond>
                <value>250000</value>
              </connectionsPerSecond>
            </eventThresholds>
          schema: dfwThresholdsUpdate
  /config/globalconfiguration:
    displayName: dfwPerformance
    description: |
      Working with the Distributed Firewall Global Configuration
      ----------------------------------------------------------
      You can use the following parameters to improve firewall performancer:

      * **layer3RuleOptimize** and **layer2RuleOptimize** to turn
      on/off rule optimization.
      * **tcpStrictOption** determines whether or not to drop an established
      TCP connection when the firewall does not see the initial three-way
      handshake. If set to true, the connection will be dropped.
      * **autoDraftDisabled** improves performances when making large numbers
      of changes to firewall rules.

      You can disable the auto draft feature by setting **autoDraftDisabled** to
      true. Distributed Firewall saves up to 100 configurations, including
      manually saved drafts (**preserve** parameter can be set to true or
      false) and auto saved drafts (**preserve** parameter is set to false).
      Once 100 configurations are saved, older drafts with the **preserve**
      parameter set to false will be deleted in order to save new
      configurations. You might want to disable the auto drafts feature before
      making large numbers of changes to the firewall rules, to improve
      performance, and to prevent previously saved drafts from being
      overwritten.

      Note: The **autoDraftDisabled** parameter does not appear in a GET of the global
      configuration.
    get:
      displayName: dfwPerformanceRead
      description: Retrieve performance configuration for distributed firewall.
      responses:
        200:
          body:
            application/xml:
              example: |
                <globalConfiguration>
                  <layer3RuleOptimize>false</layer3RuleOptimize>
                  <layer2RuleOptimize>true</layer2RuleOptimize>
                  <tcpStrictOption>false</tcpStrictOption>
                </globalConfiguration>
    put:
    # changed in 6.2.3 - autoDraftDisabled parameter added
      displayName: dfwPerformanceUpdate
      description: |
        Update the distributed firewall performance configuration.
      body:
        application/xml:
          example: |
            <globalConfiguration>
              <layer3RuleOptimize>false</layer3RuleOptimize>
              <layer2RuleOptimize>true</layer2RuleOptimize>
              <tcpStrictOption>false</tcpStrictOption>
              <autoDraftDisabled>true</autoDraftDisabled>
            </globalConfiguration>
          schema: dfwPerformanceUpdate
  /forceSync/{ID}:
    displayName: dfwSync
    description: |
      Synchronize hosts and clusters with the last good configuration in NSX
      Mgr database
    uriParameters:
      ID:
        required: true
        displayName: ID
        description: Specified host or cluster to synchronize
    post:
      displayName: dfwSyncExecute
      description: Force sync host/cluster
  /{domainID}/enable/{truefalse}:
    displayName: dfwEnableDisable
    description: Enable or disable firewall components on a cluster
    uriParameters:
      domainID:
        required: true
        displayName: domainID
        description: Specified cluster
      truefalse:
        required: true
        displayName: truefalse
        description: Set parameter to true/false to enable/disable
    post:
      displayName: dfwEnableDisableToggle
      description: Enable or disable firewall components on a cluster
  /{contextId}/config/ipfix:
    displayName: dfwIPFix
    description: |
      Export specific flows directly from firewall to a flow collector
    uriParameters:
      contextId:
        displayName: contextId
        description: Specified context
    get:
      displayName: dfwIPFixRead
      description: Query IPFix configuration
    put:
      displayName: dfwIPFixUpdate
      description: Configure IPFix
      body:
        application/xml:
          example: |
            <ipfixConfiguration>
              <contextId></contextId>
              <ipfixEnabled></ipfixEnabled>
              <observationDomainId></observationDomainId>
              <flowTimeout></flowTimeout>
              <collector>
                <ip></ip>
                <port></port>
              </collector>
            </ipfixConfiguration>
          schema: dfwIPFixUpdate
    delete:
      displayName: dfwIPFixDelete
      description: |
        Deleting IPFix configuration resets the config to default values
/4.0/services/spoofguard/policies:
  displayName: spoofGuardPolicies
  description: |
    Working with SpoofGuard Policies
    ====================
  post:
    displayName: spoofGuardPoliciesCreate
    description: |
      Create a SpoofGuard policy to specify the operation mode for networks.
    body:
      application/xml:
        example: |
          <spoofguardPolicy>
            <name></name>
            <description></description>
            <operationMode></operationMode>
            <enforcementPoint>
              <id></id>
              <name></name>
              <type></type>
            </enforcementPoint>
            <allowLocalIPs></allowLocalIPs>
          </spoofguardPolicy>
        schema: spoofGuardPoliciesCreate
  get:
    displayName: spoofGuardPoliciesRead
    description: Retrieve all SpoofGuard policies
  /{policyID}:
    displayName: spoofGuardPolicy
    description: Specified policy
    post:
      displayName: spoofGuardPolicyApprove
      description: Use query parameters to perform operations on a policy
      queryParameters:
        action:
          required: true
          displayName: action
          description: |
            Set to "approve" along with specified IP addresses in body to
            approve them, or set to "publish" to publish the approved IP
            addresses
      body:
        application/xml:
          example: |
            <spoofguardList>
              <spoofguard>
                <id></id>
                <vnicUuid></vnicUuid>
                <approvedIpAddress>
                  <ipAddress></ipAddress>
                </approvedIpAddress>
                <approvedMacAddress></approvedMacAddress>
                <approvedBy></approvedBy>
                <approvedOn></approvedOn>
                <publishedIpAddress>
                  <ipAddress></ipAddress>
                </publishedIpAddress>
                <publishedMacAddress></publishedMacAddress>
                <publishedBy></publishedBy>
                <publishedOn></publishedOn>
              </spoofguard>
            </spoofguardList>
          schema: spoofGuardPolicyApprove
    get:
      displayName: spoofGuardPolicyRead
      description: |
        Retrieve policy information, or use the query parameters to perform
        operations
      queryParameters:
        list:
          displayName: list
          description: |
            Use to retrieve IP addresses for specified state
            (ACTIVE|INACTIVE|PUBLISHED|UNPUBLISHED|REVIEW_PENDING|DUPLICATE)
    put:
      displayName: spoofGuardPolicyUpdate
      description: Modify SpoofGuard policy
      body:
        application/xml:
          example: |
            <spoofguardPolicy>
              <policyId></policyId>
              <name></name>
              <description></description>
              <operationMode></operationMode>
              <enforcementPoint>
                <id></id>
                <name></name>
                <type></type>
              </enforcementPoint>
              <allowLocalIPs></allowLocalIPs>
            </spoofguardPolicy>
          schema: spoofGuardPolicyUpdate
    delete:
      displayName: spoofGuardPolicyDelete
      description: Delete a policy
/2.1/app/flow:
  displayName: flowMonitoring
  description: |
    Working with Flow Monitoring
    ========
  /flowstats:
    displayName: flowStats
    description: |
      Retrieve flow monitoring statistics information.
    get:
      displayName: flowStatsRead
      description: |
        Retrieve flow statistics for a datacenter, port group, VM, or vNIC
        ___
        Response values for flow statistics:
        * **blocked** - indicates whether traffic is blocked:
          * 0 - flow allowed
          * 1 - flow blocked
          * 2 - flow blocked by SpoofGuard
        * **protocol** - protocol in flow:
          * 0 - TCP
          * 1 - UDP
          * 2 - ICMP
        * **direction** - direction of flow:
          * 0 - to virtual machine
          * 1 - from virtual machine
        * **controlDirection** - control direction for dynamic TCP traffic:
          * 0 - source -> destination
          * 1 - destination -> source
      queryParameters:
        contextId:
          displayName: contextId
          description: |
            vCenter MOB ID of the datacenter, portgroup, vm, or UUID of the
            vNIC for which traffic flow is to be retrieved
        flowType:
          displayName: flowType
          description: |
            Type of flow to be retrieved. Possible values are:
            * *TCP_UDP*
            * *LAYER2*
            * *LAYER3*
        startTime:
          displayName: startTime
          description: |
            Flows with start time greater than specified time are retrieved.
        endTime:
          displayName: endTime
          description: |
            Flows with start time less than specified time are retrieved.
        startIndex:
          type: integer
          displayName: startIndex
          description: !include documentation/reuse/startindex
          required: false
          default: 0
        pageSize:
          type: integer
          displayName: pageSize
          description: !include documentation/reuse/pagesize-1024
          required: false
          default: 256
      body:
        application/xml:
          example: |
            <FlowStatsPage>
              <pagingInfo>
                <contextId>datacenter-2538</contextId>
                <flowType>TCP_UDP</flowType>
                <startTime>1327405883000</startTime>
                <endTime>1327482600000</endTime>
                <totalCount>817</totalCount>
                <startIndex>0</startIndex>
                <pageSize>2</pageSize>
              </pagingInfo>
              <flowStatsTcpUdp>
                <startTime>1327405883000</startTime>
                <endTime>1327446000000</endTime>
                <ruleId>1001</ruleId>
                <blocked>0</blocked>
                <protocol>5</protocol>
                <direction>1</direction>
                <sessions>1449</sessions>
                <sourcePackets>1449</sourcePackets>
                <destinationPackets>0</destinationPackets>
                <sourceBytes>227493</sourceBytes>
                <destinationBytes>0</destinationBytes>
                <networkId>network-2553</networkId>
                <sourceIp>10.112.199.174</sourceIp>
                <destinationIp>255.255.255.255</destinationIp>
                <destinationPort>17500</destinationPort>
                <controlProtocol></controlProtocol>
                <controlSourceIp>0.0.0.0</controlSourceIp>
                <controlDestinationIp>0.0.0.0</controlDestinationIp>
                <controlDestinationPort>0</controlDestinationPort>
                <controlDirection>0</controlDirection>
              </flowStatsTcpUdp>
              <flowStatsTcpUdp>
                <startTime>1327405883000</startTime>
                <endTime>1327446000000</endTime>
                <ruleId>1001</ruleId>
                <blocked>0</blocked>
                <protocol>5</protocol>
                <direction>1</direction>
                <sessions>69</sessions>
                <sourcePackets>69</sourcePackets>
                <destinationPackets>0</destinationPackets>
                <sourceBytes>17832</sourceBytes>
                <destinationBytes>0</destinationBytes>
                <networkId>network-2553</networkId>
                <sourceIp>10.112.199.13</sourceIp>
                <destinationIp>10.112.199.255</destinationIp>
                <destinationPort>138</destinationPort>
                <controlProtocol></controlProtocol>
                <controlSourceIp>0.0.0.0</controlSourceIp>
                <controlDestinationIp>0.0.0.0</controlDestinationIp>
                <controlDestinationPort>0</controlDestinationPort>
                <controlDirection>0</controlDirection>
              </flowStatsTcpUdp>
            </FlowStatsPage>
    /info:
      displayName: flowStatsInfo
      description: Working with flow monitoring meta-data.
      get:
        displayName: flowStatsInfoRead
        description: |
          Retrieve flow statistics meta-data.
          ___
          This method retrieves the following information for each flow type:
          * minimum start time
          * maximum end time
          * total flow count
        body:
         application/xml:
           example: |
              <FlowStatsInfo>
                <flowStatsInfoTcpUdp>
                  <minimumStartTime>1327405883000</minimumStartTime>
                  <maximumEndTime>1327482600000</maximumEndTime>
                  <totalCount>817</totalCount>
                </flowStatsInfoTcpUdp>
                <flowStatsInfoLayer3>
                  <minimumStartTime>1327405883000</minimumStartTime>
                  <maximumEndTime>1327482600000</maximumEndTime>
                  <totalCount>21</totalCount>
                </flowStatsInfoLayer3>
                <flowStatsInfoLayer2>
                <minimumStartTime>1327405883000</minimumStartTime>
                <maximumEndTime>1327482600000</maximumEndTime>
                <totalCount>531</totalCount>
                </flowStatsInfoLayer2>
              </FlowStatsInfo>
  /config:
    displayName: flowConfig
    description: |
      Working with flow monitoring configuration.
      ___
      Flow records generated on all hosts are sent to NSX Manager, which
      consumes the records and displays aggregated information.  Hosts can
      generate large numbers of flow records.  You can configure flow
      monitoring to exclude certain records from collection.  The flow
      configuration applies to all hosts.
      ___
      * **collectFlows** - if true, flow collection is enabled.
      * **ignoreBlockedFlows** - if true, ignore blocked flows.
      * **ignoreLayer2Flows** - if true, ignore layer 2 flows.
      * **sourceIPs** - source IPs to exclude. For example: 10.112.3.14, 10.112.3.15-10.112.3.18,192.168.1.1/24.
      * **sourceContainer** - source containers to exclude. Containers can contain VM, vNic, IP Set, MAC Set.
      * **destinationIPs** - destination IPs to exclude.
      * **destinationContainer** - destination containers to exclude. Containers can contain VM, vNic, IP Set, MAC Set.
      * **destinationPorts** - destination ports to exclude.
      * **serviceContainers** - service containers to exclude. Container can contain application or application group.
      ___
      Flow exclusion happens at the host. The following flows are discarded by default:
      * Broadcast IP (255.255.255.255)
      * Local multicast group (224.0.0.0/24)
      * Broadcast MAC address (FF:FF:FF:FF:FF:FF)
    get:
      displayName: flowConfigRead
      description: Retrieve flow monitoring configuration
      body:
        application/xml:
          example: |
            <FlowConfiguration>
              <collectFlows>true</collectFlows>
              <ignoreBlockedFlows>false</ignoreBlockedFlows>
              <ignoreLayer2Flows>false</ignoreLayer2Flows>
              <sourceIPs>10.112.3.14, 10.112.3.15-10.112.3.18,192.168.1.1/24</sourceIPs>
              <sourceContainer>
                <name>vm1 - Network adapter 1</name>
                <id>5013bcd8-c666-1e28-c7a9-600da945954f.000</id>
                <type>Vnic</type>
              </sourceContainer>
              <sourceContainer>
                <name>Large XP-1</name>
                <id>vm-126</id>
                <type>VirtualMachine</type>
              </sourceContainer>
              <destinationIPs>10.112.3.14, 10.112.3.15-10.112.3.18,192.168.1.1/24</destinationIPs>
              <destinationContainer>
                <name>vm2 - Network adapter 2</name>
                <id>5013bcd8-c666-1e28-c7a9-600da945954f.000</id>
                <type>Vnic</type>
              </destinationContainer>
              <destinationContainer>
                <name>Small XP-2</name>
                <id>vm-226</id>
                <type>VirtualMachine</type>
              </destinationContainer>
              <destinationPorts>22, 40-50, 60</destinationPorts>
              <service>
                <name>VMware-VDM2.x-Ephemeral</name>
                <id>application-161</id>
              </service>
            </FlowConfiguration>
    put:
      displayName: flowsConfigCreate
      description: Update flow monitoring configuration
      body:
        application/xml:
          example: |
            <FlowConfiguration>
              <collectFlows>true</collectFlows>
              <ignoreBlockedFlows>false</ignoreBlockedFlows>
              <ignoreLayer2Flows>false</ignoreLayer2Flows>
              <sourceIPs>10.112.3.14, 10.112.3.15-10.112.3.18,192.168.1.1/24</sourceIPs>
              <sourceContainer>
                <name>vm1 - Network adapter 1</name>
                <id>5013bcd8-c666-1e28-c7a9-600da945954f.000</id>
                <type>Vnic</type>
              </sourceContainer>
              <sourceContainer>
                <name>Large XP-1</name>
                <id>vm-126</id>
                <type>VirtualMachine</type>
              </sourceContainer>
              <destinationIPs>10.112.3.14, 10.112.3.15-10.112.3.18,192.168.1.1/24</destinationIPs>
              <destinationContainer>
                <name>vm2 - Network adapter 2</name>
                <id>5013bcd8-c666-1e28-c7a9-600da945954f.000</id>
                <type>Vnic</type>
              </destinationContainer>
              <destinationContainer>
                <name>Small XP-2</name>
                <id>vm-226</id>
                <type>VirtualMachine</type>
              </destinationContainer>
              <destinationPorts>22, 40-50, 60</destinationPorts>
              <service>
                <name>VMware-VDM2.x-Ephemeral</name>
                <id>application-161</id>
              </service>
            </FlowConfiguration>
          schema: flowsExcludeCreate
  /{contextId}:
    displayName: flowContext
    description: Flow configuration by contextId
    delete:
      displayName: flowContextDelete
      description: Delete flow records for the specified context.
/2.1/app/excludelist:
  displayName: dfwExclusion
  description: |
    Exclude Virtual Machines from Firewall Protection
    =========
  get:
    displayName: dfwExclusionRead
    description: Retrieve the set of vm's in the exclusion list
  /{memberID}:
    displayName: dfwExcludeMember
    description: Exclude VM's from firewall protection
    uriParameters:
      memberID:
        displayName: memberID
        description: vc-moref-id of a virtual machine
    put:
      displayName: dfwExclusionUpdate
      description: Add a vm to the exclusion list
    delete:
      displayName: dfwExclusionDelete
      description: Delete a vm from exclusion list
/4.0/edges:
  displayName: nsxEdges
  description: |
    Working with NSX Edge
    =======
  post:
    displayName: nsxEdgesCreate
    description: |
      Install NSX Edge services gateway or logical router, depending on request
      body.
      ___
      The NSX Edge installation API copies the NSX Edge OVF from the Edge
      Manager to the specified datastore and deploys an NSX Edge on the given
      datacenter. After the NSX Edge is installed, the virtual machine powers
      on and initializes according to the given network configuration. If an
      appliance is added, it is deployed with the specified configuration.
      ___
      Installing an NSX Edge instance adds a virtual machine to the vCenter
      Server inventory, you must specify an IP address for the management
      interface, and you may name the NSX Edge instance.
      ___
      The configuration you specify when you install an NSX Edge is stored in
      the database. If an appliance is added, the configuration is applied to
      it and it is deployed.
      ___
      NOTE: Do not use hidden/system resource pool IDs as they are not
      supported on the UI.
      ___
      Request body paramaters:
        * **name** - Optional. Default is *vShield-<edgeId>*. Used as a vm name
          on VC appended by "-<haIndex>"
        * **description** - Optional. A text string that describes the object.
        * **tenant** - Optional. Will be used in syslog messages.
        * **fqdn** - Optional. Defaut is *vshield-<edgeId>*. Used to set
          hostanme on the vm. Appended by *-<haIndex>*
        * **vseLogLevel** - Optional. Default is *INFO*. Other possible values:
            * *EMERGENCY*
            * *ALERT*
            * *CRITICAL*
            * *ERROR*
            * *WARNING*
            * *NOTICE*
            * *DEBUG*
        * **enableAesni** - Optional. Default is true.
        * **enableFips** - Optional. Default is false.
        * **appliances** - A maximum 2 appliances can be configured. Until one
          appliance is configured, none of the configured features configured
          will serve the network.
        * **applianceSize** - Optional. Default is *compact*. Possible values:
          * *compact*
          * *large*
          * *xlarge*
          * *quadlarge*
        * **enableCoreDump** - Optional. Default is false. Enabling core-dump
          will deploy an extra disk for core-dump files, which will consume
          1GB for COMPACT, LARGE, and QUADLARGE, and 8G for XLARGE Edge.
        * **vnics** - Mamimum 10 interfaces index 0-9 can be configured. Until
          one connected vnic is configured, none of the configured features
          will serve the network.
          * **name** - Optional. System has default Names. Format vNic0 ...
            vNic7.
          * **type** - Optional. Default is internal. Other possible value is
            "uplink".
          * **portgroupId* - Possible values here are portgroupIds or
            virtualWire-id. **portgroupId** needs to be defined if
            **isConnected**=*true*.
          * **addressGroups** - Supports one or more addressGroup except on the
            Edge used for the distributed router which can only have a primary
            IP address.
            * **addressGroup** - Vnic can be configured to have more than one
              addressGroup/subnets.
              * **primaryAddress** - This is mandatory for an **addressGroup**.
                May be either IPv4 of IPv6.
              * **secondaryAddresses** - Optional. Should be used to add/define
                other IPs used for NAT, LB, VPN, etc..
                * **ipAddress** - Optional. One or more can be provided.
                  This way multiple IP Addresses can be assigned to a
                  vnic/interface. May be eitehr IPv4 or IPv6.
              * **subnetMask** - Either **subnetMask** or **subnetPrefixLength**
                should be provided. If both then **subnetprefixLength** is
                ignored.
              * **subnetPrefixLength** - CIDR format style number of bits.
                Possible values are 1 - 32 for IPv4 or 1 - 128 for IPv6.
          * **macAddress** - Optional. When not specified, **macAddresses**
            will be managed by vCenter.
            * **edgeVmHaIndex**
              * **value** - Optional. User must ensure that **macAddresses**
              provided are unique withing the given layer 2 domain.
          * **fenceParameter** - Optional
              * **key** - Example *ethernet0.filter1.param1*
              * **value** - Example 1
          * **mtu** - Optional. Default is 1500.
          * **enableProxyArp** - Optional. Default is false.
          * **enableSendRedirects** - Optional. Default is true.
          * **isConnected** - Optional. Default is false.
          * **inShapingPolicy** - Optional
            * **averageBandwidth** - Example 200000000
            * **peakBandwidth** - Example 200000000
            * **burstSize>** - Example 0
            * **enabled** - Value can be *true* or *false*.
            * **inherite** - Value can be *true* or *false*.
          * **outShapingPolicy -Optional
            * **averageBandwidth** - Example 400000000
            * **peakBandwidth** - Example 400000000
            * **burstSize** - Example 0
            * **enabled** - Value can be *true* or *false*.
        * **cliSettings** - Optional. Default user/pass is admin/default, and
            remoteAccess is false (i.e. disabled).
          * **userName** - When you change the **userName** you are overwriting
            the current **userName**.
          * **password** - The password should be at least 12 characters long,
            must be a mix of alphabets, digits and special characters. Must
            contain at-least 1 uppercase, 1 lowercase, 1 special character and
            1 digit. In addition, a character cannot be repeated 3 or more
            times consectively.
          * **remoteAccess** - The **RemoteAccess** property specifies whether
            the CLI console access via SSH isenabled. Relevant firewall rules
            to allow traffic on port 22 must be opened by user/client. Please
            note that it is advisable to restrict SSH access to Edge CLI to
            only a limited IP addresses - firewall rules must be opened
            cautiously.
        * **autoConfiguration** - Optional.
          * **enabled** - Optional. Default is *true*. If set to *false*, user
            should add the nat, firewall, routing config to control plane work
            for LB, VPN, etc..
          * **rulePriority** - Optional. Default is *high*. Other possible
            value is *low*.
        * **dnsClient** - Optional. If the primary/secondary are specified and
          the DNS service not, the primary/secondary will to used as the
          default of the DNS service.
          * **primaryDns** - The IPv4 address of the primary DNS server.
          * **secondaryDns** - The IPv4 address of the secondary DNS server.
          * **domainName** - The domain name used for the DNS resolver.
        * **queryDaemon** - Optional. Defined for the sake of communication
          between SLB VM and edge vm for GSLB feature.
          * **enabled** - Default to *false*.
          * **port** - Default to 5666.
    queryParameters:
        isUniversal:
          displayName: isUniversal
          description: |
            Set to "true" when creating a universal logical router. Note the
            <type> in the request body must be "DISTRIBUTED_ROUTER"
          type: boolean
          required: false
    body:
      application/xml:
        example: |
          <edge>
            <datacenterMoid>datacenter-2</datacenterMoid>
            <name>org1-edge</name>
            <description>Description for the edge gateway</description>
            <tenant>org1</tenant>
            <fqdn>org1edge1</fqdn>
            <vseLogLevel>info</vseLogLevel>
            <enableAesni>false</enableAesni>
            <enableFips>true</enableFips>
            <appliances>
              <applianceSize>compact</applianceSize>
              <enableCoreDump>true</enableCoreDump>
              <appliance>
                <resourcePoolId>resgroup-53</resourcePoolId>
                <datastoreId>datastore-29</datastoreId>
                <hostId>host-28</hostId> <!-- optional -->
                <vmFolderId>group-v38</vmFolderId> <!-- optional -->
                <customField> <!-- optional -->
                  <key>system.service.vmware.vsla.main01</key>
                  <value>string</value>
                </customField>
                <cpuReservation> <!-- optional -->
                  <limit>2399</limit>
                  <reservation>500</reservation>
                  <shares>500</shares>
                </cpuReservation>
                <memoryReservation> <!-- optional -->
                  <limit>5000</limit>
                  <reservation>500</reservation>
                  <shares>20480</shares>
                </memoryReservation>
              </appliance>
            </appliances>
            <vnics>
              <vnic>
                <index>0</index>
                <name>internal0</name>
                <type>internal</type>
                <portgroupId>dvportgroup-114</portgroupId>
                <addressGroups>
                  <addressGroup>
                    <primaryAddress>192.168.3.1</primaryAddress>
                    <secondaryAddresses>
                      <ipAddress>192.168.3.2</ipAddress>
                      <ipAddress>192.168.3.3</ipAddress>
                    </secondaryAddresses>
                    <subnetMask>255.255.255.0</subnetMask>
                  </addressGroup>
                  <addressGroup>
                    <primaryAddress>192.168.4.1</primaryAddress>
                    <secondaryAddresses>
                      <ipAddress>192.168.4.2</ipAddress>
                      <ipAddress>192.168.4.3</ipAddress>
                    </secondaryAddresses>
                    <subnetPrefixLength>24</subnetPrefixLength>
                  </addressGroup>
                  <addressGroup>
                    <primaryAddress>ffff::1</primaryAddress>
                    <secondaryAddresses>
                      <ipAddress>ffff::2</ipAddress>
                    </secondaryAddresses>
                    <subnetPrefixLength>64</subnetPrefixLength>
                  </addressGroup>
                </addressGroups>
                <macAddress>
                  <edgeVmHaIndex>0</edgeVmHaIndex>
                  <value>00:50:56:01:03:23</value>
                </macAddress>
                <fenceParameter>
                  <key>ethernet0.filter1.param1</key>
                  <value>1</value>
                </fenceParameter>
                <mtu>1500</mtu>
                <enableProxyArp>false</enableProxyArp>
                <enableSendRedirects>true</enableSendRedirects>
                <isConnected>true</isConnected>
                <inShapingPolicy>
                  <averageBandwidth>200000000</averageBandwidth>
                  <peakBandwidth>200000000</peakBandwidth>
                  <burstSize>0</burstSize>
                  <enabled>true</enabled>
                  <inherited>false</inherited>
                </inShapingPolicy>
                <outShapingPolicy>
                  <averageBandwidth>400000000</averageBandwidth>
                  <peakBandwidth>400000000</peakBandwidth>
                  <burstSize>0</burstSize>
                  <enabled>true</enabled>
                  <inherited>false</inherited>
                </outShapingPolicy>
              </vnic>
            </vnics>
            <cliSettings>
              <userName>test</userName>
              <password>test123!</password>
              <remoteAccess>false</remoteAccess>
            </cliSettings>
            <autoConfiguration>
              <enabled>true</enabled>
              <rulePriority>high</rulePriority>
            </autoConfiguration>
            <dnsClient>
              <primaryDns>10.117.0.1</primaryDns>
              <secondaryDns>10.117.0.2</secondaryDns>
              <domainName>vmware.com</domainName>
              <domainName>foo.com</domainName>
            </dnsClient>
            <queryDaemon>
              <enabled>true</enabled>
              <port>5666</port>
            </queryDaemon>
          </edge>
        schema: nsxEdgesCreate
  get:
    displayName: nsxEdgesRead
    description: |
      Retrieve a list of NSX Edges in your inventory or use the query
      parameters to filter results by datacenter or port group
    queryParameters:
      datacenter:
        displayName: datacenter
        description: Retrieve Edges by datacenter MoId
      tenant:
        displayName: tenant
        description: Retrieve Edges on specified tenant (by tenant ID)
      pg:
        displayName: pg
        description: |
          Retrieve Edges with one interface on specified port group (by port
          group MoId)
  /{edgeId}:
    displayName: nsxEdge
    description: NSX Edge operations
    uriParameters:
      edgeId:
        required: true
        displayName: edgeId
        description: Specify the ID of the edge in *edgeId*.
    post:
      displayName: nsxEdgeCreate
      description: Manage NSX Edge
      queryParameters:
        action:
          displayName: action
          required: true
          description: |
            Options include:
              * *forcesync* - Resync of the edge
              * *redeploy* - Redeply the edge
              * *upgrade* - Upgrade the edge to a newer version
    get:
      displayName: nsxEdgeRead
      description: Retrieve Edge details
      queryParameters:
        isUniversal:
          displayName: isUniversal
          description: |
            Filter read of Edges to display only universal logical routers
          type: boolean
          required: false
    put:
      displayName: nsxEdgeUpdate
      description: Update the NSX Edge configuration
      body:
        application/xml:
          example: |
            <edge>
              <id></id>
              <description></description>
              <datacenterMoid></datacenterMoid>
              <name></name>
              <type></type>
              <fqdn></fqdn>
              <enableAesni></enableAesni>
              <enableFips></enableFips>
              <vseLogLevel></vseLogLevel>
              <vnics>
                <vnic>
                  <index></index>
                  <name></name>
                  <type></type>
                  <portgroupId></portgroupId>
                  <addressGroups>
                    <addressGroup>
                      <primaryAddress></primaryAddress>
                      <secondaryAddresses>
                        <ipAddress></ipAddress>
                      </secondaryAddresses>
                      <subnetMask></subnetMask>
                    </addressGroup>
                  </addressGroups>
                  <mtu></mtu>
                  <enableProxyArp></enableProxyArp>
                  <enableSendRedirects></enableSendRedirects>
                  <isConnected></isConnected>
                  <inShapingPolicy>
                    <averageBandwidth></averageBandwidth>
                    <peakBandwidth></peakBandwidth>
                    <burstSize></burstSize>
                    <enabled></enabled>
                    <inherited></inherited>
                  </inShapingPolicy>
                  <outShapingPolicy>
                    <averageBandwidth></averageBandwidth>
                    <peakBandwidth></peakBandwidth>
                    <burstSize></burstSize>
                    <enabled></enabled>
                    <inherited></inherited>
                  </outShapingPolicy>
                </vnic>
              </vnics>
              <appliances>
                <applianceSize></applianceSize>
                <appliance>
                  <resourcePoolId></resourcePoolId>
                  <datastoreId></datastoreId>
                  <vmFolderId></vmFolderId>
                </appliance>
              </appliances>
              <cliSettings>
                <remoteAccess></remoteAccess>
                <userName></userName>
              </cliSettings>
              <features>
                <firewall>
                  <defaultPolicy>
                    <action></action>
                    <loggingEnabled></loggingEnabled>
                  </defaultPolicy>
                  <rules>
                    <rule>
                      <id></id>
                      <ruleTag></ruleTag>
                      <name></name>
                      <ruleType></ruleType>
                      <source>
                        <exclude></exclude>
                        <groupingObjectId></groupingObjectId>
                      </source>
                      <destination></destination>
                      <application>
                        <applicationId></applicationId>
                      </application>
                      <action></action>
                      <enabled></enabled>
                      <loggingEnabled></loggingEnabled>
                      <matchTranslated></matchTranslated>
                    </rule>
                  </rules>
                </firewall>
                <routing>
                  <staticRouting>
                    <defaultRoute>
                      <vnic></vnic>
                      <gatewayAddress></gatewayAddress>
                      <description></description>
                    </defaultRoute>
                    <staticRoutes>
                      <route>
                        <vnic></vnic>
                        <network></network>
                        <nextHop></nextHop>
                        <type></type>
                      </route>
                    </staticRoutes>
                  </staticRouting>
                  <ospf>
                    <enabled></enabled>
                  </ospf>
                </routing>
                <highAvailability>
                  <enabled></enabled>
                  <declareDeadTime></declareDeadTime>
                  <logging>
                    <enable></enable>
                    <logLevel></logLevel>
                  </logging>
                </highAvailability>
                <syslog>
                  <protocol></protocol>
                  <serverAddresses>
                    <ipAddress></ipAddress>
                  </serverAddresses>
                </syslog>
                <ipsec>
                  <enabled></enabled>
                  <logging>
                    <enable></enable>
                    <logLevel></logLevel>
                  </logging>
                  <sites>
                    <site>
                      <enabled></enabled>
                      <name></name>
                      <localId></localId>
                      <localIp></localIp>
                      <peerId></peerId>
                      <encryptionAlgorithm></encryptionAlgorithm>
                      <mtu></mtu>
                      <enablePfs></enablePfs>
                      <dhGroup></dhGroup>
                      <localSubnets>
                        <subnet></subnet>
                      </localSubnets>
                      <peerSubnets>
                        <subnet></subnet>
                      </peerSubnets>
                      <psk></psk>
                      <authenticationMode></authenticationMode>
                    </site>
                  </sites>
                  <global>
                    <caCertificates/>
                    <crlCertificates/>
                  </global>
                </ipsec>
                <dhcp>
                  <enabled></enabled>
                  <staticBindings>
                    <staticBinding>
                      <autoConfigureDNS></autoConfigureDNS>
                      <bindingId></bindingId>
                      <vmId></vmId>
                      <vnicId></vnicId>
                      <hostname></hostname>
                      <ipAddress></ipAddress>
                      <defaultGateway></defaultGateway>
                      <leaseTime></leaseTime>
                    </staticBinding>
                  </staticBindings>
                  <ipPools>
                    <ipPool>
                      <autoConfigureDNS></autoConfigureDNS>
                      <poolId></poolId>
                      <ipRange></ipRange>
                      <defaultGateway></defaultGateway>
                      <leaseTime></leaseTime>
                    </ipPool>
                  </ipPools>
                  <logging>
                    <enable></enable>
                    <logLevel></logLevel>
                  </logging>
                </dhcp>
                <nat>
                  <natRules>
                    <natRule>
                      <ruleId></ruleId>
                      <ruleTag></ruleTag>
                      <ruleType></ruleType>
                      <action></action>
                      <vnic></vnic>
                      <originalAddress></originalAddress>
                      <translatedAddress></translatedAddress>
                      <loggingEnabled></loggingEnabled>
                      <enabled></enabled>
                      <protocol></protocol>
                      <originalPort></originalPort>
                      <translatedPort></translatedPort>
                    </natRule>
                  </natRules>
                </nat>
              </features>
              <autoConfiguration>
                <enabled></enabled>
                <rulePriority></rulePriority>
              </autoConfiguration>
            </edge>
          schema: nsxEdgeUpdate
    delete:
      displayName: nsxEdgeDelete
      description: |
        Delete specified Edge from database. Associated appliances are also
        deleted
    /dnsclient:
      displayName: edgeDnsClient
      description: DNS settings (primary/secondary and search domain) of an Edge
      put:
        displayName: edgeDnsClientUpdate
        description: Update Edge DNS settings
        body:
          application/xml:
            example: |
              <dnsClient>
                <primaryDns></primaryDns>
                <secondaryDns></secondaryDns>
                <domainName></domainName>
              </dnsClient>
            schema: edgeDnsClientUpdate
    /aesni:
      displayName: aesni
      description: AESNI Setting
      post:
        displayName: aesniCreate
        description: Modify AESNI setting
        queryParameters:
          enable:
            type: boolean
            required: true
            displayName: enable
    /coredump:
      displayName: coreDump
      description: |
        Enabling core-dump feature results in deployment of inbuilt extra disk
        to save core-dump files. 1GB for compact edge and 8GB for other types.
        Disabling detaches the disk
      post:
        displayName: coreDumpCreate
        description: Modify core dump setting
    /fips:
      displayName: fips
      description: FIPs setting
      post:
        displayName: fipsCreate
        description: Modify FIPs setting
        queryParameters:
          enable:
            type: boolean
            required: true
            displayName: enable
    /logging:
      displayName: logging
      description: Log setting
      post:
        displayName: loggingCreate
        description: Modify log setting
        queryParameters:
          level:
            displayName: level
    /summary:
      displayName: summary
      description: Edge summary
      get:
        displayName: summaryRead
        description: Retrieve details about the specified Edge
    /status:
      displayName: status
      description: Edge status
      get:
        displayName: statusRead
        description: Retrieve the status of the specified Edge
        queryParameters:
          getlatest:
            type: boolean
            displayName: getlatest
            description: |
              true = fetch the status live from NSX Edge, false = fetch the
              latest available status from database
          detailed:
            type: boolean
            displayName: detailed
            description: |
              true = fetch detailed status per feature, false = aggregated
              summary of status per feature
          preRulesStatus:
            type: boolean
            displayName: preRulesStatus
            description: |
              true = fetch detailed output for pre rules in addition to the
              regular output
    /techsupportlogs:
      displayName: techSupportLogs
      description: Tech support logs for specified Edge
      get:
        displayName: techSupportLogsRead
        description: Retrieve the tech support logs for Edge
    /clisettings:
      displayName: cliSettings
      description: Manage CLI credentials and access
      put:
        displayName: cliSettingsUpdate
        description: Modify CLI credentials and enable/disable SSH for Edge
        body:
          application/xml:
            example: |
              <cliSettings>
                <userName></userName>
                <password></password>
                <remoteAccess></remoteAccess>
                <passwordExpiry></passwordExpiry>
                <sshLoginBannerText></sshLoginBannerText>
              </cliSettings>
            schema: cliSettingsUpdate
    /cliremoteaccess:
      displayName: cliRemote
      description: Enable or disable SSH on the Edge
      post:
        displayName: cliRemoteCreate
        description: Change CLI remote access
        queryParameters:
          enable:
            type: boolean
            required: true
            displayName: enable
    /firewall/config:
      displayName: nsxEdgeFirewallConfig
      description: Configure firewall for an Edge
      get:
        displayName: nsxEdgeFirewallConfigRead
        description: Read the firewall configuration
      put:
        displayName: nsxEdgeFirewallConfigUpdate
        description: Configure firewall for an Edge
        body:
          application/xml:
            example: |
              <firewall>
                <defaultPolicy>
                  <action></action>
                  <loggingEnabled></loggingEnabled>
                </defaultPolicy>
                <enabled></enabled>
                <globalConfig>
                  <tcpPickOngoingConnections></tcpPickOngoingConnections>
                  <tcpAllowOutOfWindowPackets></tcpAllowOutOfWindowPackets>
                  <tcpSendResetForClosedVsePorts></tcpSendResetForClosedVsePorts>
                  <dropInvalidTraffic></dropInvalidTraffic>
                  <logInvalidTraffic></logInvalidTraffic>
                  <tcpTimeoutOpen></tcpTimeoutOpen>
                  <tcpTimeoutEstablished></tcpTimeoutEstablished>
                  <tcpTimeoutClose></tcpTimeoutClose>
                  <udpTimeout></udpTimeout>
                  <icmpTimeout></icmpTimeout>
                  <icmp6Timeout></icmp6Timeout>
                  <ipGenericTimeout></ipGenericTimeout>
                </globalConfig>
                <rules>
                  <rule>
                    <ruleTag></ruleTag>
                    <name></name>
                    <source>
                      <vnicGroupId></vnicGroupId>
                      <groupingObjectId></groupingObjectId>
                      <ipAddress></ipAddress>
                    </source>
                    <destination>
                      <groupingObjectId></groupingObjectId>
                      <vnicGroupId></vnicGroupId>
                      <groupingObjectId></groupingObjectId>
                      <ipAddress></ipAddress>
                    </destination>
                    <application>
                      <applicationId></applicationId>
                      <service>
                        <protocol></protocol>
                        <port></port>
                        <sourcePort></sourcePort>
                      </service>
                    </application>
                    <matchTranslated></matchTranslated>
                    <direction></direction>
                    <action></action>
                    <enabled></enabled>
                    <loggingEnabled></loggingEnabled>
                    <description></description>
                  </rule>
                </rules>
              </firewall>
            schema: nsxEdgeFirewallConfigUpdate
      delete:
        displayName: nsxEdgeFirewallConfigDelete
        description: Delete firewall configuration
      /rules:
        displayName: firewallRules
        description: Firewall rules
        post:
          displayName: firewallRulesCreate
          description: |
            Add one or more rules. You can add a rule above a specific rule
            using the query parameter, indicating the desired ruleID.
          queryParameters:
            aboveRuleId:
              displayName: aboveRuleId
              description: rule Id
          body:
            application/xml:
              example: |
                <firewall>
                  <defaultPolicy>
                    <action></action>
                    <loggingEnabled></loggingEnabled>
                  </defaultPolicy>
                  <globalConfig>
                    <tcpPickOngoingConnections></tcpPickOngoingConnections>
                    <tcpAllowOutOfWindowPackets></tcpAllowOutOfWindowPackets>
                    <tcpSendResetForClosedVsePorts></tcpSendResetForClosedVsePorts>
                    <dropInvalidTraffic></dropInvalidTraffic>
                    <logInvalidTraffic></logInvalidTraffic>
                    <tcpTimeoutOpen></tcpTimeoutOpen>
                    <tcpTimeoutEstablished></tcpTimeoutEstablished>
                    <tcpTimeoutClose></tcpTimeoutClose>
                    <udpTimeout></udpTimeout>
                    <icmpTimeout></icmpTimeout>
                    <icmp6Timeout></icmp6Timeout>
                    <ipGenericTimeout></ipGenericTimeout>
                  </globalConfig>
                  <rules>
                    <rule>
                      <ruleTag></ruleTag>
                      <name></name>
                      <source>
                        <vnicGroupId></vnicGroupId>
                        <groupingObjectId></groupingObjectId>
                        <ipAddress></ipAddress>
                      </source>
                      <destination>
                        <groupingObjectId></groupingObjectId>
                        <vnicGroupId></vnicGroupId>
                        <groupingObjectId></groupingObjectId>
                        <ipAddress></ipAddress>
                      </destination>
                      <application>
                        <applicationId></applicationId>
                        <service>
                          <protocol></protocol>
                          <port></port>
                          <sourcePort></sourcePort>
                        </service>
                      </application>
                      <matchTranslated></matchTranslated>
                      <direction></direction>
                      <action></action>
                      <enabled></enabled>
                      <loggingEnabled></loggingEnabled>
                      <description></description>
                    </rule>
                  </rules>
                </firewall>
              schema: firewallRulesCreate
        /{ruleId}:
          displayName: firewallRule
          description: Specific firewall rule
          uriParameters:
            ruleId:
              required: true
              displayName: ruleId
              description: Rule ID
          get:
            displayName: firewallRuleRead
            description: Retrieve specific rule
          put:
            displayName: firewallRuleUpdate
            description: Modify a specific firewall rule
            body:
              application/xml:
                example: |
                  <rule>
                    <ruleTag></ruleTag>
                    <name></name>
                    <source>
                      <vnicGroupId></vnicGroupId>
                      <groupingObjectId></groupingObjectId>
                    </source>
                    <destination>
                      <groupingObjectId></groupingObjectId>
                      <vnicGroupId></vnicGroupId>
                    </destination>
                    <application>
                      <applicationId></applicationId>
                    </application>
                    <matchTranslated></matchTranslated>
                    <direction></direction>
                    <action></action>
                    <enabled></enabled>
                    <loggingEnabled></loggingEnabled>
                    <description></description>
                  </rule>
                schema: firewallRuleUpdate
          delete:
            displayName: firewallRuleDelete
            description: Delete firewall rule
      /global:
        displayName: globalFirewallConfig
        description: NSX Edge global firewall configuration
        get:
          displayName: globalFirewallConfigRead
          description: Retrieve the firewall default policy for an Edge
        put:
          displayName: globalFirewallConfigUpdate
          description: Configure firewall global config for an Edge
          body:
            application/xml:
              example: |
                <globalConfig>
                  <tcpPickOngoingConnections></tcpPickOngoingConnections>
                  <tcpAllowOutOfWindowPackets></tcpAllowOutOfWindowPackets>
                  <tcpSendResetForClosedVsePorts></tcpSendResetForClosedVsePorts>
                  <dropInvalidTraffic></dropInvalidTraffic>
                  <logInvalidTraffic></logInvalidTraffic>
                  <tcpTimeoutOpen></tcpTimeoutOpen>
                  <tcpTimeoutEstablished></tcpTimeoutEstablished>
                  <tcpTimeoutClose></tcpTimeoutClose>
                  <udpTimeout></udpTimeout>
                  <icmpTimeout></icmpTimeout>
                  <icmp6Timeout></icmp6Timeout>
                  <ipGenericTimeout></ipGenericTimeout>
                </globalConfig>
              schema: globalFirewallConfigUpdate
      /defaultpolicy:
        displayName: defaultFirewallPolicy
        description: Default firewall policy for an Edge
        get:
          displayName: defaultFirewallPolicyRead
          description: Retrieve default firewall policy
        put:
          displayName: defaultFirewallPolicyUpdate
          description: Configure default firewall policy
          body:
            application/xml:
              example: |
                <firewallDefaultPolicy>
                  <action></action>
                  <loggingEnabled></loggingEnabled>
                </firewallDefaultPolicy>
              schema: defaultFirewallPolicyUpdate
    /firewall/statistics/firewall:
      displayName: firewallStatistics
      description: Edge firewall statistics
      get:
        displayName: firewallStatisticsRead
        description: Retrieve number of ongoing connections for the firewall config
        queryParameters:
          interval:
            displayName: interval
            description: |
              60 min by default, can be given as 1 -60 min, oneDay | oneWeek |
              oneMonth | oneYear
    /firewall/statistics/{ruleId}:
      displayName: firewallRuleStatistics
      description: Statistics for firewall rules
      uriParameters:
        ruleId:
          displayName: ruleId
          required: true
          description: Specified rule
      get:
        displayName: firewallRuleStatisticsRead
        description: Retrieve stats for firewall rule
    /nat/config:
      displayName: edgeNat
      description: SNAT and DNAT rules for NSX Edge
      put:
        displayName: edgeNatConfig
        description: Configure SNAT and DNAT rules for an Edge
        body:
          application/xml:
            example: |
              <nat>
                <natRules>
                  <natRule>
                    <ruleTag></ruleTag>
                    <action></action>
                    <vnic></vnic>
                    <originalAddress></originalAddress>
                    <translatedAddress></translatedAddress>
                    <loggingEnabled></loggingEnabled>
                    <enabled></enabled>
                    <description></description>
                    <protocol></protocol>
                    <translatedPort></translatedPort>
                    <originalPort></originalPort>
                  </natRule>
                </natRules>
              </nat>
            schema: edgeNatConfig
      get:
        displayName: edgeNatRead
        description: Query SNAT and DNAT rules for an Edge
      delete:
        displayName: edgeNatDelete
        description: Delete all NAT rules for an Edge
      /rules:
        displayName: edgeNatRules
        description: NAT rules
        post:
          displayName: edgeNatRulesCreate
          description: |
            Add a NAT rule above a specific rule in the NAT rules table
            (using aboveRuleId) or append NAT rules to the bottom
          queryParameters:
            aboveRuleId:
              displayName: aboveRuleId
              description: |
                Specified rule ID. If the ID does not exist, Edge Manager
                displays an error
          body:
            application/xml:
              example: |
                <natRules>
                  <natRule>
                    <action></action>
                    <vnic></vnic>
                    <originalAddress></originalAddress>
                    <translatedAddress></translatedAddress>
                    <loggingEnabled></loggingEnabled>
                    <enabled></enabled>
                    <description></description>
                    <protocol></protocol>
                    <translatedPort></translatedPort>
                    <originalPort></originalPort>
                  </natRule>
                </natRules>
              schema: edgeNatRulesCreate
        /{ruleID}:
          displayName: edgeNatRule
          description: Specified NAT rule
          uriParameters:
            ruleID:
              required: true
              displayName: ruleID
              description: Specified rule ID
          put:
            displayName: edgeNatRuleUpdate
            description: Modify a NAT rule
            body:
              application/xml:
                example: |
                  <natRule>
                    <action></action>
                    <vnic></vnic>
                    <originalAddress></originalAddress>
                    <translatedAddress></translatedAddress>
                    <loggingEnabled></loggingEnabled>
                    <enabled></enabled>
                    <description></description>
                    <protocol></protocol>
                    <translatedPort></translatedPort>
                    <originalPort></originalPort>
                  </natRule>
                schema: edgeNatRuleUpdate
          delete:
            displayName: edgeNatRuleUpdate
            description: Delete a NAT rule
    /routing/config:
      displayName: routingConfig
      description: Static and dynamic routing for each NSX Edge
      get:
        displayName: routingConfigRead
        description: Retrieve routes
      put:
        displayName: routingConfigUpdate
        description: Configure globalConfig, staticRouting, OSPG, BGP, and IS-IS
        body:
          application/xml:
            example: |
              <routing>
                <routingGlobalConfig>
                  <ecmp></ecmp>
                  <routerId></routerId>
                  <logging>
                    <enable></enable>
                    <logLevel></logLevel>
                  </logging>
                  <ipPrefixes>
                    <ipPrefix>
                      <name></name>
                      <ipAddress></ipAddress>
                    </ipPrefix>
                  </ipPrefixes>
                </routingGlobalConfig>
                <staticRouting>
                  <staticRoutes>
                    <route>
                      <description></description>
                      <vnic></vnic>
                      <network></network>
                      <nextHop></nextHop>
                      <mtu></mtu>
                    </route>
                  </staticRoutes>
                  <defaultRoute>
                    <description></description>
                    <vnic></vnic>
                    <gatewayAddress></gatewayAddress>
                    <mtu></mtu>
                  </defaultRoute>
                </staticRouting>
                <ospf>
                  <enabled></enabled>
                  <defaultOriginate></defaultOriginate>
                  <gracefulRestart></gracefulRestart>
                  <protocolAddress></protocolAddress>
                  <forwardingAddress></forwardingAddress>
                  <ospfAreas>
                    <ospfArea>
                      <areaId></areaId>
                      <type></type>
                      <authentication>
                        <type></type>
                        <value></value>
                      </authentication>
                    </ospfArea>
                  </ospfAreas>
                  <ospfInterfaces>
                    <ospfInterface>
                      <vnic></vnic>
                      <areaId></areaId>
                      <helloInterval></helloInterval>
                      <deadInterval></deadInterval>
                      <priority></priority>
                      <cost></cost>
                    </ospfInterface>
                  </ospfInterfaces>
                  <redistribution>
                    <enabled></enabled>
                    <rules>
                      <rule>
                        <prefixName></prefixName>
                        <from>
                          <isis></isis>
                          <ospf></ospf>
                          <bgp></bgp>
                          <static></static>
                          <connected></connected>
                        </from>
                        <action></action>
                      </rule>
                    </rules>
                  </redistribution>
                </ospf>
                <isis>
                  <enabled></enabled>
                  <systemId></systemId>
                  <areaIds>
                    <areaId></areaId>
                  </areaIds>
                  <isType></isType>
                  <domainPassword></domainPassword>
                  <areaPassword></areaPassword>
                  <isisInterfaces>
                    <isisInterface>
                      <vnic></vnic>
                      <meshGroup></meshGroup>
                      <helloInterval></helloInterval>
                      <helloMultiplier></helloMultiplier>
                      <lspInterval></lspInterval>
                      <metric></metric>
                      <priority></priority>
                      <circuitType></circuitType>
                      <password></password>
                    </isisInterface>
                  </isisInterfaces>
                  <redistribution>
                    <enabled></enabled>
                    <rules>
                      <rule>
                        <prefixName></prefixName>
                        <from>
                          <isis></isis>
                          <ospf></ospf>
                          <bgp></bgp>
                          <static></static>
                          <connected></connected>
                        </from>
                        <action></action>
                      </rule>
                    </rules>
                  </redistribution>
                </isis>
                <bgp>
                  <enabled></enabled>
                  <localAS></localAS>
                  <bgpNeighbours>
                    <bgpNeighbour>
                      <ipAddress></ipAddress>
                      <remoteAS></remoteAS>
                      <weight></weight>
                      <holdDownTimer></holdDownTimer>
                      <keepAliveTimer></keepAliveTimer>
                      <password></password>
                      <bgpFilters>
                        <bgpFilter>
                          <direction></direction>
                          <action></action>
                          <network></network>
                          <ipPrefixGe></ipPrefixGe>
                          <ipPrefixLe></ipPrefixLe>
                        </bgpFilter>
                      </bgpFilters>
                    </bgpNeighbour>
                  </bgpNeighbours>
                  <redistribution>
                    <enabled></enabled>
                    <rules>
                      <rule>
                        <prefixName></prefixName>
                        <from>
                          <isis></isis>
                          <ospf></ospf>
                          <bgp></bgp>
                          <static></static>
                          <connected></connected>
                        </from>
                        <action></action>
                      </rule>
                    </rules>
                  </redistribution>
                </bgp>
              </routing>
            schema: routingConfigUpdate
      delete:
        displayName: routingConfigDelete
        description: Delete the routing config stored in the NSX Mgr database and the default routes from the specified NSX Edge appliance
      /global:
        displayName: routingGlobalConfig
        description: Global configuration
        put:
          displayName: routingGlobalConfigUpdate
          description: Configure global route
          body:
            application/xml:
              example: |
                <routingGlobalConfig>
                  <routerId></routerId>
                  <ecmp></ecmp>
                  <logging>
                    <enable></enable>
                    <logLevel></logLevel>
                  </logging>
                  <ipPrefixes>
                    <ipPrefix>
                      <name></name>
                      <ipAddress></ipAddress>
                    </ipPrefix>
                  </ipPrefixes>
                </routingGlobalConfig>
              schema: routingGlobalConfigUpdate
        get:
          displayName: routingGlobalConfigRead
          description: |
            Retrieve routing info from NSX Mgr database (default route
            settings, static route configurations)
      /static:
        displayName: routingConfigStatic
        description: Static and default routes for specified Edge
        get:
          displayName: routingConfigStaticRead
          description: Read static and default routes
        put:
          displayName: routingConfigStaticUpdate
          description: Configure static and default routes
          body:
            application/xml:
              example: |
                <staticRouting>
                  <staticRoutes>
                    <route>
                      <description></description>
                      <vnic></vnic>
                      <network></network>
                      <nextHop></nextHop>
                      <mtu></mtu>
                    </route>
                  </staticRoutes>
                  <defaultRoute>
                    <description></description>
                    <vnic></vnic>
                    <gatewayAddress></gatewayAddress>
                    <mtu></mtu>
                  </defaultRoute>
                </staticRouting>
              schema: routingConfigStaticUpdate
        delete:
          displayName: routingConfigStaticDelete
          description: |
            Delete both static and default routing config stored in the NSX
            Mgr database
      /ospf:
        displayName: routingOSPF
        description: OSPF Routing for NSX Edge
        get:
          displayName: routingOSPFRead
          description: Query OSPF config
        put:
          displayName: routingOSPFUpdate
          description: Configure OSPF
          body:
            application/xml:
              example: |
                <ospf>
                  <enabled></enabled>
                  <ospfAreas>
                    <ospfArea>
                      <areaId></areaId>
                      <type></type>
                      <authentication>
                        <type></type>
                        <value></value>
                      </authentication>
                    </ospfArea>
                  </ospfAreas>
                  <ospfInterfaces>
                    <ospfInterface>
                      <vnic></vnic>
                      <areaId></areaId>
                      <helloInterval></helloInterval>
                      <deadInterval></deadInterval>
                      <priority></priority>
                      <cost></cost>
                    </ospfInterface>
                  </ospfInterfaces>
                  <redistribution>
                    <enabled></enabled>
                    <rules>
                      <rule>
                        <prefixName></prefixName>
                        <from>
                          <isis></isis>
                          <ospf></ospf>
                          <bgp></bgp>
                          <static></static>
                          <connected></connected>
                        </from>
                        <action></action>
                      </rule>
                    </rules>
                  </redistribution>
                </ospf>
              schema: routingOSPFUpdate
        delete:
          displayName: routingOSPFDelete
          description: Delete OSPF routing
      /isis:
        displayName: routingISIS
        description: IS-IS Routes for NSX Edge
        get:
          displayName: routingISISRead
          description: Query ISIS
        put:
          displayName: routingISISUpdate
          description: Config ISIS
          body:
            application/xml:
              example: |
                <isis>
                  <enabled></enabled>
                  <systemId></systemId>
                  <areaIds>
                    <areaId></areaId>
                  </areaIds>
                  <isType></isType>
                  <domainPassword></domainPassword>
                  <areaPassword></areaPassword>
                  <isisInterfaces>
                    <isisInterface>
                      <vnic></vnic>
                      <meshGroup></meshGroup>
                      <helloInterval></helloInterval>
                      <helloMultiplier></helloMultiplier>
                      <lspInterval></lspInterval>
                      <metric></metric>
                      <priority></priority>
                      <circuitType></circuitType>
                      <password></password>
                    </isisInterface>
                  </isisInterfaces>
                  <redistribution>
                    <enabled></enabled>
                      <rules>
                        <rule>
                          <prefixName></prefixName>
                            <from>
                              <isis></isis>
                              <ospf></ospf>
                              <bgp></bgp>
                              <static></static>
                              <connected></connected>
                            </from>
                            <action></action>
                          </rule>
                      </rules>
                  </redistribution>
                </isis>
              schema: routingISISUpdate
        delete:
          displayName: routingISISDelete
          description: Delete ISIS routing
      /bgp:
        displayName: routingBGP
        description: Manage BGP routes for NSX Edge
        get:
          displayName: routingBGPRead
          description: Query BGP
        put:
          displayName: routingBGPUpdate
          description: Configure BGP
          body:
            application/xml:
              example: |
                <bgp>
                  <enabled></enabled>
                  <localAS></localAS>
                  <bgpNeighbours>
                    <bgpNeighbour>
                      <ipAddress></ipAddress>
                      <remoteAS></remoteAS>
                      <weight></weight>
                      <holdDownTimer></holdDownTimer>
                      <keepAliveTimer></keepAliveTimer>
                      <password></password>
                      <bgpFilters>
                        <bgpFilter>
                          <direction></direction>
                          <action></action>
                          <network></network>
                          <ipPrefixGe></ipPrefixGe>
                          <ipPrefixLe></ipPrefixLe>
                        </bgpFilter>
                      </bgpFilters>
                    </bgpNeighbour>
                  </bgpNeighbours>
                  <redistribution>
                    <enabled></enabled>
                    <rules>
                      <rule>
                        <prefixName></prefixName>
                        <from>
                          <isis></isis>
                          <ospf></ospf>
                          <bgp></bgp>
                          <static></static>
                          <connected></connected>
                        </from>
                        <action></action>
                      </rule>
                    </rules>
                  </redistribution>
                </bgp>
              schema: routingBGPUpdate
        delete:
          displayName: routingBGPDelete
          description: Delete BGP Routing
    /bridging/config:
      displayName: bridging
      description: Working with L2 bridging
      get:
        displayName: bridgingRead
        description: Retrieve bridge configuration
      put:
        displayName: bridingUpdate
        description: Configure a bridge
        body:
          application/xml:
            example: |
              <bridges>
                <version></version>
                <enabled></enabled>
                <bridge>
                  <name></name>
                  <virtualWire></virtualWire>
                  <dvportGroup></dvportGroup>
                </bridge>
              </bridges>
            schema: bridingUpdate
      delete:
        displayName: bridgingDelete
        description: Delete bridges
    /loadbalancer/config:
      displayName: loadBalancer
      description: NSX Edge load balancer
      get:
        displayName: loadBalancerRead
        description: Get current load balancer config
      put:
        displayName: loadBalancerConfig
        description: Configure load balancer
        body:
          application/xml:
            example: |
              <loadBalancer>
                <enabled></enabled>
                <enableServiceInsertion></enableServiceInsertion>
                <accelerationEnabled></accelerationEnabled>
                <logging>
                  <enable></enable>
                  <logLevel></logLevel>
                </logging>
                <virtualServer>
                  <virtualServerId></virtualServerId>
                  <name></name>
                  <description></description>
                  <enabled></enabled>
                  <ipAddress></ipAddress>
                  <protocol></protocol>
                  <port></port>
                  <connectionLimit></connectionLimit>
                  <connectionRateLimit></connectionRateLimit>
                  <applicationProfileId></applicationProfileId>
                  <defaultPoolId></defaultPoolId>
                  <enableServiceInsertion></enableServiceInsertion>
                  <accelerationEnabled></accelerationEnabled>
                  <applicationRuleId></applicationRuleId>
                </virtualServer>
                <applicationProfile>
                  <applicationProfileId></applicationProfileId>
                  <name></name>
                  <insertXForwardedFor></insertXForwardedFor>
                  <sslPassthrough></sslPassthrough>
                  <template></template>
                  <persistence>
                    <method></method>
                    <cookieName></cookieName>
                    <cookieMode></cookieMode>
                  </persistence>
                  <serverSslEnabled></serverSslEnabled>
                  <clientSsl>
                    <clientAuth></clientAuth>
                    <serviceCertificate></serviceCertificate>
                  </clientSsl>
                </applicationProfile>
                <pool>
                  <poolId></poolId>
                  <name></name>
                  <description></description>
                  <transparent></transparent>
                  <algorithm></algorithm>
                  <monitorId></monitorId>
                  <member>
                    <memberId></memberId>
                    <ipAddress></ipAddress>
                    <weight></weight>
                    <port></port>
                    <monitorPort></monitorPort>
                    <minConn></minConn>
                    <maxConn></maxConn>
                    <name></name>
                  </member>
                </pool>
                <monitor>
                  <monitorId></monitorId>
                  <type></type>
                  <interval></interval>
                  <timeout></timeout>
                  <maxRetries></maxRetries>
                  <method></method>
                  <url></url>
                  <name></name>
                </monitor>
                <applicationRule>
                  <name></name>
                  <script></script>
                </applicationRule>
              </loadBalancer>
            schema: loadBalancerConfig
      delete:
        displayName: loadBalancerDelete
        description: Delete load balancer configuration
      /applicationprofiles:
        displayName: applicationProfiles
        description: |
          Application profiles define the behavior of a particular type of
          network traffic
        post:
          displayName: applicationProfilesCreate
          description: Add an application profile
          body:
            application/xml:
              example: |
                <applicationProfile>
                  <name></name>
                  <insertXForwardedFor></insertXForwardedFor>
                  <sslPassthrough></sslPassthrough>
                  <persistence>
                    <method></method>
                    <cookieName></cookieName>
                    <cookieMode></cookieMode>
                  </persistence>
                </applicationProfile>
              schema: applicationProfilesCreate
        get:
          displayName: applicationProfilesRead
          description: Retrieve all application profiles on Edge
        delete:
          displayName: applicationProfilesDelete
          description: Delete all application profiles
        /{appProfileID}:
          displayName: applicationProfile
          description: Modify or retrieve an application profile
          uriParameters:
            appProfileID:
              required: true
              displayName: appProfileID
              description: Specified application profile
          put:
            displayName: applicationProfileUpdate
            description: Modify an application profile
            body:
              application/xml:
                example: |
                  <applicationProfile>
                    <name></name>
                    <insertXForwardedFor></insertXForwardedFor>
                    <sslPassthrough></sslPassthrough>
                    <persistence>
                      <method></method>
                      <cookieName></cookieName>
                      <cookieMode></cookieMode>
                    </persistence>
                  </applicationProfile>
                schema: applicationProfileUpdate
          get:
            displayName: applicationProfileRead
            description: Retrieve an application profile
          delete:
            displayName: applicationProfileDelete
            description: Delete an application profile
      /applicationrules:
        displayName: appRules
        description: |
          Manage application rules that directly manipulate and manage IP app
          traffic
        post:
          displayName: appRulesCreate
          description: Add an application rule
          body:
            application/xml:
              example: |
                <applicationRule>
                  <name></name>
                  <script></script>
                </applicationRule>
              schema: appRulesCreate
        get:
          displayName: appRulesRead
          description: Read all application rules
        delete:
          displayName: appRulesDelete
          description: Delete all application rules
        /{appruleID}:
          displayName: appRule
          description: Application rule
          uriParameters:
            appruleID:
              required: true
              displayName: appruleID
              description: Specified application rule
          get:
            displayName: appRuleRead
            description: Retrieve an application rule
          put:
            displayName: appRuleUpdate
            description: Modify an app rule
            body:
              application/xml:
                example: |
                  <applicationRule>
                    <name></name>
                    <script></script>
                  </applicationRule>
                schema: appRuleUpdate
          delete:
            displayName: appRuleDelete
            description: Delete an application rule
      /monitors:
        displayName: lbMonitors
        description: |
          Load balancer monitors define health check parameters for a
          particular type of network traffic
        post:
          displayName: lbMonitorsCreate
          description: Add a load balancer monitor
          body:
            application/xml:
              example: |
                <monitor>
                  <type></type>
                  <interval></interval>
                  <timeout></timeout>
                  <maxRetries></maxRetries>
                  <method></method>
                  <url></url>
                  <name></name>
                </monitor>
              schema: lbMonitorsCreate
        get:
          displayName: lbMonitorsRead
          description: Retrieve all load balancer monitors
        delete:
          displayName: lbMonitorsDelete
          description: Delete all load balancer monitors
        /{monitorID}:
          displayName: lbMonitor
          description: Specific load balancer monitor
          uriParameters:
            monitorID:
              required: true
              displayName: monitorID
              description: Specified monitor
          get:
            displayName: lbMonitorRead
            description: Retrieve a load balancer monitor
          put:
            displayName: lbMonitorUpdate
            description: Modify a load balancer monitor
            body:
              application/xml:
                example: |
                  <monitor>
                    <type></type>
                    <interval></interval>
                    <timeout></timeout>
                    <maxRetries></maxRetries>
                    <method></method>
                    <url></url>
                    <name></name>
                  </monitor>
                schema: lbMonitorUpdate
          delete:
            displayName: lbMonitorDelete
            description: Delete a load balancer monitor
      /virtualservers:
        displayName: virtualServers
        description: |
          Working with virtual servers.
        post:
          displayName: virtualServersCreate
          description: |
            Add a virtual server.
            ___
            You can add an NSX Edge internal or uplink interface as a virtual
            server.
            ___
            | Name | Required | Comments |
            |----------------|----------|----------|
            | **name** | yes | |
            | **description** | no | |
            | **enabled** | no | default is true |
            | **ipAddress** | yes | |
            | **protocol** | yes | Possible values are *HTTP*, *HTTPS*, *TCP*, or *UDP*.|
            | **port** | yes | A single port, a comma separate list, a range, or a combination. For example, *443,6000-7000*. |
            | **connectionLimit** | no | Maximum concurrent connections |
            | **connectionRateLimit** | no | Maximum incoming new connection requests per second |
            | **defaultPoolId** | no | The default backend server pool identifier |
            | **applicationProfileId** | no | The application profile identifier |
            | **accelerationEnabled** | no | Use the faster L4 load balancer engine rather than L7 load balancer engine. <br>**Note:**  If a virtual server configuration such as application rules, HTTP type, or cookie persistence, is using the L7 load balancer engine, then the L7 load balancer engine is used, even if **accelerationEnabled** is not set to true.|
            | **applicationRuleId** | no | The application rule identifier list |
            ___
          responses:
            200:
              description: !include documentation/reuse/status-codes/200
              body:
                application/xml:
                  example: |
                    <virtualServer>
                      <name>http_vip_2</name>
                      <description>http virtualServer 2</description>
                      <enabled>true</enabled>
                      <ipAddress>10.117.35.172</ipAddress>
                      <protocol>http</protocol>
                      <port>443,6000-7000</port>
                      <connectionLimit>123</connectionLimit>
                      <connectionRateLimit>123</connectionRateLimit>
                      <applicationProfileId>applicationProfile-1</applicationProfileId>
                      <defaultPoolId>pool-1</defaultPoolId>
                      <enableServiceInsertion>false</enableServiceInsertion>
                      <accelerationEnabled>true</accelerationEnabled>
                    </virtualServer>
                  schema: virtualServersCreate
            400:
              description: !include documentation/reuse/status-codes/400
            403:
              description: !include documentation/reuse/status-codes/403
            404:
              description: !include documentation/reuse/status-codes/404
            505:
              description: !include documentation/reuse/status-codes/505
        get:
          displayName: virtualServersRead
          description: Retrieve all virtual servers
        delete:
          displayName: virtualServersDelete
          description: Delete all
        /{virtualserverID}:
          displayName: virtualServer
          description: Specified virtual server
          uriParameters:
            virtualserverID:
              required: true
              displayName: virtualserverID
              description: Specified virtual server ID
          get:
            displayName: virtualServerRead
            description: Retrieve virtual server details
          delete:
            displayName: virtualServerDelete
            description: Delete a virtual server
      /pools:
        displayName: pools
        description: |
          Server pools manage load balancer distribution methods and has a
          monitor attached to it for health check parameters
        post:
          displayName: poolsCreate
          description: Add a load balancer server pool to the Edge
          body:
            application/xml:
              example: |
                <pool>
                  <name></name>
                  <description></description>
                  <transparent></transparent>
                  <algorithm></algorithm>
                  <monitorId></monitorId>
                  <member>
                    <ipAddress></ipAddress>
                    <weight></weight>
                    <port></port>
                    <minConn></minConn>
                    <maxConn></maxConn>
                    <name></name>
                    <monitorPort></monitorPort>
                  </member>
                </pool>
              schema: poolsCreate
        get:
          displayName: poolsRead
          description: Get all backend pools for the specified NSX Edge
        delete:
          displayName: poolsDelete
          description: |
            Delete all backend pools configured on the specified NSX Edge
        /{poolID}:
          displayName: pool
          description: Specific backend pool
          uriParameters:
            poolID:
              required: true
              displayName: poolID
              description: Specified pool ID
          get:
            displayName: poolRead
            description: Get backend pool details
          put:
            displayName: poolUpdate
            description: Modify the specified pool
            body:
              application/xml:
                example: |
                  <pool>
                    <name></name>
                    <description></description>
                    <transparent></transparent>
                    <algorithm></algorithm>
                    <monitorId></monitorId>
                    <member>
                      <ipAddress></ipAddress>
                      <weight></weight>
                      <port></port>
                      <minConn></minConn>
                      <maxConn></maxConn>
                      <name></name>
                      <monitorPort></monitorPort>
                    </member>
                  </pool>
                schema: poolUpdate
          delete:
            displayName: poolDelete
            description: Delete backend pool
      /members/{memberID}:
        displayName: lbMemberCond
        description: Load balancer member condition
        uriParameters:
          memberID:
            required: true
            displayName: memberID
            description: Member ID
        post:
          displayName: lbMemberCond
          description: Update member condition
          queryParameters:
            enable:
              required: true
              displayName: enable
              type: boolean
              description: Enable or disable member condition
    /loadbalancer/statistics:
      displayName: lbStatistics
      description: Load balancer statistics
      get:
        displayName: lbStatisticsRead
        description: Retrieve load balancer statistics
    /loadbalancer/acceleration:
      displayName: lbAcceleration
      description: Update acceleration mode
      post:
        queryParameters:
          enable:
            required: true
            displayName: enable
            description: Enable or disable load balancer acceleration mode
            type: boolean
    /dns/config:
      displayName: edgeDns
      description: |
        Configure DNS servers to which the Edge can relay name resolution
        requests
      get:
        displayName: edgeDnsRead
        description: Retrieve DNS configuration
      put:
        displayName: edgeDnsUpdate
        description: Configure DNS servers
        body:
          application/xml:
            example: |
              <dns>
                <enabled></enabled>
                <dnsServers>
                  <ipAddress></ipAddress>
                </dnsServers>
                <cacheSize></cacheSize>
                <listeners>
                  <ipAddress></ipAddress>
                </listeners>
                <logging>
                  <logLevel></logLevel>
                  <enable></enable>
                </logging>
              </dns>
            schema: edgeDnsUpdate
      delete:
        displayName: edgeDnsDelete
        description: Delete DNS configuration
    /dns/statistics:
      displayName: edgeDnsStats
      description: Get DNS server statistics
      get:
        displayName: edgeDnsStats
        description: Get DNS server statistics
    /dhcp/config:
      displayName: dhcp
      description: Configure DHCP for NSX Edge
      get:
        displayName: dhcpRead
        description: Get DHCP configuration
      put:
        displayName: dhcpUpdate
        description: Configure DHCP service
        body:
          application/xml:
            example: |
              <dhcp>
                <enabled></enabled>
                <staticBindings>
                  <staticBinding>
                    <macAddress></macAddress>
                    <vmId></vmId>
                    <vnicId></vnicId>
                    <hostname></hostname>
                    <ipAddress></ipAddress>
                    <subnetMask></subnetMask>
                    <defaultGateway></defaultGateway>
                    <domainName></domainName>
                    <primaryNameServer></primaryNameServer>
                    <secondaryNameServer></secondaryNameServer>
                    <leaseTime></leaseTime>
                    <autoConfigDNS></autoConfigDNS>
                  </staticBinding>
                </staticBindings>
                <ipPools>
                  <ipPool>
                    <ipRange></ipRange>
                    <defaultGateway></defaultGateway>
                    <subnetMask></subnetMask>
                    <domainName></domainName>
                    <primaryNameServer></primaryNameServer>
                    <secondaryNameServer></secondaryNameServer>
                    <leaseTime></leaseTime>
                    <autoConfigDNS></autoConfigDNS>
                  </ipPool>
                </ipPools>
                <logging>
                  <enable></enable>
                  <logLevel></logLevel>
                </logging>
              </dhcp>
            schema: dhcpUpdate
      delete:
        displayName: dhcpDelete
        description: |
          Delete the DHCP configuration, restoring it to factory default
      /ippools:
        displayName: dhcpPool
        description: Adding IP pools to DHCP configuration
        post:
          displayName: dhcpPoolCreate
          description: |
            Add an IP pool to the DHCP configuration. returns a pool ID within
            a Location HTTP header
          body:
            application/xml:
              example: |
                <ipPool>
                  <ipRange></ipRange>
                  <defaultGateway></defaultGateway>
                  <domainName></domainName>
                  <primaryNameServer></primaryNameServer>
                  <secondaryNameServer></secondaryNameServer>
                  <leaseTime></leaseTime>
                  <autoConfigureDNS></autoConfigureDNS>
                </ipPool>
              schema: dhcpPoolCreate
        /{poolID}:
          displayName: dhcpPoolID
          description: Specific DHCP pool
          uriParameters:
            poolID:
              required: true
              displayName: poolID
              description: Specified DHCP IP pool
          delete:
            displayName: dhcpPoolIDDelete
            description: Delete a pool specified by pool ID
      /bindings:
        displayName: dhcpStaticBinding
        description: Adding static-binding to DHCP configuration.
        post:
          displayName: dhcpStaticBindingCreate
          description: |
            Append a static-binding to DHCP config. A static-binding ID is
            returned within a Location HTTP header
          body:
            application/xml:
              example: |
                <staticBinding>
                  <vmId></vmId>
                  <vnicId></vnicId>
                  <hostname></hostname>
                  <ipAddress></ipAddress>
                  <defaultGateway></defaultGateway>
                  <domainName></domainName>
                  <primaryNameServer></primaryNameServer>
                  <secondaryNameServer></secondaryNameServer>
                  <leaseTime></leaseTime>
                  <autoConfigureDNS></autoConfigureDNS>
                </staticBinding>
              schema: dhcpStaticBindingCreate
        /{bindingID}:
          displayName: dhcpStaticBindingID
          description: Specific DHCP static binding
          uriParameters:
            bindingID:
              required: true
              displayName: bindingID
              description: Specified static-binding ID
          delete:
            displayName: dhcpStaticBindingIDDelete
            description: Delete the static-binding by ID
      /relay:
        displayName: dhcpRelay
        description: Configure DHCP relay
        get:
          displayName: dhcpRelayRead
          description: Query DHCP relay
        put:
          displayName: dhcpRelayUpdate
          description: Configure DHCP relay
          body:
            application/xml:
              example: |
                <relay>
                  <relayServer>
                    <groupingObjectId></groupingObjectId>
                    <groupingObjectId></groupingObjectId>
                    <ipAddress></ipAddress>
                    <fqdn></fqdn>
                  </relayServer>
                  <relayAgents>
                    <relayAgent>
                      <vnicIndex></vnicIndex>
                      <giAddress></giAddress>
                    </relayAgent>
                  </relayAgents>
                </relay>
              schema: dhcpRelayUpdate
        delete:
          displayName: dhcpRelayDelete
          description: Delete DHCP relay configuration
    /dhcp/leaseInfo:
      displayName: dhcpLease
      description: DHCP Lease information
      get:
        displayName: dhcpLeaseRead
        description: Get DHCP lease information
    /highavailability/config:
      displayName: highAvailability
      description: |
        Ensures that an Edge appliance is always available on your virtualized
        network.
      get:
        displayName: highAvailabilityRead
        description: Get high availability configuration
      put:
        displayName: highAvailabilityCreate
        description: Configure high availability
        body:
          application/xml:
            example: |
              <highAvailability>
                <vnic></vnic>
                <ipAddresses>
                  <ipAddress></ipAddress>
                </ipAddresses>
                <declareDeadTime></declareDeadTime>
                <enabled></enabled>
              </highAvailability>
            schema: highAvailabilityCreate
      delete:
        displayName: highAvailabilityDelete
        description: Delete high availability configuration
    /syslog/config:
      displayName: syslog
      description: |
        Configure one or two remote syslog servers. Edge events and logs
        related to firewall events that flow from Edge appliances are sent to
        the syslog servers
      get:
        displayName: syslogRead
        description: Query syslog servers
      put:
        displayName: syslogUpdate
        description: Configure syslog servers
        body:
          application/xml:
            example: |
              <syslog>
                <protocol></protocol>
                <serverAddresses>
                  <ipAddress></ipAddress>
                </serverAddresses>
              </syslog>
            schema: syslogUpdate
      delete:
        displayName: syslogDelete
        description: Delete syslog servers
    /sslvpn/config:
      displayName: sslVPN
      description: Manage SSL VPN
      post:
        displayName: sslVPNCreate
        description: Enable or disable SSL VPN
        queryParameters:
          enableService:
            displayName: enableService
            required: true
            description: Set to true to enable, false to disable
            type: boolean
      get:
        displayName: sslVPNRead
        description: Retrieve SSL VPN details
      put:
        displayName: sslVPNUpdate
        description: Reconfigure the entire SSL VPN
        body:
          application/xml:
            example: |
              <logonLogoffScript>
                <logonLogoffScript>
                  <objectId></objectId>
                  <scriptFileId></scriptFileId>
                  <type></type>
                  <enabled></enabled>
                  <description></description>
                </logonLogoffScript>
              </logonLogoffScript>
            schema: sslVPNUpdate
      delete:
        displayName: sslVPNDelete
        description: Delete the SSL VPN configurations on the Edge
      /server:
        displayName: serverSettings
        description: |
          Configure SSL VPN server on port 443 using the certificate named
          server-cert that is already uploaded on the NSX Edge appliance and
          the specified cipher
        get:
          displayName: serverSettingsRead
          description: Get server settings
        put:
          displayName: serverSettingsUpdate
          description: Apply server settings
          body:
            application/xml:
              example: |
                <serverSettings>
                  <serverAddresses>
                    <ipAddress></ipAddress>
                  </serverAddresses>
                  <port></port>
                  <certificateId></certificateId>
                  <sslVersionList>
                    <version></version>
                  </sslVersionList>
                </serverSettings>
              schema: serverSettingsUpdate
      /client/networkextension/privatenetworks:
        displayName: privateNetworks
        description: |
          Configure a private network to expose to remote users over SSL VPN
          tunnel
        post:
          displayName: privateNetworksCreate
          description: Add a private network
          body:
            application/xml:
              example: |
                <privateNetwork>
                  <description></description>
                  <network></network>
                  <sendOverTunnel>
                    <ports></ports>
                    <optimize></optimize>
                  </sendOverTunnel>
                  <enabled></enabled>
                </privateNetwork>
              schema: privateNetworksCreate
        get:
          displayName: privateNetworksRead
          description: Get all private network profiles in the SSL VPN instance
        put:
          displayName: privateNetworksUpdate
          description: |
            Update all private network configs of NSX Edge with the given list
            of private network configs. If the config is present, it is
            updated; otherwise, a new private network config is created.
            Existing configs not included in the call body are deleted
        delete:
          displayName: privateNetworksDelete
          description: Delete all Private Networks from the SSL VPN instance
        /{networkID}:
          displayName: privateNetwork
          description: Specific private network
          uriParameters:
            networkID:
              required: true
              displayName: networkID
              description: Specified private network
          get:
            displayName: privateNetworkRead
            description: |
              Get the specified private network in the SSL VPN service
          put:
            displayName: privateNetworkUpdate
            description: Modify specified private network in the SSL VPN service
            body:
              application/xml:
                example: |
                  <privateNetwork>
                    <description></description>
                    <network></network>
                    <sendOverTunnel>
                      <ports></ports>
                      <optimize></optimize>
                    </sendOverTunnel>
                    <enabled></enabled>
                  </privateNetwork>
                schema: privateNetworkUpdate
          delete:
            displayName: privateNetworkDelete
            description: Delete private network
      /client/networkextension/ippools:
        displayName: netExtIpPools
        description: IP pools to assign IP addresses to remote users
        post:
          displayName: netExtipPoolsCreate
          description: Create an IP pool
          body:
            application/xml:
              example: |
                <ipAddressPool>
                  <description></description>
                  <ipRange></ipRange>
                  <netmask></netmask>
                  <gateway></gateway>
                  <primaryDns></primaryDns>
                  <secondaryDns></secondaryDns>
                  <dnsSuffix></dnsSuffix>
                  <winsServer></winsServer>
                  <enabled></enabled>
                </ipAddressPool>
              schema: netExtipPoolsCreate
        get:
          displayName: netExtipPoolsRead
          description: Get all IP pools configured on SSL VPN
        put:
          displayName: netExtipPoolsUpdate
          description: |
            Update all IP pools with the given list of pools. If the pool is
            present, it is updated; otherwise, a new pool is created. Existing
            pools not in the body are deleted
          body:
            application/xml:
              example: |
                <ipAddressPool>
                  <description></description>
                  <ipRange></ipRange>
                  <netmask></netmask>
                  <gateway></gateway>
                  <primaryDns></primaryDns>
                  <secondaryDns></secondaryDns>
                  <dnsSuffix></dnsSuffix>
                  <winsServer></winsServer>
                  <enabled></enabled>
                </ipAddressPool>
              schema: netExtipPoolsUpdate
        delete:
          displayName: netExtipPoolsDelete
          description: Delete all IP pools configured on SSL VPN
        /{ippoolID}:
          displayName: netExtipPool
          description: Specified IP pool
          uriParameters:
            ippoolID:
              required: true
              displayName: ipPoolID
              description: Specified IP pool ID
          get:
            displayName: netExtipPoolRead
            description: Get details of specified IP pool
          put:
            displayName: netExtipPoolUpdate
            description: Modify specified IP pool
          delete:
            displayName: netExtipPoolDelete
            description: Delete the specified IP pool
      /client/networkextension/clientconfig:
        displayName: clientConfig
        description: |
          Advanced parameters for full access client configurations--such as
          whether client should auto-reconnect in case of network failures or
          network unavailability, or whether the client should be uninstalled
          after logout
        put:
          displayName: clientConfigUpdate
          description: Set parameters for full access client configurations
          body:
            application/xml:
              example: |
                <clientConfiguration>
                  <autoReconnect></autoReconnect>
                  <fullTunnel>
                    <excludeLocalSubnets></excludeLocalSubnets>
                    <gatewayIp></gatewayIp>
                  </fullTunnel>
                  <upgradeNotification></upgradeNotification>
                </clientConfiguration>
              schema: clientConfigUpdate
        get:
          displayName: clientConfigRead
          description: Get client configuration
      /client/networkextension/installpackages:
        displayName: installPackages
        description: Installation packages for SSL VPN clients
        post:
          displayName: installPackagesCreate
          description: |
            Create installers for full access network clients. These setup
            binaries are downloaded by remote clients and installed on their
            systems.
          body:
            application/xml:
              example: |
                <clientInstallPackage>
                  <profileName></profileName>
                  <gatewayList>
                    <gateway>
                      <hostName></hostName>
                      <port></port>
                    </gateway>
                  </gatewayList>
                  <startClientOnLogon></startClientOnLogon>
                  <hideSystrayIcon></hideSystrayIcon>
                  <rememberPassword></rememberPassword>
                  <silentModeOperation></silentModeOperation>
                  <silentModeInstallation></silentModeInstallation>
                  <hideNetworkAdaptor></hideNetworkAdaptor>
                  <createDesktopIcon></createDesktopIcon>
                  <enforceServerSecurityCertValidation></enforceServerSecurityCertValidation>
                  <createLinuxClient></createLinuxClient>
                  <createMacClient></createMacClient>
                  <description></description>
                  <enabled></enabled>
                </clientInstallPackage>
              schema: installPackagesCreate
        get:
          displayName: installPackagesRead
          description: Get information about all installation packages
        put:
          displayName: installPackagesUpdate
          description: |
            Update all installation packages with the given list. If the
            package is present, it is updated; otherwise a new installation
            package is created. Existing packages not included in the body are
            deleted.
        delete:
          displayName: installPackagesDelete
          description: Delete all client installation packages
        /{packageID}:
          displayName: installPackage
          description: Specified installation package
          uriParameters:
            packageID:
              required: true
              displayName: packageID
              description: Specified installation package ID
          get:
            displayName: installPackageRead
            description: |
              Get information about the specified installation package
          put:
            displayName: installPackageUpdate
            description: Modify the specified installation package
            body:
              application/xml:
                example: |
                  <clientInstallPackage>
                    <profileName></profileName>
                    <gatewayList>
                      <gateway>
                        <hostName></hostName>
                        <port></port>
                      </gateway>
                    </gatewayList>
                    <startClientOnLogon></startClientOnLogon>
                    <hideSystrayIcon></hideSystrayIcon>
                    <rememberPassword></rememberPassword>
                    <silentModeOperation></silentModeOperation>
                    <silentModeInstallation></silentModeInstallation>
                    <hideNetworkAdaptor></hideNetworkAdaptor>
                    <createDesktopIcon></createDesktopIcon>
                    <enforceServerSecurityCertValidation></enforceServerSecurityCertValidation>
                    <createLinuxClient></createLinuxClient>
                    <createMacClient></createMacClient>
                    <description></description>
                    <enabled></enabled>
                  </clientInstallPackage>
                schema: installPackageUpdate
          delete:
            displayName: installPackageDelete
            description: Delete the specified installation package
      /layout:
        displayName: layout
        description: Layout configuration
        get:
          displayName: layoutRead
          description: Query layout configuration
        /images:
          put:
            displayName: layoutUpdate
            description: Set the portal layout
            body:
              application/xml:
                example: |
                  <layout>
                    <portalTitle></portalTitle>
                    <companyName></companyName>
                    <logoBackgroundColor></logoBackgroundColor>
                    <titleColor></titleColor>
                    <topFrameColor></topFrameColor>
                    <menuBarColor></menuBarColor>
                    <rowAlternativeColor></rowAlternativeColor>
                    <bodyColor></bodyColor>
                    <rowColor></rowColor>
                  </layout>
                schema: layoutUpdate
      /webresources:
        displayName: webResources
        description: |
          Web access server that a remote user can connect to via a web browser
        post:
          displayName: webResourcesCreate
          description: Add portal web resource
          body:
            application/xml:
              example: |
                <webResource>
                  <name></name>
                  <url></url>
                  <method name="">
                    <data></data>
                  </method>
                  <description></description>
                  <enabled></enabled>
                </webResource>
              schema: webResourcesCreate
        get:
          displayName: webResourcesRead
          description: Get all web resources on the SSL VPN instance
        delete:
          displayName: webResourcesDelete
          description: Delete all web resources on the SSL VPN instance
        /{id}:
          displayName: webResource
          description: Specified web access server
          uriParameters:
            id:
              displayName: id
              description: ID of specified web access server
              required: true
          get:
            displayName: webResourceRead
            description: Get the specified web access server
          put:
            displayName: webResourceUpdate
            description: Modify the specified web access server
          delete:
            displayName: webResourceDelete
            description: Delete the specified web access server
      /auth/localserver/users:
        displayName: sslVPNUsers
        description: Portal users
        post:
          displayName: usersCreate
          description: Add a new portal user
          body:
            application/xml:
              example: |
                <user>
                  <userId></userId>
                  <password></password>
                  <firstName></firstName>
                  <lastName></lastName>
                  <description></description>
                  <disableUserAccount></disableUserAccount>
                  <passwordNeverExpires></passwordNeverExpires>
                  <allowChangePassword>
                    <changePasswordOnNextLogin></changePasswordOnNextLogin>
                  </allowChangePassword>
                </user>
              schema: usersCreate
        put:
          displayName: usersUpdate
          description: Modify the specified portal user
          body:
            application/xml:
              example: |
                <user>
                  <userId></userId>
                  <password></password>
                  <firstName></firstName>
                  <lastName></lastName>
                  <description></description>
                  <disableUserAccount></disableUserAccount>
                  <passwordNeverExpires></passwordNeverExpires>
                  <allowChangePassword>
                    <changePasswordOnNextLogin></changePasswordOnNextLogin>
                  </allowChangePassword>
                </user>
              schema: usersUpdate
        delete:
          displayName: usersDelete
          description: Delete all users on the specifed SSL VPN instance
        /{userID}:
          displayName: user
          description: Specified user
          get:
            displayName: userRead
            description: Get information about a specified user
          delete:
            displayName: userDelete
            description: Delete specified user
      /auth/settings:
        displayName: authSettings
        description: Authentication settings
        get:
          displayName: authSettingsRead
          description: Get information about authentication server
        put:
          displayName: authSettingsUpdate
          description: |
            Set authentication process for remote users. Specify
            username/password authentication, active directory, ldap, radius,
            client certificate based authentication
          body:
            application/xml:
              example: |
                <authenticationConfig>
                  <passwordAuthentication>
                  <authenticationTimeout></authenticationTimeout>
                    <primaryAuthServers>
                      <com.vmware.vshield.edge.sslvpn.dto.LdapAuthServerDto>
                        <ip></ip>
                        <port></port>
                        <timeOut></timeOut>
                        <enableSsl></enableSsl>
                        <searchBase></searchBase>
                        <bindDomainName></bindDomainName>
                        <bindPassword></bindPassword>
                        <loginAttributeName></loginAttributeName>
                        <searchFilter></searchFilter>
                        <enabled></enabled>
                      </com.vmware.vshield.edge.sslvpn.dto.LdapAuthServerDto>
                      <com.vmware.vshield.edge.sslvpn.dto.RadiusAuthServerDto>
                        <ip></ip>
                        <port></port>
                        <timeOut></timeOut>
                        <secret></secret>
                        <nasIp></nasIp>
                        <retryCount></retryCount>
                      </com.vmware.vshield.edge.sslvpn.dto.RadiusAuthServerDto>
                      <com.vmware.vshield.edge.sslvpn.dto.LocalAuthServerDto>
                        <enabled></enabled>
                        <passwordPolicy>
                          <minLength></minLength>
                          <maxLength></maxLength>
                          <minAlphabets></minAlphabets>
                          <minDigits></minDigits>
                          <minSpecialChar></minSpecialChar>
                          <allowUserIdWithinPassword></allowUserIdWithinPassword>
                          <passwordLifeTime></passwordLifeTime>
                          <expiryNotification></expiryNotification>
                        </passwordPolicy>
                        <accountLockoutPolicy>
                          <retryCount></retryCount>
                          <retryDuration></retryDuration>
                          <lockoutDuration></lockoutDuration>
                        </accountLockoutPolicy>
                      </com.vmware.vshield.edge.sslvpn.dto.LocalAuthServerDto>
                      <com.vmware.vshield.edge.sslvpn.dto.RsaAuthServerDto>
                        <timeOut></timeOut>
                        <sourceIp></sourceIp>
                      </com.vmware.vshield.edge.sslvpn.dto.RsaAuthServerDto>
                    </primaryAuthServers>
                    <secondaryAuthServer>
                      <com.vmware.vshield.edge.sslvpn.dto.AdAuthServerDto>
                        <ip>1.1.1.1</ip>
                        <port>90</port>
                        <timeOut>20</timeOut>
                        <enableSsl>false</enableSsl>
                        <searchBase>searchbasevalue</searchBase>
                        <bindDomainName>binddnvalue</bindDomainName>
                        <bindPassword>password</bindPassword>
                        <loginAttributeName>cain</loginAttributeName>
                        <searchFilter>found</searchFilter>
                        <terminateSessionOnAuthFails>false</terminateSessionOnAuthFails>
                        <enabled>true</enabled>
                      </com.vmware.vshield.edge.sslvpn.dto.AdAuthServerDto>
                    </secondaryAuthServer>
                  </passwordAuthentication>
                </authenticationConfig>
              schema: authSettingsUpdate
        /rsaconfigfile:
          displayName: rsaConfig
          description: RSA authentication server, bound to the SSL gateway
          post:
            displayName: rsaConfigCreate
            description: |
              Upload RSA config file (See "Generate the Authentication Manager
              Configuration File" section of the RSA Authentication Manager
              Administrator's guide for instructions on how to configure and
              download the RSA config file from RSA Authentication Manager)
      /advancedconfig:
        displayName: advancedConfig
        description: SSL VPN advanced configuration
        get:
          displayName: advancedConfigRead
          description: Retrieve SSL VPN advanced configuration
        put:
          displayName: advancedConfigUpdate
          description: Apply advanced configuration
          body:
            application/xml:
              example: |
                <advancedConfig>
                  <enableCompression></enableCompression>
                  <forceVirtualKeyboard></forceVirtualKeyboard>
                  <preventMultipleLogon></preventMultipleLogon>
                  <randomizeVirtualkeys></randomizeVirtualkeys>
                  <timeout>
                    <forcedTimeout></forcedTimeout>
                    <sessionIdleTimeout></sessionIdleTimeout>
                  </timeout>
                  <clientNotification></clientNotification>
                  <enablePublicUrlAccess></enablePublicUrlAccess>
                  <enableLogging></enableLogging>
                </advancedConfig>
              schema: advancedConfigUpdate
      /script:
        displayName: script
        description: Logon and logoff scripts for NSX Edge gateway
        post:
          displayName: scriptCreate
          description: Configure parameters associated with the uploaded script file
          body:
            application/xml:
              example: |
                <logonLogoffScript>
                  <scriptFileId></scriptFileId>
                  <type></type>
                  <description></description>
                  <enabled></enabled>
                </logonLogoffScript>
              schema: scriptCreate
        get:
          displayName: scriptRead
          description: Retrieve all script configurations for the Edge
        put:
          displayName: scriptUpdate
          description: |
            Update all script configurations with the given list of
            configurations. If the config is present, its is updated;
            otherwise, a new config is created. Existing configs not included
            in the body are deleted
          body:
            application/xml:
              example: |
                <logonLogoffScript>
                  <scriptFileId></scriptFileId>
                  <type></type>
                  <description></description>
                  <enabled></enabled>
                </logonLogoffScript>
              schema: scriptUpdate
        delete:
          displayName: scriptDelete
          description: Delete all script configurations
        /{fileID}:
          displayName: scriptFileID
          description: Specified uploaded script file
          uriParameters:
            fileID:
              required: true
              displayName: fileID
              description: Specified script file
          get:
            displayName: scriptFileIDRead
            description: |
              Retrieve parameters associated with the specified script file
          put:
            displayName: scriptFileIDUpdate
            description: Modify script parameters
            body:
              application/xml:
                example: |
                  <logonLogoffScript>
                    <scriptFileId></scriptFileId>
                    <type></type>
                    <description></description>
                    <enabled></enabled>
                  </logonLogoffScript>
                schema: scriptFileIDUpdate
          delete:
            displayName: scriptFileIDDelete
            description: Delete script parameters
        /file: # PDF pg 238
          displayName: scriptFile
          description: Logon and logoff scripts for NSX Edge gateway
          post:
            displayName: scriptFileCreate
            description: |
              Upload a login/logoff script. Returns a script file ID to
              configure the parameters
    /sslvpn/auth/localusers/users:
      displayName: allUsers
      description: All users of NSX Edge
      put:
        displayName: allUsersUpdate
        description: |
          Update all users with the given list of users. If the user is
          present, it is updated. Otherwise, and new user is created. Existing
          users not included in the body are deleted.
        body:
          application/xml:
            example: |
              <users>
                <user>
                  <userId></userId>
                  <password></password>
                  <firstName></firstName>
                  <lastName></lastName>
                  <description></description>
                  <disableUserAccount></disableUserAccount>
                  <passwordNeverExpires></passwordNeverExpires>
                  <allowChangePassword>
                    <changePasswordOnNextLogin></changePasswordOnNextLogin>
                  </allowChangePassword>
                </user>
              </users>
            schema: allUsersUpdate
    /sslvpn/activesessions:
      displayName: sslVPNActiveClients
      description: Working with active clients
      get:
        displayName: sslVPNActiveClientsRead
        description: Retrieve a list of active clients for the SSL VPN session
      /{sessionID}:
        displayName: session
        description: Specified client session
        uriParameters:
          sessionID:
            required: true
            displayName: sessionID
            description: Specified client session
        delete:
          displayName: sessionDelete
          description: Disconnect an active client
    /statistics/dashboard/sslvpn:
      displayName: sslVPNStats
      description: SSL VPN statistics on the specified NSX Edge
      get:
        displayName: sslVPNStatsRead
        description: Retrieve SSL VPN statistics on the specified NSX Edge
        queryParameters:
          interval:
            displayName: interval
            description: |
              Specify a range; can be 1 - 60 minutes, or oneDay|oneWeek|
              oneMonth|oneYear. Default is 60 minutes
    /statistics/dashboard/ipsec:
      displayName: ipsecTrafficStats
      description: Tunnel traffic statistics
      get:
        displayName: ipsecTrafficStatsRead
        description: |
          Retrieve tunnel traffic statistics for specified time interval.
          Default is 1 hour. Other possible values are 1-60 minutes|oneDay|
          oneWeek|oneMonth|oneYear
    /statistics/dashboard/interface:
      displayName: vnicDashStats
      description: Dashboard statistics
      get:
        displayName: vnicDashStatsRead
        description: |
          Retrieve dashboard statistics between the specified start and end
          times.
        queryParameters:
          interval:
            required: true
            displayName: interval
            description: Specify a start and end time range in seconds
    /statistics/interfaces:
      displayName: vnicStats
      description: Interface statistics
      get:
        displayName: vnicStatsRead
        description: Get interface statistics
      /uplink:
        displayName: uplinkVNICStats
        description: Uplink interface statistics
        get:
          displayName: uplinkVNICStatsRead
          description: Get uplink interface statistics
      /internal:
        displayName: internalVNICStats
        description: Internal interface statistics
        get:
          displayName: internalVNICStatsRead
          description: Get internal interface statistics
    /l2vpn/config:
      displayName: l2VPN
      description: |
        L2 VPN allows you to configure a tunnel between two sites. VM's remain
        on the same subnet in spite of being moved between these sites,
        enabling you to extend your datacenter. An NSX Edge at one site can
        provide all services to VM's on the other site.
      post:
        displayName: l2VPNCreate
        description: |
          Enable or disable L2 VPN service according to the value of the query
          parameter "enableService"
        queryParameters:
          enableService:
            required: true
            displayName: enableService
            description: Enable or disable L2 VPN
            type: boolean
      get:
        displayName: l2VPNRead
        description: Retrieve the current L2VPN configuration for NSX Edge
      put:
        displayName: l2VPNUpdate
        description: Configure L2VPN for server or client
        body:
          application/xml:
            example: |
              <l2Vpn>
                <enabled>true</enabled>
                <logging>
                  <enable>false</enable>
                  <logLevel>info</logLevel>
                  </logging>
                  <l2VpnSites>
                  <l2VpnSite>
                    <server>
                      <configuration>
                        <listenerIp></listenerIp>
                        <listenerPort></listenerPort>
                        <encryptionAlgorithm></encryptionAlgorithm>
                        <serverCertificate></serverCertificate>
                        <peerSites>
                          <peerSite>
                            <name></name>
                            <description></description>
                            <l2VpnUser>
                              <userId></userId>
                              <password></password>
                            </l2VpnUser>
                            <vnics>
                              <index></index>
                            </vnics>
                            <egressOptimization>
                              <gatewayIpAddress></gatewayIpAddress>
                            </egressOptimization>
                            <enabled></enabled>
                          </peerSite>
                        </peerSites>
                      </configuration>
                    </server>
                  </l2VpnSite>
                </l2VpnSites>
              </l2Vpn>
      delete:
        displayName: l2VPNDelete
        description: Delete L2 VPN
      /statistics:
        displayName: statistics
        description: L2 VPN statistics
        get:
          displayName: statisticsRead
          description: |
            Retrieve L2 VPN stats, which has information such as tunnel status,
            sent bytes, received bytes etc. for the given Edge
    /ipsec/config:
      displayName: ipsecConfig
      description: Working with IPSEC VPN
      get:
        displayName: ipsecConfigRead
        description: Retrieve IPSec configuration
      put:
        displayName: ipsecConfigUpdate
        description: Configure IPSEC VPN
        body:
          application/xml:
            example: |
              <ipsec>
                <enabled></enabled>
                <logLevel></logLevel>
                <enable></enable>
                <global>
                  <psk></psk>
                  <serviceCertificate></serviceCertificate>
                  <caCertificates>
                    <caCertificate></caCertificate>
                  </caCertificates>
                  <crlCertificates>
                    <crlCertificate></crlCertificate>
                  </crlCertificates>
                </global>
                <sites>
                  <site>
                    <enabled></enabled>
                    <name></name>
                    <description></description>
                    <localId></localId>
                    <localIp></localIp>
                    <peerId></peerId>
                    <peerIp></peerIp>
                    <encryptionAlgorithm></encryptionAlgorithm>
                    <authenticationMode>psk</authenticationMode>
                    <psk></psk>
                    <enablePfs></enablePfs>
                    <dhGroup></dhGroup>
                    <localSubnets>
                      <subnet></subnet>
                    </localSubnets>
                    <peerSubnets>
                      <subnet></subnet>
                    </peerSubnets>
                  </site>
                </sites>
              </ipsec>
      delete:
        displayName: ipsecConfigDelete
        description: Delete the IPSec configuration
    /ipsec/statistics:
      displayName: ipsecStats
      description: IPSec statistics
      get:
        displayName: ipsecStatsRead
        description: Retrieve IPSec statistics
    /autoconfiguration:
      displayName: autoConfig
      description: |
        Auto config is enabled by default. If you disable, you must add
        required NAT, firewall, routing rules
      get:
        displayName: autoConfigRead
        description: Retrieve auto config settings for the Edge
      put:
        displayName: autoConfigUpdate
        description: Change the auto configuration settings for the NSX Edge
        body:
          application/xml:
            example: |
              <autoConfiguration>
                <enabled></enabled>
                <rulePriority></rulePriority>
              </autoConfiguration>
            schema: autoConfigUpdate
    /appliances:
      displayName: appliances
      description: Working with Edge appliances
      post:
        displayName: appliancesCreate
        description: Change the size of both appliances
        queryParameters:
          size:
            required: true
            displayName: size
            description: set to compact|large|xlarge
      get:
        displayName: appliancesRead
        description: Retrieve appliance configuration
      put:
        displayName: appliancesUpdate
        description: |
          Modify appliance configuration (tip -- retrieve the config using GET
          call, then modify the parameters and send as body)
      /{haIndex}:
        displayName: appliance
        description: Manage a specified appliance using its HA index
        uriParameters:
          haIndex:
            required: true
            displayName: haIndex
            description: Specified appliance HA index
        get:
          displayName: applianceRead
          description: Get configuration of specified appliance
        put:
          displayName: applianceUpdate
          description: Modify the configuration of the specified appliance
          body:
            application/xml:
              example: |
                <appliance>
                  <resourcePoolId></resourcePoolId>
                  <datastoreId></datastoreId>
                  <hostId></hostId>
                  <vmFolderId></vmFolderId>
                  <customField>
                    <key></key>
                    <value></value>
                  </customField>
                  <cpuReservation>
                    <limit></limit>
                    <reservation></reservation>
                    <shares></shares>
                  </cpuReservation>
                  <memoryReservation>
                    <limit></limit>
                    <reservation></reservation>
                    <shares></shares>
                  </memoryReservation>
                </appliance>
              schema: applianceUpdate
        delete:
          displayName: applianceDelete
          description: Delete the appliance
    /vnics:
      displayName: vnics
      description: |
        Working with interfaces. Add up to ten internal/uplink interfaces to
        each Edge. Each Edge must have at least one internal interface
      post:
        displayName: vnicsCreate
        description: Add an interface or sub interface
        queryParameters:
          action:
            required: true
            displayName: action
            description: always set to "patch"
        body:
          application/xml:
            example: |
              <vnics>
                <vnic>
                  <name></name>
                  <addressGroups>
                    <addressGroup>
                      <primaryAddress></primaryAddress>
                      <secondaryAddresses>
                        <ipAddress></ipAddress>
                      </secondaryAddresses>
                      <subnetMask></subnetMask>
                    </addressGroup>
                  </addressGroups>
                  <mtu></mtu>
                  <type></type>
                  <index></index>
                  <portgroupId></portgroupId>
                  <portgroupName></portgroupName>
                  <macAddress>
                    <edgeVmHaIndex></edgeVmHaIndex>
                    <value></value>
                  </macAddress>
                  <fenceParameter>
                    <key></key>
                    <value></value>
                  </fenceParameter>
                  <enableProxyArp></enableProxyArp>
                  <enableSendRedirects></enableSendRedirects>
                  <enableBridgeMode></enableBridgeMode>
                  <isConnected></isConnected>
                  <inShapingPolicy>
                    <averageBandwidth></averageBandwidth>
                    <peakBandwidth></peakBandwidth>
                    <burstSize></burstSize>
                    <enabled></enabled>
                    <inherited></inherited>
                  </inShapingPolicy>
                  <outShapingPolicy>
                    <averageBandwidth></averageBandwidth>
                    <peakBandwidth></peakBandwidth>
                    <burstSize></burstSize>
                    <enabled></enabled>
                    <inherited></inherited>
                  </outShapingPolicy>
                </vnic>
              </vnics>
      get:
        displayName: vnicsRead
        description: Retrieve all interfaces for Edge
      /{index}:
        displayName: vnic
        description: Specified interface by index
        uriParameters:
          index:
            required: true
            displayName: index
            description: Specified interface
        get:
          displayName: vnicRead
          description: Retrieve interface
        put:
          displayName: vnicUpdate
          description: Modify the specified interface
          body:
            application/xml:
              example: |
                <vnics>
                  <vnic>
                    <name></name>
                    <addressGroups>
                      <addressGroup>
                        <primaryAddress></primaryAddress>
                        <secondaryAddresses>
                          <ipAddress></ipAddress>
                        </secondaryAddresses>
                        <subnetMask></subnetMask>
                      </addressGroup>
                    </addressGroups>
                    <mtu></mtu>
                    <type></type>
                    <index></index>
                    <portgroupId></portgroupId>
                    <portgroupName></portgroupName>
                    <macAddress>
                      <edgeVmHaIndex></edgeVmHaIndex>
                      <value></value>
                    </macAddress>
                    <fenceParameter>
                      <key></key>
                      <value></value>
                    </fenceParameter>
                    <enableProxyArp></enableProxyArp>
                    <enableSendRedirects></enableSendRedirects>
                    <enableBridgeMode></enableBridgeMode>
                    <isConnected></isConnected>
                    <inShapingPolicy>
                      <averageBandwidth></averageBandwidth>
                      <peakBandwidth></peakBandwidth>
                      <burstSize></burstSize>
                      <enabled></enabled>
                      <inherited></inherited>
                    </inShapingPolicy>
                    <outShapingPolicy>
                      <averageBandwidth></averageBandwidth>
                      <peakBandwidth></peakBandwidth>
                      <burstSize></burstSize>
                      <enabled></enabled>
                      <inherited></inherited>
                    </outShapingPolicy>
                  </vnic>
                </vnics>
        delete:
          displayName: vnicDelete
          description: Delete interface
    /mgmtinterface:
      displayName: mgmtInterface
      description: Working with management interfaces for an NSX Edge router
      get:
        displayName: mgmtInterfaceRead
        description: Retrieve all managedment interfaces to the NSX Edge router
      put:
        displayName: mgmtInterfaceUpdate
        description: Configure management interfaces for NSX Edge router
        body:
          application/xml:
            example: |
              <mgmtInterface>
                <addressGroups>
                  <addressGroup>
                    <primaryAddress></primaryAddress>
                    <subnetMask></subnetMask>
                  </addressGroup>
                </addressGroups>
                <mtu></mtu>
                <connectedToId></connectedToId>
              </mgmtInterface>
            schema: mgmtInterfaceUpdate
    /interfaces:
      displayName: interfaces
      description: Working with all NSX Edge router interfaces
      post:
        displayName: interfacesCreate
        description: |
          Add interfaces for NSX Edge router. Can have up to 8 uplink interfaces
        queryParameters:
          action:
            displayName: action
            required: true
            description: Always set to 'patch'
        body:
          application/xml:
            example: |
              <interfaces>
                <interface>
                  <name></name>
                  <addressGroups>
                    <addressGroup>
                      <primaryAddress></primaryAddress>
                      <subnetMask></subnetMask>
                    </addressGroup>
                  </addressGroups>
                  <mtu></mtu>
                  <type></type>
                  <isConnected></isConnected>
                  <connectedToId></connectedToId>
                </interface>
              </interfaces>
            schema: interfacesCreate
      get:
        displayName: interfacesRead
        description: Retrieve all interfaces for Edge router
      delete:
        displayName: interfacesDelete
        description: Delete interfaces
        queryParameters:
          index:
            displayName: index
            description: |
              Specify index of interface to delete
              (e.g. ?index=<index1>&index=<index2>). If no indices specified,
              all interfaces are deleted
      /{index}:
        displayName: interface
        description: Manage a specific NSX Edge router interface
        uriParameters:
          index:
            required: true
            displayName: index
            description: Specified router interface
        get:
          displayName: interfaceRead
          description: Retrieve information on specified DLR router interface
        delete:
          displayName: interfaceDelete
          description: |
            Delete interface configuration and reset to factory default
        put:
          displayName: interfaceUpdate
          description: |
            Update interface configuration on specified DLR router interface
  /jobs:
    displayName: nsxEdgeJobs
    description: NSX Edge async jobs
    get:
      displayName: nsxEdgeJobsRead
      description: |
        Query jobs. Assumes Edge is configured in async mode, where ?async=true
        is used at the end of any 4.0 service configuration URI for POST, PUT,
        and DELETE calls.
      queryParameters:
        status:
          displayName: status
          description: status set to "all" or "active"
    /{jobId}:
      displayName: nsxEdgeJob
      description: |
        Status of Edge async jobs. Assumes Edge is configured in async mode,
        where ?async=true is used at the end of any 4.0 service configuration
        URI for POST, PUT, and DELETE calls.
      uriParameters:
        jobId:
          required: true
          displayName: jobId
          description: Job ID
      get:
        displayName: nsxEdgeJobRead
        description: |
          Retrieve job status (SUCCESS/FAILED/QUEUED/RUNNING/ROLLBACK), URI of
          the resource, and ID of the resource as shown in response body
/4.0/edgePublish:
  displayName: nsxEdgePublish
  description: |
    Working with NSX Edge Configuration Publishing
    =========
  /tuningConfiguration:
    displayName: nsxEdgePublishTuning
    description: |
      Working with NSX Edge tuning configuration.
      ___
      Starting in 6.2.3 you can configure default values for NSX Edge
      configuration parameters, including publishing and health check
      timeouts, and CPU and memory reservation, which are applicable to all
      NSX Edges.  The values for the tuning configuration parameters have been
      set to sensible defaults and may not require any changes. However, based
      on datacenter capacity and requirements, you can change the default CPU
      and memory resource reservation percentages using this API.  This
      percentage is applied across all Edge VM Sizes {COMPACT, LARGE,
      QUADLARGE, XLARGE}.
      The default values are:
      * 100% for CPU reservation
      * 100% for Memory reservation
      * 1000 MHz per CPU
      ___
      | Name | Comments |
      |------|----------|
      | lockUpdatesOnEdge | Default value is false. Serialize specific Edge operations related to DHCP and vnic configuration to avoid concurrency errors when too many configuration change requests arrive at the same time.|
      | aggregatePublishing | Default value is true (enabled). Speed up configuration change publishing to the NSX Edge by aggregating over the configuration versions.|
      | edgeVMHealthCheckIntervalInMin | Default value for time interval between NSX Edge VMʹs health check is 0, where NSX Manager manages the interval based on the number of NSX Edge VMʹs. A positive integer value overrides the default behavior.|
      | healthCheckCommandTimeoutInMs | Default timeout value for health check command is 120000.|
      | maxParallelVixCallsForHealthCheck | The maximum concurrent health check calls that can be made for NSX Edge VMʹs based on VIX communication channel is 25.|
      | publishingTimeoutInMs | The timeout value to publish a configuration change on NSX Edge appliance.  Default is 1200000 (20 minutes).|
      | edgeVCpuReservationPercentage | Integer value [0-100], specifying the CPU reservation percentage which will be applied to the NSX Edge appliance. To disable this resource reservation, enter 0. |
      | edgeMemoryReservationPercentage | integer value [0-100], specifying the memory reservation percentage which will be applied to the NSX Edge appliance. To disable this resource reservation, enter 0. |
      | megaHertzPerVCpu | integer value specifying the megahertz per each vCPU (1000, 1500, 2000) |
    get:
      displayName: nsxEdgePublishTuningList
      description: |
        Retrieve the NSX Edge tuning configuration.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.
      responses:
        200:
          body:
            application/xml:
              example: |
                <tuningConfiguration>
                  <lockUpdatesOnEdge>false</lockUpdatesOnEdge>
                  <aggregatePublishing>true</aggregatePublishing>
                  <edgeVMHealthCheckIntervalInMin>0</edgeVMHealthCheckIntervalInMin>
                  <healthCheckCommandTimeoutInMs>120000</healthCheckCommandTimeoutInMs>
                  <maxParallelVixCallsForHealthCheck>25</maxParallelVixCallsForHealthCheck>
                  <publishingTimeoutInMs>1200000</publishingTimeoutInMs>
                  <edgeVCpuReservationPercentage>100</edgeVCpuReservationPercentage>
                  <edgeMemoryReservationPercentage>100</edgeMemoryReservationPercentage>
                  <megaHertzPerVCpu>1000</megaHertzPerVCpu>
                </tuningConfiguration>
    put:
      displayName: nsxEdgePublishTuningUpdate
      description: |
        Update the NSX Edge tuning configuration.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.
      body:
        application/xml:
          example: |
            <tuningConfiguration>
              <lockUpdatesOnEdge>false</lockUpdatesOnEdge>
              <aggregatePublishing>true</aggregatePublishing>
              <edgeVMHealthCheckIntervalInMin>0</edgeVMHealthCheckIntervalInMin>
              <healthCheckCommandTimeoutInMs>120000</healthCheckCommandTimeoutInMs>
              <maxParallelVixCallsForHealthCheck>25</maxParallelVixCallsForHealthCheck>
              <publishingTimeoutInMs>1200000</publishingTimeoutInMs>
              <edgeVCpuReservationPercentage>0</edgeVCpuReservationPercentage>
              <edgeMemoryReservationPercentage>0</edgeMemoryReservationPercentage>
              <megaHertzPerVCpu>1000</megaHertzPerVCpu>
            </tuningConfiguration>
/2.0/services/truststore:
  displayName: truststore
  description: |
    Working with Certificates
    =============
  /certificate:
    displayName: certificate
    description: Certificates and certificate chains
    post:
      displayName: certificateCreate
      description: Create certificate for CSR
      body:
        application/xml:
          example: |
            <trustObject>
              <pemEncoding></pemEncoding>
            </trustObject>
          schema: certificateCreate
    /scope/{scopeId}:
      displayName: certificateScope
      description: Certificates for a scope
      uriParameters:
        scopeId:
          required: true
          displayName: scopeId
          description: Scope ID
      get:
        displayName: certificateScopeRead
        description: Query all certificates for a scope
    /{scopeId}:
      displayName: certificateSelfSigned
      description: Working with vShield Edge self-signed certificates
      uriParameters:
        scopeId:
          required: true
          displayName: scopeId
          description: Scope ID
      post:
        displayName: certificateSelfSignedCreate
        description: Create a single certificate
        body:
          application/xml:
            example: |
              <trustObject>
                <pemEncoding></pemEncoding>
                <privateKey></privateKey>
                <passphrase></passphrase>
              </trustObject>
            schema: certificateSelfSignedCreate
    /{certificateId}:
      displayName: certificateId
      description: Certificate specified by ID
      uriParameters:
        certificateId:
          required: true
          displayName: certificateId
          description: Certificate ID
      get:
        displayName: certificateIdRead
        description: |
          Retrieve the certificate object specified by ID. If the ID specifies
          a chain, multiple certificate objects are retrieved.
      delete:
        displayName: certificateIdDelete
        description: Delete the specified certificate
  /csr/{scopeId}:
    displayName: csr
    description: Create Certificate Signing Requests (CSRs)
    uriParameters:
      scopeId:
        required: true
        displayName: scopeId
        description: Specified scope ID
    post:
      displayName: csrCreate
      description: Create a CSR
      body:
        application/xml:
          example: |
            <csr>
              <subject>
                <attribute>
                  <key></key>
                  <value></value>
                </attribute>
              </subject>
              <algorithm></algorithm>
              <keySize></keySize>
            </csr>
          schema: csrCreate
  /csr/{csrId}:
    displayName: csrSelfSigned
    description: Self signed certificate for CSR
    uriParameters:
      csrId:
        required: true
        displayName: csrId
        description: CSR ID
    put:
      displayName: csrSelfSignedUpdate
      description: Create a self signed certificate for CSR
      queryParameters:
        noOfDays:
          displayName: noOfDays
          required: true
    get:
      displayName: csrSelfSignedRead
      description: Retrieve specific CSR
  /csr/scope/{scopeId}:
    displayName: csrScope
    description: CSRs for specific scope
    uriParameters:
      scopeId:
        displayName: scopeId
        description: Specified scope
        required: true
    get:
      displayName: csrScopeRead
      description: Query CSRs for specific scope
  /crl/{scopeId}:
    displayName: crl
    description: Create Certificate Revocation Lists (CRLs) on a specified scope
    uriParameters:
      scopeId:
        required: true
        displayName: scopeId
        description: Specified scope.
    post:
      displayName: crlCreate
      description: Create CRL on the specified scope.
      body:
        application/xml:
          example: |
            <trustObject>
              <pemEncoding></pemEncoding>
            </trustObject>
          schema: crlCreate
  /crl/scope/{scopeId}:
    displayName: crlScope
    description: |
      Working with CRL Certificates in a Specific Scope
      ----
    uriParameters:
      scopeId:
        displayName: scopeId
        description: Specified scope
        required: true
    get:
      displayName: crlScopeRead
      description: Retrieve all certificates for the specified scope.
  /crl/{crlId}:
    displayName: crlID
    description: |
      Working with a Specific CRL Certificate
      ----
    uriParameters:
      crlId:
        required: true
        displayName: crlId
        description: CRL ID
    get:
      displayName: crlIDRead
      description: Retrieve certificate object for the specified CRL.
    delete:
      displayName: crlIDDelete
      description: Delete the specified CRL.
/2.0/services/policy:
  displayName: policy
  description: |
    Working with Security Policies and Actions
    ============================
  /securitypolicy:
    displayName: securityPolicy
    description: |
      Working with Security Policies
      ------------------------------
      A security policy is a set of Endpoint, firewall, and network
      introspection services that can be applied to a security group.
    post:
      displayName: securityPolicyCreate
      description: |
        Create a security policy.
        ___
        When creating a security policy, a parent security policy can be
        specified if required. The security policy inherits services from the
        parent security policy. Security group bindings and actions can also
        be specified while creating the policy. Note that execution order of
        actions in a category is implied by their order in the list. The
        response of the call has Location header populated with the URI using
        which the created object can be fetched.
        ___
        Ensure that:
        * the required VMware built in services (such as Distributed Firewall,
          Data Security, and Endpoint) are installed. See *NSX Installation
          Guide*.
        * the required partner services have been registered with NSX Manager.
        * the required security groups have been created.
        ___
        Tags related to Service Composer, security policies, and security
        groups:
        Common Tags
        * **actionType** - Defines the type of action belonging to a given
        executionOrderCategory
        * **executionOrderCategory** - Category to which the action belongs to
        (endpoint, firewall or traffic_steering)
        * **isActive** - In a security policy hierarchy, an action within a policy
        may or may not be active based on the
        precedence of the policy or usage of isActionEnforced flag in that
        hierarchy
        * **isActionEnforced** - Enforces an action of a parent policy on its
        child policies for a given actionType and
        executionOrderCategory. Note that in a policy hierarchy, for a given
        actionType and executionOrderCategory, there can be only one action
        which can be marked as enforced.
        * **isEnabled** - Indicates whether an action is enabled
        * **secondarySecurityGroup** - Applicable for actions which need secondary
        security groups, say a
        source-destination firewall rule
        * **securityPolicy** - Parent policy in an action
        Output only Tags
        * **executionOrder** - Defines the sequence in which actions belonging to
        an executionOrderCategory are
        executed. Note that this is not an input parameter and its value is
        implied by the index in the list.
        Firewall Category Tags
        * **action** - Allow or block the traffic
        * **applications** - Applications / application groups on which the rules
        are to be applied
        * **direction** - Direction of traffic towards primary security group.
        Possible values: inbound, outbound, intra
        * **logged** - Flag to enable logging of the traffic that is hit by this
        rule
        * **outsideSecondaryContainer** - Flag to specify outside i.e. outside
        securitygroup-3
        Endpoint Category Tags
        * **serviceId** - ID of the service (as registered with the service
        insertion module). If this tag is null, the
        functionality type (as defined in actionType tag) is not applied which
        will also result in blocking the actions (of given functionality type)
        that are inherited from the parent security policy. This is true if
        there is no action of enforce type.
        * **invalidServiceId** - Flag to indicate that the service that was
        referenced in this rule is deleted, which make
        the rule ineffective (or deviate from the original intent that existed
        while configuring the rule). You must either modify this rule by
        adding correct Service or delete this rule.
        * **serviceName** -Name of the service
        * **serviceProfile** - Profile to be referenced in Endpoint rule.
        * **invalidServiceProfile** - Flag to indicate that the service profile
        that was referenced in this rule is deleted, which makes
        the rule ineffective (or deviate from the original intent that existed
        while configuring the rule). You must either modify this rule by
        adding correct Service Profile or delete this rule.
        The following tags are deprecated:
        * **vendorTemplateId**
        * **invalidVendorTemplateId**
        * **vendorTemplateName**
        Traffic Steering/NetX Category Tags
        * **redirect** - Flag to indicate whether to redirect the traffic or not
        * **serviceProfile** - Service profile for which redirection is being
        configured
        * **logged** - Flag to enable logging of the traffic that is hit by this
        rule
      body:
        application/xml:
          example: |
            <securityPolicy>
              <name>name</name>
              <description>decription</description>
              <precedence></precedence>
              <parent>
                <objectId></objectId>
              </parent>
              <securityGroupBinding>
                <objectId></objectId>
              </securityGroupBinding>
              <securityGroupBinding>
                ...
              </securityGroupBinding>
              ...
              ...
              <securityGroupBinding>
                ...
              </securityGroupBinding>
              <actionsByCategory>
                <category>firewall</category>
                <action class="firewallSecurityAction">
                  <name>name</name>
                  <description>description</description>
                  <category></category>
                  <actionType></actionType>
                  <isActionEnforced></isActionEnforced>
                  <isActive></isActive>
                  <isEnabled></isEnabled>
                  <secondarySecurityGroup>
                    <objectId></objectId>
                  </secondarySecurityGroup>
                  <secondarySecurityGroup>
                    ...
                  </secondarySecurityGroup>
                  ...
                  ...
                  <secondarySecurityGroup>
                    ...
                  </secondarySecurityGroup>
                  <applications>
                    <application>
                      <objectId></objectId>
                    </application>
                    <applicationGroup>
                      <objectId></objectId>
                    </applicationGroup>
                    ...
                    ...
                  </applications>
                  <logged></logged>
                  <action></action>
                  <direction></direction>
                  <outsideSecondaryContainer></outsideSecondaryContainer>
                </action>
                <action>
                  ...
                </action>
                ...
                ...
                <action>
                  ...
                </action>
              </actionsByCategory>
              <actionsByCategory>
                <category>endpoint</category>
                <action class="endpointSecurityAction">
                  <name>name</name>
                  <description>description</description>
                  <category></category>
                  <actionType></actionType>
                  <isActionEnforced></isActionEnforced>
                  <isActive></isActive>
                  <isEnabled></isEnabled>
                  <serviceId></serviceId>
                  <serviceProfile>
                    <objectId>serviceprofile-1</objectId>
                    ...
                  </serviceProfile>
                  <invalidServiceProfile>false</invalidServiceProfile>
                </action>
              </actionsByCategory>
              <actionsByCategory>
                <category>traffic_steering</category>
                <action class="trafficSteeringSecurityAction">
                  <name>name</name>
                  <description>description</description>
                  <category></category>
                  <actionType></actionType>
                  <isActionEnforced></isActionEnforced>
                  <isActive></isActive>
                  <isEnabled></isEnabled>
                  <logged></logged>
                  <redirect></redirect>
                  <serviceProfile>
                    <objectId></objectId>
                  </serviceProfile>
                </action>
              </actionsByCategory>
            </securityPolicy>
          schema: securityPolicyCreate
    /status:
      displayName: securityPolicyStatus
      description: |
        Working with Service Composer Status
        ------------------------------------
      get:
        displayName: securityPolicyStatusRead
        description: |
          Retrieve the consolidated status of Service Composer.
          ___
          The possible return of value for status are: *in_sync*,
          *in_progress*, *out_of_sync*, and *pending*.

          **Method history:**

          Release | Modification
          --------|-------------
          6.2.3 | Method introduced.
        responses:
          200:
            body:
              application/xml:
                example: |
                  <serviceComposerStatus>
                    <status>in_sync</status>
                  </serviceComposerStatus>
    /alarms:
      displayName: securityPolicyAlarms
      description: |
        Working with Security Policy Alarms
        -----------
      /all:
        displayName: securityPolicyAlarmsAll
        description: |
          Working with All Service Composer Alarms
          ------------
        get:
          displayName: securityPolicyAlarmsAllRead
          description: |
            Retrieve all system alarms that are raised at Service Composer
            level and policy level.

            **Method history:**

            Release | Modification
            --------|-------------
            6.2.3 | Method introduced.
          responses:
            200:
              body:
                application/xml:
                  example: |
                    <systemAlarms>
                      <systemAlarm>
                        <eventId></eventId>
                        <timestamp></timestamp>
                        <severity></severity>
                        <eventSource></eventSource>
                        <eventCode></eventCode>
                        <message></message>
                        <module></module>
                        <objectId></objectId>
                        <reporterName></reporterName>
                        <reporterType></reporterType>
                        <sourceType></sourceType>
                        <displayName></displayName>
                        <eventMetadata>
                          <data>
                          <key></key>
                          <value></value>
                          </data>
                          <data>
                          ...
                          </data>
                          ...
                          <data>
                          ...
                          </data>
                        </eventMetadata>
                        <resolutionAttempted></resolutionAttempted>
                        <resolvable></resolvable>
                        <alarmId></alarmId>
                        <alarmCode></alarmCode>
                        <alarmSource></alarmSource>
                        <alarmBeingResolved></alarmBeingResolved>
                        <alarmMetadata>
                          <data>
                          <key></key>
                          <value></value>
                          </data>
                          <data>
                          ...
                          </data>
                          ...
                          <data>
                          ...
                          </data>
                        </alarmMetadata>
                      </systemAlarm>
                    </systemAlarms>
    /serviceprovider/firewall:
      displayName: serviceComposerFirewallAppliedTo
      description: |
        Working with Service Composer Firewall Applied To Setting
        -------------
        You can set the applied to setting for all firewall rules created
        though Service Composer to either Distributed Firewall or Policy's
        Security Groups. By default, the applied to is set to Distributed
        Firewall. When Service Composer firewall rules have an applied to
        setting of distributed firewall, the rules are applied to all clusters
        on which distributed firewall is installed. If the firewall rules are
        set to apply to the policy's security groups, you have more granular
        control over the firewall rules, but may need multiple security
        policies or firewall rules to get the desired result.

        **Applied To Values for Service Composer Firewall Rules**

        Value | Description
        ------|----------
        dfw_only | Firewall rules are applied to all clusters on which Distributed Firewall is installed.
        policy_security_group | Firewall rules are applied to security groups on which the security policy is applied.
      get:
        displayName: serviceComposerFirewallAppliedToRead
        description: |
          Retrieve the Service Composer firewall applied to setting.
        responses:
          200:
            body:
              application/xml:
                example: |
                  <SecurityPolicyFirewallConfig>
                    <appliedTo>dfw_only</appliedTo>
                  </SecurityPolicyFirewallConfig>
      put:
        displayName: serviceComposerFirewallAppliedToUpdate
        description: |
          Update the Service Composer firewall applied to setting.
        body:
          application/xml:
            example: |
              <SecurityPolicyFirewallConfig>
                <appliedTo>policy_security_group</appliedTo>
              </SecurityPolicyFirewallConfig>
    /{ID}:
      displayName: securityPolicyID
      description: |
        Working with Security Policies
        ------------------
      uriParameters:
        ID:
          required: true
          displayName: ID
          description: |
            ID of desired security policy (or 'all' to for all security
            policies).
      get:
        displayName: securityPolicyIDRead
        description: |
          Retrieve security policy information.
        responses:
          200:
            body:
              application/xml:
                example: |
                  <securityPolicy>
                    <securityPolicy>
                      <name>name</name>
                      <description>description</description>
                      <precedence></precedence>
                      <parent>
                        <objectId></objectId>
                      </parent>
                      <securityGroupBinding>
                        <objectId></objectId>
                      </securityGroupBinding>
                      <securityGroupBinding>
                        ...
                      </securityGroupBinding>
                      ...
                      ...
                      <securityGroupBinding>
                        ...
                      </securityGroupBinding>
                      <actionsByCategory>
                        <category>firewall</category>
                        <action class="firewallSecurityAction">
                          <name>name</name>
                          <description>description</description>
                          <category></category>
                          <actionType></actionType>
                          <isActionEnforced></isActionEnforced>
                          <isActive></isActive>
                          <isEnabled></isEnabled>
                          <secondarySecurityGroup>
                            <objectId></objectId>
                          </secondarySecurityGroup>
                          <secondarySecurityGroup>
                            ...
                          </secondarySecurityGroup>
                          ...
                          ...
                          <secondarySecurityGroup>
                            ...
                          </secondarySecurityGroup>
                          <applications>
                            <application>
                              <objectId></objectId>
                            </application>
                            <applicationGroup>
                              <objectId></objectId>
                            </applicationGroup>
                            ...
                            ...
                          </applications>
                          <logged></logged>
                          <action></action>
                          <direction></direction>
                          <outsideSecondaryContainer></outsideSecondaryContainer>
                        </action>
                        <action>
                          ...
                        </action>
                        ...
                        ...
                        <action>
                          ...
                        </action>
                      </actionsByCategory>
                      <actionsByCategory>
                        <category>endpoint</category>
                        <action class="endpointSecurityAction">
                          <name>name</name>
                          <description>description</description>
                          <category></category>
                          <actionType></actionType>
                          <isActionEnforced></isActionEnforced>
                          <isActive></isActive>
                          <isEnabled></isEnabled>
                          <serviceId></serviceId>
                          <vendorTemplateId></vendorTemplateId>
                        </action>
                      </actionsByCategory>
                      <actionsByCategory>
                        <category>traffic_steering</category>
                        <action class="trafficSteeringSecurityAction">
                          <name>name</name>
                          <description>description</description>
                          <category></category>
                          <actionType></actionType>
                          <isActionEnforced></isActionEnforced>
                          <isActive></isActive>
                          <isEnabled></isEnabled>
                          <logged></logged>
                          <redirect></redirect>
                          <serviceProfile>
                            <objectId></objectId>
                          </serviceProfile>
                        </action>
                      </actionsByCategory>
                    </securityPolicy>
                    <name></name>
                    <description></description>
                    <precedence></precedence>
                    <parent>
                      <objectId></objectId>
                    </parent>
                    <securityGroupBinding>
                      <objectId></objectId>
                    </securityGroupBinding>
                    <securityGroupBinding>
                      ...
                    </securityGroupBinding>
                    ...
                    ...
                    <securityGroupBinding>
                      ...
                    </securityGroupBinding>
                    <actionsByCategory>
                      <category>firewall</category>
                      <action class="firewallSecurityAction">
                        <name>name</name>
                        <description>description</description>
                        <category></category>
                        <actionType></actionType>
                        <isActionEnforced></isActionEnforced>
                        <isActive></isActive>
                        <isEnabled></isEnabled>
                        <secondarySecurityGroup>
                          <objectId></objectId>
                        </secondarySecurityGroup>
                        <secondarySecurityGroup>
                          ...
                        </secondarySecurityGroup>
                        ...
                        ...
                        <secondarySecurityGroup>
                          ...
                        </secondarySecurityGroup>
                        <applications>
                          <application>
                            <objectId></objectId>
                          </application>
                          <applicationGroup>
                            <objectId></objectId>
                          </applicationGroup>
                          ...
                          ...
                        </applications>
                        <logged></logged>
                        <action></action>
                        <direction></direction>
                        <outsideSecondaryContainer></outsideSecondaryContainer>
                      </action>
                      <action>
                        ...
                      </action>
                      ...
                      ...
                      <action>
                        ...
                      </action>
                    </actionsByCategory>
                    <actionsByCategory>
                      <category>endpoint</category>
                      <action class="endpointSecurityAction">
                        <name>name</name>
                        <description>description</description>
                        <category></category>
                        <actionType></actionType>
                        <isActionEnforced></isActionEnforced>
                        <isActive></isActive>
                        <isEnabled></isEnabled>
                        <serviceId></serviceId>
                        <vendorTemplateId></vendorTemplateId>
                      </action>
                    </actionsByCategory>
                    <actionsByCategory>
                      <category>traffic_steering</category>
                      <action class="trafficSteeringSecurityAction">
                        <name>name</name>
                        <description>description</description>
                        <category></category>
                        <actionType></actionType>
                        <isActionEnforced></isActionEnforced>
                        <isActive></isActive>
                        <isEnabled></isEnabled>
                        <logged></logged>
                        <redirect></redirect>
                        <serviceProfile>
                          <objectId></objectId>
                        </serviceProfile>
                      </action>
                    </actionsByCategory>
                  </securityPolicy>
      put:
        displayName: securityPolicyIDUpdate
        description: |
          Edit a security policy.
          ___
          To update a security policy, you must first fetch it.
          Then edit the received XML and pass it back as the input. The
          specified configuration replaces the current configuration.
          ___
          Security group mappings provided in the PUT call replaces the
          security group mappings for the security policy. To remove all
          mappings, delete the securityGroupBindings parameter.
          ___
          You can add or update actions for the security policy by editing the
          actionsByCategory parameter. To remove all actions (belonging to all
          categories), delete the actionsByCategory parameter. To remove
          actions belonging to a specific category, delete the block for that
          category.
        body:
          application/xml:
            example: |
              <securityPolicy>
                <securityPolicy>
                  <name></name>
                  <description></description>
                  <precedence></precedence>
                  <parent>
                    <objectId></objectId>
                  </parent>
                  <securityGroupBinding>
                    <objectId></objectId>
                  </securityGroupBinding>
                  <actionsByCategory>
                    <category></category>
                    <action class="">
                      <name></name>
                      <description></description>
                      <category></category>
                      <actionType></actionType>
                      <isActionEnforced></isActionEnforced>
                      <isActive></isActive>
                      <isEnabled></isEnabled>
                      <secondarySecurityGroup>
                        <objectId></objectId>
                      </secondarySecurityGroup>
                      <applications>
                        <application>
                          <objectId></objectId>
                        </application>
                        <applicationGroup>
                          <objectId></objectId>
                        </applicationGroup>
                      </applications>
                      <logged></logged>
                      <scope>
                        <id></id>
                        <name></name>
                        <objectTypeName></objectTypeName>
                      </scope>
                    </action>
                    <direction></direction>
                    <outsideSecondaryContainer></outsideSecondaryContainer>
                  </actionsByCategory>
                </securityPolicy>
              </securityPolicy>
            schema: securityPolicyIDUpdate
      delete:
        displayName: securityPolicyIDDelete
        description: |
          Delete a security policy.
          ___
          When you delete a security policy, its child security policies and
          all the actions in it are deleted as well.
        queryParameters:
          force:
            type: boolean
            displayName: force
            description: |
              If set to true, the security policy is deleted even if it is in use.
            required: false
      /securityactions:
        displayName: securityActions
        description: |
          Working with Security Actions on a Security Policy
          -------------
        get:
          displayName: securityActionsRead
          description: |
            Retrieve all security actions applicable on a security policy.
            ___
            This list includes security actions from associated parent
            security policies, if any. Security actions per Execution Order
            Category are sorted based on the weight of security actions in
            descending order.
          responses:
            200:
              body:
                application/xml:
                  example: |
                    <securityPolicies>
                      <securityPolicy></securityPolicy>
                      <securityPolicy></securityPolicy>
                      ...
                      ...
                      <securityPolicy></securityPolicy>
                    </securityPolicies>
    /hierarchy:
      displayName: hierarchy
      description: |
        Working With Security Policy Configuration Hierarchies
        -----
      post:
        displayName: hierarchyCreate
        description: |
          Import a security policy configuration
          ___
          You can create multiple security policies and parent-child
          hierarchies using the data fetched through export. All objects
          including security policies, security groups and security actions
          are created on a global scope.
          ___
          The policy that is being imported needs to be included in the
          request body.
          ___
          If a suffix is specified, it is added after the names of the
          security policy, security action, and security group objects in the
          exported XML. The suffix can thus be used to differentiate locally
          created objects from imported ones.
          ___
          The location of the newly created security policy objects (multiple
          locations are separated by commas) is populated in the Location
          header of the response.
        queryParameters:
          suffix:
            displayName: suffix
            description:
              A suffix to add after the names of the objects in the imported
              XML.
            required: false
        body:
          application/xml:
            example: |
              <securityPolicyHierarchy>
                <name></name>
                <description></description>
                <securityPolicy></securityPolicy>
                <securityGroup></securityGroup>
              </securityPolicyHierarchy>
            schema: hierarchyCreate
      get:
        displayName: hierarchyRead
        description: |
          Export a Service Composer configuration (along with the
          security groups to which the security policies are mapped).
          You can save the response to a file.  The saved configuration can be
          used as a backup for situations where you may accidentally delete a
          policy configuration, or it can be exported for use in another NSX
          Manager environment.
          ___
          If a prefix is specified, it is added before the names of the
          security policy, security action, and security group objects in the
          exported XML. The prefix can thus be used to indicate the remote
          source from where the hierarchy was exported.
        queryParameters:
          policyIds:
            displayName: policyIds
            description: |
              Comma separated list of security policy IDs to export. If
              omitted, all security policy IDs are exported.
            required: false
          prefix:
            displayName: prefix
            description: |
              A prefix to add before the names of the objects in the exported
              XML.
            required: false
  /securityaction/category/virtualmachines:
    displayName: securityActionVM
    description: |
      Working with Virtual Machines with Security Actions Applied
      --------------
    get:
      displayName: securityActionVMRead
      description: |
        Retrieve all VirtualMachine objects on which security action of a
        given category and attribute has been applied.
      queryParameters:
        attributeKey:
          displayName: attributeKey
          description: Attribute key.
        attributeValue:
          displayName: attributeValue
          description: Attribute value.
      responses:
        200:
          body:
            application/xml:
              example: |
                <vmnodes>
                  <vmnode>
                    <vmId></vmId>
                    <vmName></vmName>
                  </vmnode>
                  <vmnode>
                    <vmId></vmId>
                    <vmName></vmName>
                  </vmnode>
                  ...
                  ...
                  <vmnode>
                    <vmId></vmId>
                    <vmName></vmName>
                  </vmnode>
                </vmnodes>
  /securitygroup/{ID}/securityactions:
    displayName: securityActionSecGroup
    description: |
      Working With Security Actions Applicable on Security Groups
      ----
    uriParameters:
      ID:
        displayName: ID
        description: Specified security group.
    get:
      displayName: securityActionRead
      description: |
        Retrieve all security actions applicable on a security group.
        ___
        Retrieve all security actions applicable on a security group for all
        ExecutionOrderCategories. The list is sorted based on the weight of
        security actions in descending order.  The **isActive** tag indicates
        if a securityaction will be applied (by the enforcement engine) on the
        security group.
      responses:
        200:
          body:
            application/xml:
              example: |
                <securityActionsByCategoryMap>
                  <actionsByCategory>
                    <category>firewall</category>
                    <action  class="firewallSecurityAction">
                      <objectId></objectId>
                      <objectTypeName></objectTypeName>
                      <vsmUuid></vsmUuid>
                      <revision></revision>
                      <type>
                        <typeName></typeName>
                      </type>
                      <name>name</name>
                      <description>description</description>
                      <category></category>
                      <executionOrder></executionOrder>
                      <actionType></actionType>
                      <isActionEnforced></isActionEnforced>
                      <isActive></isActive>
                      <isEnabled></isEnabled>
                      <secondarySecurityGroup>
                        <objectId></objectId>
                        <objectTypeName></objectTypeName>
                        <vsmUuid></vsmUuid>
                        <revision></revision>
                        <type>
                          <typeName></typeName>
                        </type>
                        <name>name</name>
                        <description>description</description>
                        <scope>
                          <id></id>
                          <objectTypeName></objectTypeName>
                          <name>name</name>
                          <description>description</description>
                        </scope>
                        <extendedAttributes></extendedAttributes>
                      </secondarySecurityGroup>
                      <secondarySecurityGroup>
                        ...
                      </secondarySecurityGroup>
                      ...
                      ...
                      <secondarySecurityGroup>
                        ...
                      </secondarySecurityGroup>
                      <securityPolicy>
                        <objectId></objectId>
                        <objectTypeName></objectTypeName>
                        <vsmUuid></vsmUuid>
                        <revision></revision>
                        <type>
                          <typeName></typeName>
                        </type>
                        <name>name</name>
                        <description>description</description>
                        <scope>
                          <id></id>
                          <objectTypeName></objectTypeName>
                          <name>name</name>
                          <description>description</description>
                        </scope>
                      </securityPolicy>
                      <invalidSecondaryContainers></invalidSecondaryContainers>
                      <applications>
                        <application>
                          <objectId></objectId>
                          <objectTypeName></objectTypeName>
                          <vsmUuid></vsmUuid>
                          <revision></revision>
                          <type>
                            <typeName></typeName>
                          </type>
                          <name></name>
                          <scope>
                            <id></id>
                            <objectTypeName></objectTypeName>
                            <name></name>
                          </scope>
                          <clientHandle></clientHandle>
                           <extendedAttributes></extendedAttributes>
                          <inheritanceAllowed></inheritanceAllowed>
                          <element>
                            <applicationProtocol></applicationProtocol>
                            <value></value>
                          </element>
                        </application>
                        <application>
                          ...
                        </application>
                        ...
                        ...
                      </applications>
                      <invalidApplications>false</invalidApplications>
                      <logged>false</logged>
                      <action>block</action>
                      <direction>inbound</direction>
                      <outsideSecondaryContainer>true</outsideSecondaryContainer>
                    </action>
                    <action>
                    </action>
                    ...
                    ...
                    <action>
                      ...
                    </action>
                  </actionsByCategory>
                  <actionsByCategory>
                    <category>endpoint</category>
                    <action class="endpointSecurityAction">
                      <objectId></objectId>
                      <objectTypeName></objectTypeName>
                      <vsmUuid></vsmUuid>
                      <revision></revision>
                      <type>
                        <typeName></typeName>
                      </type>
                      <name>name</name>
                      <description>description</description>
                      <category></category>
                      <executionOrder></executionOrder>
                      <actionType></actionType>
                      <isActionEnforced></isActionEnforced>
                      <isActive></isActive>
                      <isEnabled></isEnabled>
                      <securityPolicy>
                        <objectId></objectId>
                        <objectTypeName></objectTypeName>
                        <vsmUuid></vsmUuid>
                        <revision></revision>
                        <type>
                          <typeName></typeName>
                        </type>
                        <name></name>
                        <description></description>
                        <scope>
                          <id></id>
                          <objectTypeName></objectTypeName>
                          <name>name</name>
                          <description>description</description>
                        </scope>
                      </securityPolicy>
                      <serviceName></serviceName>
                      <serviceId></serviceId>
                      <invalidServiceId></invalidServiceId>
                      <ServiceProfile>
                        <objectId>serviceprofile-1</objectId>
                        ...
                      </ServiceProfile>
                      <invalidServiceProfile>false</invalidServiceProfile>
                    </action>
                    <action>
                    </action>
                    ...
                    ...
                    <action>
                      ...
                    </action>
                  </actionsByCategory>
                  <actionsByCategory>
                    <category>traffic_steering</category>
                    <action class="trafficSteeringSecurityAction">
                      <objectId></objectId>
                      <objectTypeName></objectTypeName>
                      <vsmUuid></vsmUuid>
                      <revision></revision>
                      <type>
                        <typeName></typeName>
                      </type>
                      <name>name</name>
                      <description>description</description>
                      <category></category>
                      <executionOrder></executionOrder>
                      <actionType></actionType>
                      <isActionEnforced></isActionEnforced>
                      <isActive></isActive>
                      <isEnabled></isEnabled>
                      <securityPolicy>
                        <objectId></objectId>
                        <objectTypeName></objectTypeName>
                        <vsmUuid></vsmUuid>
                        <revision></revision>
                        <type>
                          <typeName></typeName>
                        </type>
                        <name>name</name>
                        <description>description</description>
                        <scope>
                          <id></id>
                          <objectTypeName></objectTypeName>
                          <name>name</name>
                          <description>description</description>
                        </scope>
                      </securityPolicy>
                      <logged></logged>
                      <serviceProfile>
                        <objectId></objectId>
                        <objectTypeName></objectTypeName>
                        <vsmUuid></vsmUuid>
                        <revision></revision>
                        <type>
                          <typeName></typeName>
                        </type>
                        <name>P</name>
                        <clientHandle>
                        </clientHandle>
                         <extendedAttributes></extendedAttributes>
                        <profileAttributes>
                          <id></id>
                          <revision></revision>
                          <attribute>
                            <id></id>
                            <revision></revision>
                            <key></key>
                            <name></name>
                            <value></value>
                          </attribute>
                          <attribute>
                            ...
                          </attribute>
                        </profileAttributes>
                        <service>
                          <objectId></objectId>
                          <objectTypeName></objectTypeName>
                          <vsmUuid></vsmUuid>
                          <revision></revision>
                          <type>
                            <typeName></typeName>
                          </type>
                          <name>name</name>
                          <clientHandle></clientHandle>
                           <extendedAttributes></extendedAttributes>
                        </service>
                        <category></category>
                        <vendorTemplate>
                          <id></id>
                          <revision></revision>
                          <name>name</name>
                          <idFromVendor></idFromVendor>
                          <vendorAttributes>
                            <id></id>
                            <revision></revision>
                          </vendorAttributes>
                        </vendorTemplate>
                        <status></status>
                        <vendorAttributes>
                          <id></id>
                          <revision></revision>
                        </vendorAttributes>
                        <runtime>
                          <nonCompliantDvpg/>
                          <nonCompliantVwire></nonCompliantVwire>
                        </runtime>
                        <serviceProfileBinding>
                          <distributedVirtualPortGroups></distributedVirtualPortGroups>
                          <virtualWires></virtualWires>
                          <excludedVnics></excludedVnics>
                          <virtualServers></virtualServers>
                        </serviceProfileBinding>
                      </serviceProfile>
                      <redirect></redirect>
                    </action>
                    <action>
                    </action>
                    ...
                    ...
                    <action>
                      ...
                    </action>
                  </actionsByCategory>
                </securityActionsByCategoryMap>
  /virtualmachine/{ID}/securityactions:
    displayName: vmApplicableSecurityAction
    description: |
      Working with Security Actions Applicable on a Virtual Machine
      ----
    uriParameters:
      ID:
        displayName: ID
        description: VM ID
    get:
      displayName: vmApplicableSecurityAction
      description: |
        Retrieve the security actions applicable on a virtual machine.
  /serviceprovider/firewall:
    displayName: serviceComposerDFW
    description: |
      Working with Service Composer Firewall
      --------------
    get:
      displayName: serviceComposerDFWRead
      description: |
        If Service Composer goes out of sync with Distributed Firewall, you
        must re-synchronize Service Composer rules with firewall rules. If
        Service Composer stays out of sync, firewall configuration may not
        stay enforced as expected.

        This method can perform the following functions, depending on the
        request body provided.

        Key | Description | Comments
        ----|-------------|----------
        getServiceComposerFirewallOutOfSyncTimestamp | Check if Service Composer firewall and Distributed Firewall are in sync. | If they are in sync, the response body does not contain any data.  <br>If they are out of sync, the response body contains the unix timestamp representing the time since when Service Composer firewall is out of sync.
        forceSync | Synchronize Service Composer firewall with Distributed Firewall. |
        getAutoSaveDraft | Retrieve the state of the auto save draft property in Service Composer. | Response is true or false.
        autoSaveDraft | **Note:** Deprecated. Change the state of the auto save draft property in Service Composer. | Provide value true or false.
          **Method history:**

          Release | Modification
          --------|-------------
          6.2.3 | Method to change audo save draft via **autoSaveDraft** parameter is deprecated, and will be removed in a future release.  <br>The default setting of **autoSaveDraft** is changed from *true* to *false*.
      body:
        application/xml:
          example: |
            <!-- * Check if Service Composer firewall and Distributed Firewall are in sync -->

            <keyValues>
              <keyValue>
                <key>getServiceComposerFirewallOutOfSyncTimestamp</key>
              </keyValue>
            </keyValues>

            <!-- * Synchronize Service Composer firewall with Distributed Firewall

            <keyValues>
              <keyValue>
                <key>forceSync</key>
              </keyValue>
            </keyValues>

            * Retrieve the state of the auto save draft property in Service Composer

            <keyValues>
              <keyValue>
                <key>getAutoSaveDraft</key>
              </keyValue>
            </keyValues>

            * Change the state of the auto save draft property in Service Composer

            <keyValues>
              <keyValue>
                <key>autoSaveDraft</key>
                <value>false</value>
              </keyValue>
            </keyValues> -->
  /policy/securitygroup/{ID}/securitypolicies:
    displayName: secGroupPolicies
    description: |
      Working with Security Policies Mapped to a Security Group
      -----
    uriParameters:
      ID:
        displayName: ID
        description: Specified security group ID
    get:
      displayName: secGroupPoliciesRead
      description: Retrieve security policies mapped to a security group.
/2.0/services/snmp:
  # new is 6.2.3
  displayName: snmp
  description: |
    Working with SNMP
    =================
    NSX Manager receives events from other NSX components, including NSX Edge,
    network fabric, and hypervisors.
    ___
    You can configure NSX Manager to forward SNMP traps to an SNMP Manager.
  /status:
    displayName: snmpStatus
    description: |
      Working with SNMP Status Settings
      -----
      You can configure settings for SNMP on the NSX Manager.

      -------------------------
      Parameter | Description
      ----------|------------
      serviceStatus | Boolean. Set to true to enable SNMP. There must be at least one SNMP manager configured to enable SNMP.
      groupNotification | Boolean. Set to true to group similar SNMP notifications. This reduces the number of notifications being sent out, which can improve SNMP manager performance when there is a high volume of SNMP notifications.
    get:
      displayName: snmpStatusRead
      description: |
        Retrieve SNMP status settings.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.
      responses:
        200:
          body:
            application/xml:
              example: |
                <snmpServiceStatus>
                  <serviceStatus>false</serviceStatus>
                  <groupedNotification>true</groupedNotification>
                </snmpServiceStatus>
    put:
      displayName: snmpStatusUpdate
      description: |
        Update SNMP status settings.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.
      body:
        application/xml:
          example: |
            <snmpServiceStatus>
              <serviceStatus>true</serviceStatus>
              <groupedNotification>true</groupedNotification>
            </snmpServiceStatus>
  /manager:
    displayName: snmpManagers
    description: |
      Working with SNMP Managers
      -----
    get:
      displayName: snmpManagersList
      description: |
        Retrieve information about SNMP managers.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.
      responses:
        200:
          body:
            application/xml:
              example: |
                <snmpManagers>
                  <snmpManager>
                    <managerId>1330</managerId>
                    <ip>10.10.10.10</ip>
                    <port>162</port>
                    <communityString>NSXManager</communityString>
                    <enabled>true</enabled>
                  </snmpManager>
                  <snmpManager>
                    <managerId>1331</managerId>
                    <ip>10.10.10.11</ip>
                    <port>162</port>
                    <communityString>NSXManager</communityString>
                    <enabled>true</enabled>
                  </snmpManager>
                </snmpManagers>
    post:
      displayName: snmpManagerCreate
      description: |
        Add an SNMP manager.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.
      body:
        application/xml:
          example: |
            <snmpManager>
              <ip>10.10.10.10</ip>
              <port>162</port>
              <communityString>NSXManager</communityString>
              <enabled>true</enabled>
            </snmpManager>
    /{managerId}:
      displayName: snmpManager
      description: |
        Working with a Specific SNMP Manager
        ------------------------------------
      uriParameters:
        managerId:
          displayName: managerId
          description: ID of the SNMP manager.
      get:
        displayName: snmpManagerRead
        description: |
          Retrieve information about the specified SNMP manager.

          **Method history:**

          Release | Modification
          --------|-------------
          6.2.3 | Method introduced.
        responses:
          200:
            body:
              application/xml:
                example: |
                  <snmpManager>
                    <managerId>1330</managerId>
                    <ip>10.10.10.10</ip>
                    <port>162</port>
                    <communityString>NSXManager</communityString>
                    <enabled>true</enabled>
                  </snmpManager>
      put:
        displayName: snmpManagerUpdate
        description: |
          Update an SNMP manager configuration.

          **Method history:**

          Release | Modification
          --------|-------------
          6.2.3 | Method introduced.
        body:
          application/xml:
            example: |
              <snmpManager>
                <managerId>1330</managerId>
                <ip>10.10.10.10</ip>
                <port>162</port>
                <communityString>NSXManager</communityString>
                <enabled>false</enabled>
              </snmpManager>
      delete:
        displayName: snmpManagerDelete
        description: |
          Delete an SNMP manager configuration.

          **Method history:**

          Release | Modification
          --------|-------------
          6.2.3 | Method introduced.
  /trap:
    displayName: snmpTraps
    description: |
      Working with SNMP Traps
      -----------------------
    get:
      displayName: snmpTrapsList
      description: |
        Retrieve information about SNMP traps.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.
      responses:
        200:
          body:
            application/xml:
              example: |
                <trapConfigs>
                  <trapConfig>
                    <eventId>300001</eventId>
                    <oid>1.3.6.1.4.1.6876.90.1.2.10.0.1</oid>
                    <componentName>ServiceComposer</componentName>
                    <enabled>true</enabled>
                  </trapConfig>
                  <trapConfig>
                    <eventId>300009</eventId>
                    <oid>1.3.6.1.4.1.6876.90.1.2.10.0.10</oid>
                    <componentName>ServiceComposer</componentName>
                    <enabled>true</enabled>
                  </trapConfig>
                  ...
                </trapConfigs>
    /{oid}:
      displayName: snmpTrap
      description: |
        Working with a Specific SNMP Trap
        -----------------------
      uriParameters:
        oid:
          displayName: oid
          description: SNMP object identifier.
      get:
        displayName: snmpTrapRead
        description: |
          Retrieve information about the specified SNMP trap.

          **Method history:**

          Release | Modification
          --------|-------------
          6.2.3 | Method introduced.
        responses:
          200:
            body:
              application/xml:
                example: |
                  <trapConfig>
                    <eventId>321100</eventId>
                    <oid>1.3.6.1.4.1.6876.90.1.2.9.0.6</oid>
                    <componentName>Messaging</componentName>
                    <enabled>true</enabled>
                  </trapConfig>
      put:
        displayName: snmpTrapUpdate
        description: |
          Update the specified SNMP trap.

          **Method history:**

          Release | Modification
          --------|-------------
          6.2.3 | Method introduced.
        body:
          application/xml:
            example: |
              <trapConfig>
                <oid>1.3.6.1.4.1.6876.90.1.2.3.0.1</oid>
                <enabled>false</enabled>
              </trapConfig>
/1.0/nsx/cli:
  displayName: nsxCli
  description: |
    Working with the Central CLI
    =======
  post:
    displayName: nsxCliExecute
    description: |
      The central command-line interface (central CLI) commands are run from the
      NSX Manager command line, and retrieve information from the NSX Manager and other
      devices. These commands can also be executed in the API.
      ___
      You can insert any valid Central CLI command as the **command**
      parameter. For a complete list of the Central CLI commands executable
      through the API, please see the Central CLI chapter of the *NSX Command
      Line Interface Reference*.
    queryParameters:
      action:
        displayName: action
        description: Use *action=execute*.
        required: true
    headers:
      Accept:
        displayName: Accept
        description: Specify *text/plain*.
        required: true
    body:
      application/xml:
        example: |
          <nsxcli>
            <command>show logical-switch list host host-21 vni</command>
          </nsxcli>
        schema: nsxCliExecute
/2.0/vdn/inventory:
  displayName: inventoryStatus
  description: |
    Communication Status
    ====================
    This feature allows the user to check the connection status between the
    NSX Manager and hosts. A hash map is used to hold all hosts' connection
    status. It keeps track of the latest heartbeat from each host.  When
    querying a host’s connection status, NSX Manager will get the latest
    heartbeat information to compare the last heartbeat time and current time.
    If the duration is longer than a threshold, it returns *DOWN*, otherwise
    it returns *UP*. If no last heartbeat information is found and this host
    has not been prepared or the netcpa version on this host is lower than
    6.2.0, it will return *NOT_AVAILABLE*.  But if no last heartbeat
    information is found and the host has been prepared with netcpa version no
    less than 6.2.0, it will return *DOWN*. When a host has been unprepared,
    its heartbeat information will be removed from the NSX Manager memory.
  /host/{hostId}/connection/status:
    displayName: inventoryStatusHost
    description: |
      Communication Status of a Specific Host
      ---------------------------------------
    uriParameters:
      hostId:
        displayName: hostId
        description: ID of the host to check.
    get:
      displayName: inventoryStatusHostRead
      description: |
        Retrieve the status of the specified host.

        History:

        Release | Modification
        --------|-------------
        6.2.3 | Introduced **hostToControllerConnectionErrors** array.<br>Deprecated **fullSyncCount**parameter. Parameter is still present, but always has value of -1.
      responses:
        200:
          body:
            application/xml:
              example: |
                <hostConnStatus>
                  <hostId>host-xx</hostId>
                  <nsxMgrToFirewallAgentConn>UP</nsxMgrToFirewallAgentConn>
                  <nsxMgrToControlPlaneAgentConn>UP</nsxMgrToControlPlaneAgentConn>
                  <hostToControllerConn>UP</hostToControllerConn>
                  <fullSyncCount>-1</fullSyncCount>
                </hostConnStatus>
  /hosts/connection/status:
    displayName: inventoryStatusHost
    description: |
      Communication Status of a List of Hosts
      ---------------------------------------
    get:
      displayName: inventoryStatusHostList
      description: |
        Retrieve the status of a list of hosts.

        Release | Modification
        --------|-------------
        6.2.3 | Introduced **hostToControllerConnectionErrors** array.<br>Deprecated **fullSyncCount**parameter. Parameter is still present, but always has value of -1.

      queryParameters:
        hostId:
          displayName: hostId
          description: |
            ID of a host to check. You can provide multiple hosts with
            ?hostId=*host1*&hostId=*host2*...
      responses:
        200:
          body:
            application/xml:
              example: |
                <hostConnStatusList>
                  <hostConnStatuses>
                    <hostConnStatus>
                      <hostId>host-31</hostId>
                      <nsxMgrToFirewallAgentConn>UP</nsxMgrToFirewallAgentConn>
                      <nsxMgrToControlPlaneAgentConn>UP</nsxMgrToControlPlaneAgentConn>
                      <hostToControllerConn>UP</hostToControllerConn>
                      <fullSyncCount>-1</fullSyncCount>
                    </hostConnStatus>
                    <hostConnStatus>
                      <hostId>host-32</hostId>
                      <nsxMgrToFirewallAgentConn>UP</nsxMgrToFirewallAgentConn>
                      <nsxMgrToControlPlaneAgentConn>UP</nsxMgrToControlPlaneAgentConn>
                      <hostToControllerConn>DOWN</hostToControllerConn>
                      <fullSyncCount>-1</fullSyncCount>
                      <hostToControllerConnectionErrors>
                        <hostToControllerConnectionError>
                          <controllerIp>10.160.203.236</controllerIp>
                          <errorCode>1255604</errorCode>
                          <errorMessage>Connection Refused</errorMessage>
                          </hostToControllerConnectionError>
                          <hostToControllerConnectionError>
                          <controllerIp>10.160.203.237</controllerIp>
                          <errorCode>1255603</errorCode>
                          <errorMessage>SSL Handshake Failure</errorMessage>
                        </hostToControllerConnectionError>
                      </hostToControllerConnectionErrors>
                    </hostConnStatus>
                    ...
                  </hostConnStatuses>
                </hostConnStatusList>
/2.0/vdn/hardwaregateways:
  displayName: hardwareGateways
  description: |
    Working with Hardware Gateways
    ============
  post:
    displayName: hardwareGatewayCreate
    description: |
      Install a hardware gateway.

      **bfdEnabled** is true by default.

      **Method history:**

      Release | Modification
      --------|-------------
      6.2.3 | Method introduced.
    body:
      application/xml:
        example: |
          <hardwareGatewaySpec>
            <name></name>
            <description></description>
            <certificate></certificate>
            <bfdEnabled></bfdEnabled>
          </hardwareGatewaySpec>
  get:
    displayName: hardwareGatewaysList
    description: |
      Retrieve information about all hardware gateways.

      **Method history:**

      Release | Modification
      --------|-------------
      6.2.3 | Method introduced.
    responses:
      200:
        body:
          application/xml:
            example: |
              <list>
                  <hardwareGateway>
                    <objectId>torgateway-1</objectId>
                    <revision>0</revision>
                    <name>torgateway1</name>
                    <description>this is tor instance 1</description>
                    <clientHandle />
                    <isUniversal>false</isUniversal>
                    <universalRevision>0</universalRevision>
                    <uuid>6536bcf5-2f55-47f6-8b26-9fa632061d8c</uuid>
                    <status>UP</status>
                    <thumbprint>B9:0E:E9:6C:AA:7B:AD:11:64:4C:33:92:4E:0C:D8:16:10:95:02:A7</thumbprint>
                    <bfdEnabled>true</bfdEnabled>
                    <managementIp>10.116.255.160</managementIp>
                    <bindingCount>2</bindingCount>
                  </hardwareGateway>
                  <hardwareGateway>
                    <objectId>torgateway-2</objectId>
                    <revision>0</revision>
                    <name>torgateway2</name>
                    <description>this is tor instance 2</description>
                    <clientHandle />
                    <isUniversal>false</isUniversal>
                    <universalRevision>0</universalRevision>
                    <uuid>f1e9b733-c0c3-4905-b00d-4bd6d8649f48</uuid>
                    <status>UP</status>
                    <thumbprint>3C:9D:C0:9B:F7:57:AF:EA:6A:9F:49:27:7B:23:25:D3:5E:0D:53:ED</thumbprint>
                    <bfdEnabled>true</bfdEnabled>
                    <managementIp>10.116.251.149</managementIp>
                    <bindingCount>2</bindingCount>
                  </hardwareGateway>
              </list>
  /{hardwareGatewayId}:
    displayName: hardwareGatewayId
    description: |
      Working With a Specific Hardware Gateway
      ----
    uriParameters:
      hardwareGatewayId:
        displayName: hardwareGatewayId
        description: Object ID of the hardware gateway.
        required: true
    get:
      displayName: hardwareGatewayRead
      description: |
        Retrieve information about the specified hardware gateway.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.
      responses:
        200:
          body:
            application/xml:
              example: |
                <hardwareGateway>
                  <objectId>torgateway-1</objectId>
                  <revision>0</revision>
                  <name>torgateway1</name>
                  <description>this is tor instance 1</description>
                  <clientHandle />
                  <isUniversal>false</isUniversal>
                  <universalRevision>0</universalRevision>
                  <uuid>6536bcf5-2f55-47f6-8b26-9fa632061d8c</uuid>
                  <status>UP</status>
                  <thumbprint>B9:0E:E9:6C:AA:7B:AD:11:64:4C:33:92:4E:0C:D8:16:10:95:02:A7</thumbprint>
                  <bfdEnabled>true</bfdEnabled>
                  <managementIp>10.116.255.160</managementIp>
                  <bindingCount>2</bindingCount>
                </hardwareGateway>
    put:
      displayName: hardwareGatewayUpdate
      description: |
        Update the specified hardware gateway.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.
      body:
        application/xml:
          example: |
            <hardwareGatewaySpec>
              <name></name>
              <description></description>
              <certificate></certificate>
              <bfdEnabled></bfdEnabled>
            </hardwareGatewaySpec>
    delete:
      displayName: hardwareGatewayDelete
      description: |
        Delete the specified hardware gateway.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.
    /switches:
      displayName: hardwareGatewaySwitches
      description: | 
        Working With Switches on a Specific Hardware Gateway
        -----
      get:
        displayName: hardwareGatewaySwitchesList
        description: |
          Retrieve information about switches on the specified hardware
          gateway.

          **Method history:**

          Release | Modification
          --------|-------------
          6.2.3 | Method introduced.
        responses:
          200:
            body:
              application/xml:
                example: |
                  <hardwareGatewaySwitches>
                    <hardwareGatewaySwitch>
                      <switchname>1-switch-579</switchname>
                      <description />
                      <faults />
                    </hardwareGatewaySwitch>
                    <hardwareGatewayId>torgateway-1</hardwareGatewayId>
                  </hardwareGatewaySwitches>
      /{switchName}:
        displayName: hardwareGatewaySwitch
        description: |
          Working With a Specific Switch on a Specific Hardware Gateway
          -----
        /switchports:
          displayName: hardwareGatewaySwitchPorts
          description: |
            Working With Ports on a Specific Switch on a Specific Hardware Gateway
            ----
          get:
            displayName: hardwareGatewaySwitchPortsList
            description: |
              Retrive information about the hardware gateway switch ports for
              the specified switch and hardware gateway.

              **Method history:**

              Release | Modification
              --------|-------------
              6.2.3 | Method introduced.
            responses:
              200:
                body:
                  application/xml:
                    example: |
                      <hardwareGatewaySwitchPorts>
                          <hardwareGatewaySwitchPort>
                            <portname>p4</portname>
                            <description />
                            <faults />
                          </hardwareGatewaySwitchPort>
                          <hardwareGatewaySwitchPort>
                            <portname>p3</portname>
                            <description />
                            <faults />
                          </hardwareGatewaySwitchPort>
                          <hardwareGatewaySwitchPort>
                            <portname>p2</portname>
                            <description />
                            <faults />
                          </hardwareGatewaySwitchPort>
                          <hardwareGatewaySwitchPort>
                            <portname>p1</portname>
                            <description />
                            <faults />
                          </hardwareGatewaySwitchPort>
                          <hardwareGatewaySwitch>
                            <switchname>1-switch-579</switchname>
                          </hardwareGatewaySwitch>
                          <hardwareGatewayId>torgateway-1</hardwareGatewayId>
                      </hardwareGatewaySwitchPorts>
  /replicationcluster:
    displayName: hardwareGatewayReplicationCluster
    description: |
      Working With the Hardware Gateway Replication Cluster
      ----
    put:
      displayName: hardwareGatewayReplicationClusterUpdate
      description: |
        Update the hardware gateway replication cluster.
        ___
        Add or remove hosts on a replication cluster.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.
      body:
        appplication/xml:
          example: |
            <replicationCluster>
              <hosts>
                <basicinfo>
                  <objectId>host-20</objectId>
                </basicinfo>
                <basicinfo>
                  <objectId>host-21</objectId>
                </basicinfo>
                <basicinfo>
                  <objectId>host-26</objectId>
                </basicinfo>
              </hosts>
            </replicationCluster>
    get:
      displayName: hardwareGatewayReplicationClusterRead
      description: |
        Retrieve information about the hardware gateway replication cluster.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.
      responses:
        200:
          body:
            application/xml:
              example: |
                <replicationCluster>
                  <hosts>
                    <basicinfo>
                      <objectId>host-26</objectId>
                      <objectTypeName>HostSystem</objectTypeName>
                      <vsmUuid>422874E3-6873-972C-DE9E-67D5B846042E</vsmUuid>
                      <nodeId>e5a97efd-89e1-44b1-bfe8-9d07a8d92f08</nodeId>
                      <revision>32</revision>
                      <type>
                        <typeName>HostSystem</typeName>
                      </type>
                      <name>10.116.254.9</name>
                      <scope>
                        <id>domain-c24</id>
                        <objectTypeName>ClusterComputeResource</objectTypeName>
                        <name>ComputeCluster2-$$</name>
                      </scope>
                      <clientHandle />
                      <extendedAttributes />
                      <isUniversal>false</isUniversal>
                      <universalRevision>0</universalRevision>
                    </basicinfo>
                    <basicinfo>
                      <objectId>host-21</objectId>
                      <objectTypeName>HostSystem</objectTypeName>
                      <vsmUuid>422874E3-6873-972C-DE9E-67D5B846042E</vsmUuid>
                      <nodeId>e5a97efd-89e1-44b1-bfe8-9d07a8d92f08</nodeId>
                      <revision>31</revision>
                      <type>
                        <typeName>HostSystem</typeName>
                      </type>
                      <name>10.116.247.220</name>
                      <scope>
                        <id>domain-c18</id>
                        <objectTypeName>ClusterComputeResource</objectTypeName>
                        <name>ComputeCluster1-$$</name>
                      </scope>
                      <clientHandle />
                      <extendedAttributes />
                      <isUniversal>false</isUniversal>
                      <universalRevision>0</universalRevision>
                    </basicinfo>
                    <basicinfo>
                      <objectId>host-20</objectId>
                      <objectTypeName>HostSystem</objectTypeName>
                      <vsmUuid>422874E3-6873-972C-DE9E-67D5B846042E</vsmUuid>
                      <nodeId>e5a97efd-89e1-44b1-bfe8-9d07a8d92f08</nodeId>
                      <revision>33</revision>
                      <type>
                        <typeName>HostSystem</typeName>
                      </type>
                      <name>10.116.254.157</name>
                      <scope>
                        <id>domain-c18</id>
                        <objectTypeName>ClusterComputeResource</objectTypeName>
                        <name>ComputeCluster1-$$</name>
                      </scope>
                      <clientHandle />
                      <extendedAttributes />
                      <isUniversal>false</isUniversal>
                      <universalRevision>0</universalRevision>
                    </basicinfo>
                  </hosts>
                </replicationCluster>
  /bindings:
    displayName: hardwareGatewayBindings
    description: |
      Retrieve Information About Hardware Gateway Bindings
      -----
    post:
      displayName: hardwareGatewayBindingCreate
      description: |
        Create a hardware gateway binding.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.
      body:
        application/xml:
          example: |
            <hardwareGatewayBinding>
              <hardwareGatewayId></hardwareGatewayId>
              <vlan></vlan>
              <switchName></switchName>
              <portName></portName>
            </hardwareGatewayBinding>
    get:
      displayName: hardwareGatewayBindingsList
      description: |
        Retrieve information about hardware gateway bindings.

        **Method history:**

        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.
      queryParameters:
        hardwareGatewayId:
          displayName: hardwareGatewayId
          description: ID of the hardware gateway.
          required: false
          type: string
        vni:
          displayName: vni
          description: VNI of the logical switch.
          required: false
          type: integer
      responses:
        200:
          body:
            application/xml:
              example: |
                <hardwareGatewayBinding>
                  <id>hardware gateway binding id</id>
                  <hardwareGatewayId>hwgateway1</hardwareGatewayId>
                  <vlan>201</vlan>
                  <switchName>s1</switchName>
                  <portname>s1</portname>
                  <virtualWire>virtualwire-1</virtualWire>
                  <vni>5000</vni>
                </hardwareGatewayBinding>
    /{bindingId}:
      displayName: hardwareGatewayBinding
      description: |
        Working With a Specific Hardware Gateway Binding
        -----
      uriParameters:
        bindingId:
          displayName: bindingId
          description: hardware gateway binding ID.
      get:
        displayName: hardwareGatewayBindingRead
        description: |
          Retrieve information about the specified hardware gateway binding.

          **Method history:**

          Release | Modification
          --------|-------------
          6.2.3 | Method introduced.
      put:
        displayName: hardwareGatewayBindingUpdate
        description: |
          Update the specified hardware gateway binding.
          ___
          You can update the binding parameters. This API will fail if:
          * the specified *hardwareGatewayId* does not exist.
          * the specified logical switch (*virtualWire*) is not present or there is a software
            gateway on the binding.
          * the new binding value is a duplicate of an existing binding.

          **Method history:**

          Release | Modification
          --------|-------------
          6.2.3 | Method introduced.
        body:
          application/xml:
            example: |
              <hardwareGatewayBinding>
                <hardwareGatewayId>hardwaregateway1</hardwareGatewayId>
                <vlan>201</vlan>
                <switchName>s1</switchName>
                <portname>s1</portname>
                <virtualWire>virtualwire-1</virtualWire>
              </hardwareGatewayBinding>
      delete:
        displayName: hardwareGatewayBindingDelete
        description: |
          Delete the specified hardware gateway binding.

          **Method history:**

          Release | Modification
          --------|-------------
          6.2.3 | Method introduced.
      /statistic:
        displayName: hardwareGatewayBindingStatistic
        description: |
          Working with Hardware Gateway Binding Statistics
          ----
        get:
          displayName: hardwareGatewayBindingStatisticList
          description: |
            Retrieve statistics for the specified hardware gateway binding.

            **Method history:**

            Release | Modification
            --------|-------------
            6.2.3 | Method introduced.
          responses:
            200:
              body:
                application/xml:
                  example: |
                    <hardwareGatewayStats>
                      <bindingId>hwgwbinding-5</bindingId>
                      <timestamp>long type timestamp for this query response</timestamp>
                      <packetsFromLocal>23431</packetsFromLocal>
                      <bytesFromLocal>734754</bytesFromLocal>
                      <packetsToLocal>2343</packetsToLocal>
                      <bytesToLocal>74364</bytesToLocal>
                    </hardwareGatewayStats>
    /manage:
      displayName: hardwareGatewayBindingsManage
      description: |
        Working With Hardware Gateway Binding Objects
        ----
      post:
        displayName: hardwareGatewayBindingsManageUpdate
        description: |
          Manage hardware gateway binding objects.
          ___
          Use this API to attach, detach, and update multiple bindings in a
          single API call.  This API accepts three lists for add, update, and
          delete. Each list accepts a hardwareGatewayManageBindingsItem with a
          full description of the new binding with its objectID. This API
          handles a maximum of 100 HardwareGatewayManageBindingsItem objects
          for each of the Add/Update/Delete lists.

          **Method history:**

          Release | Modification
          --------|-------------
          6.2.3 | Method introduced.
        body:
          application/xml:
            example: |
              <hardwareGatewayManageBindings>
                <addItems>
                  <hardwareGatewayManageBindingItem>
                    <hardwareGatewayId></hardwareGatewayId>
                    <virtualWireId></virtualWireId>
                    <switchName></switchName>
                    <portname></portname>
                    <vlan></vlan>
                    <virtualWire></virtualWire>
                  </hardwareGatewayManageBindingItem>
                </addItems>
                <updateItems>
                  <hardwareGatewayManageBindingItem>
                    <objectId></objectId>
                    <hardwareGatewayId></hardwareGatewayId>
                    <virtualWireId></virtualWireId>
                    <switchName></switchName>
                    <portname></portname>
                    <vlan></vlan>
                    <virtualWire></virtualWire>
                  </hardwareGatewayManageBindingItem>
                </updateItems>
                <deleteItems>
                  <hardwareGatewayManageBindingItem>
                    <objectId></objectId>
                  </hardwareGatewayManageBindingItem>
                </deleteItems>
              </hardwareGatewayManageBindings>
  /bfd:
    displayName: hardwareGatewayBfd
    description: |
      Working With Hardware Gateway BFD (Bidirectional Forwarding Detection)
      -----
    /config:
      displayName: hardwareGatewayBfdConfig
      description: |
        Working With Hardware Gateway BFD Configuration
        -----
      put:
        displayName: hardwareGatewayBfdConfigUpdate
        description: |
          Update global hardware gateway BFD configuration.

          **Method history:**

          Release | Modification
          --------|-------------
          6.2.3 | Method introduced.
        body:
          application/xml:
            example: |
              <hardwareGatewayBfdParams>
                <bfdEnabled>true</bfdEnabled>
                <probeInterval>100</probeInterval>
              </hardwareGatewayBfdParams>
      get:
        displayName: hardwareGatewayBfdConfigRead
        description: |
          Retrieve global hardware gateway BFD configuration.

          **Method history:**

          Release | Modification
          --------|-------------
          6.2.3 | Method introduced.
        responses:
          200:
            body:
              application/xml:
                example: |
                  <hardwareGatewayBfdParams>
                    <bfdEnabled>true</bfdEnabled>
                    <probeInterval>100</probeInterval>
                  </hardwareGatewayBfdParams>
    /status:
      displayName: hardwareGatewayBfdStatus
      description: |
        Working With Hardware Gateway BFD Tunnel Status
        ------
      get:
        displayName: hardwareGatewayBfdStatusRead
        description: |
          Retrieve hardware gateway BFD tunnel status for all tunnel
          endpoints, including hosts and hardware gateways.

          **Method history:**

          Release | Modification
          --------|-------------
          6.2.3 | Method introduced.
        responses:
          200:
            body:
              application/xml:
                example: |
                  <hardwareGatewayBfdStatusList>
                    <statuses>
                      <hardwareGatewayBfdStatus>
                        <probeSourceId>torgateway-2</probeSourceId>
                        <bfdTunnelList>
                          <bfdTunnelStatus>
                            <diagnostic>Neighbor Signaled Session Down</diagnostic>
                            <enabled>true</enabled>
                            <forwarding>true</forwarding>
                            <info></info>
                            <localVtepIp>172.21.145.84</localVtepIp>
                            <remoteDiagnostic>Control Detection Time Expired</remoteDiagnostic>
                            <remoteState>UP</remoteState>
                            <remoteVtepIp>172.19.152.226</remoteVtepIp>
                            <state>UP</state>
                          </bfdTunnelStatus>
                          <bfdTunnelStatus>
                            <diagnostic>Neighbor Signaled Session Down</diagnostic>
                            <enabled>true</enabled>
                            <forwarding>true</forwarding>
                            <info></info>
                            <localVtepIp>172.21.145.84</localVtepIp>
                            <remoteDiagnostic>Control Detection Time Expired</remoteDiagnostic>
                            <remoteState>UP</remoteState>
                            <remoteVtepIp>172.18.171.169</remoteVtepIp>
                            <state>UP</state>
                          </bfdTunnelStatus>
                          <bfdTunnelStatus>
                            <diagnostic>Neighbor Signaled Session Down</diagnostic>
                            <enabled>true</enabled>
                            <forwarding>true</forwarding>
                            <info></info>
                            <localVtepIp>172.21.145.84</localVtepIp>
                            <remoteDiagnostic>Control Detection Time Expired</remoteDiagnostic>
                            <remoteState>UP</remoteState>
                            <remoteVtepIp>172.18.171.168</remoteVtepIp>
                            <state>UP</state>
                          </bfdTunnelStatus>
                        </bfdTunnelList>
                      </hardwareGatewayBfdStatus>
                      <hardwareGatewayBfdStatus>
                        <probeSourceId>torgateway-1</probeSourceId>
                        <bfdTunnelList>
                          <bfdTunnelStatus>
                            <diagnostic>Control Detection Time Expired</diagnostic>
                            <enabled>true</enabled>
                            <forwarding>true</forwarding>
                            <info></info>
                            <localVtepIp>172.21.145.85</localVtepIp>
                            <remoteDiagnostic>Control Detection Time Expired</remoteDiagnostic>
                            <remoteState>UP</remoteState>
                            <remoteVtepIp>172.19.152.226</remoteVtepIp>
                            <state>UP</state>
                          </bfdTunnelStatus>
                          <bfdTunnelStatus>
                            <diagnostic>Neighbor Signaled Session Down</diagnostic>
                            <enabled>true</enabled>
                            <forwarding>true</forwarding>
                            <info></info>
                            <localVtepIp>172.21.145.85</localVtepIp>
                            <remoteDiagnostic>Control Detection Time Expired</remoteDiagnostic>
                            <remoteState>UP</remoteState>
                            <remoteVtepIp>172.18.171.168</remoteVtepIp>
                            <state>UP</state>
                          </bfdTunnelStatus>
                          <bfdTunnelStatus>
                            <diagnostic>Neighbor Signaled Session Down</diagnostic>
                            <enabled>true</enabled>
                            <forwarding>true</forwarding>
                            <info></info>
                            <localVtepIp>172.21.145.85</localVtepIp>
                            <remoteDiagnostic>Control Detection Time Expired</remoteDiagnostic>
                            <remoteState>UP</remoteState>
                            <remoteVtepIp>172.18.171.169</remoteVtepIp>
                            <state>UP</state>
                          </bfdTunnelStatus>
                        </bfdTunnelList>
                      </hardwareGatewayBfdStatus>
                    </statuses>
                  </hardwareGatewayBfdStatusList>
