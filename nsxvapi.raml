#%RAML 0.8
title: VMware NSX for vSphere
baseUri: https://{nsxmanager}/api
documentation:
 - title: Introduction
   content: !include documentation/introduction.md
 - title: part-number
   content: EN-002339-01
baseUriParameters:
  nsxmanager:
    displayName: nsxManager
    description: Hostname or IP address of the NSX Manager.
version: 6.3
securedBy: [basic]
schemas:
  - advancedConfigUpdate: !include schemas/advancedConfigUpdate.xsd
    allUsersUpdate: !include schemas/allUsersUpdate.xsd
    applianceMgrBackupSettingsUpdate: !include schemas/applianceMgrBackupSettingsUpdate.xsd
    applianceUpdate: !include schemas/applianceUpdate.xsd
    applicationProfilesCreate: !include schemas/applicationProfilesCreate.xsd
    applicationProfileUpdate: !include schemas/applicationProfileUpdate.xsd
    appRulesCreate: !include schemas/appRulesCreate.xsd
    appRuleUpdate: !include schemas/appRuleUpdate.xsd
    arpMACUpdate: !include schemas/arpMACUpdate.xsd
    authSettingsUpdate: !include schemas/authSettingsUpdate.xsd
    autoConfigUpdate: !include schemas/autoConfigUpdate.xsd
    bridingUpdate: !include schemas/bridingUpdate.xsd
    certificateCreate: !include schemas/certificateCreate.xsd
    certificateSelfSignedCreate: !include schemas/certificateSelfSignedCreate.xsd
    clientConfigUpdate: !include schemas/clientConfigUpdate.xsd
    cliSettingsUpdate: !include schemas/cliSettingsUpdate.xsd
    clusterUpdate: !include schemas/clusterUpdate.xsd
    controller: !include schemas/controller.xsd
    controllerSyslog: !include schemas/controllerSyslog.xsd
    crlCreate: !include schemas/crlCreate.xsd
    csrCreate: !include schemas/csrCreate.xsd
    dataCollectionKillSwitchToggle: !include schemas/dataCollectionKillSwitchToggle.xsd
    dataCollectionVMCreate: !include schemas/dataCollectionVMCreate.xsd
    defaultFirewallPolicyUpdate: !include schemas/defaultFirewallPolicyUpdate.xsd
    dfwConfigImport: !include schemas/dfwConfigImport.xsd
    dfwDraftsCreate: !include schemas/dfwDraftsCreate.xsd
    dfwDraftUpdate: !include schemas/dfwDraftUpdate.xsd
    dfwIPFixUpdate: !include schemas/dfwIPFixUpdate.xsd
    dfwPerformanceUpdate: !include schemas/dfwPerformanceUpdate.xsd
    dfwSection: !include schemas/dfwSection.xsd
    dfwThresholdsUpdate: !include schemas/dfwThresholdsUpdate.xsd
    dfwRule: !include schemas/dfwRule.xsd
    dhcpRelayUpdate: !include schemas/dhcpRelayUpdate.xsd
    dhcpUpdate: !include schemas/dhcpUpdate.xsd
    dhcpPoolCreate: !include schemas/dhcpPoolCreate.xsd
    dhcpStaticBindingCreate: !include schemas/dhcpStaticBindingCreate.xsd
    applianceDnsClientUpdate: !include schemas/applianceDnsClientUpdate.xsd
    domainCreate: !include schemas/domainCreate.xsd
    edgeDnsUpdate: !include schemas/edgeDnsUpdate.xsd
    edgeNatConfig: !include schemas/edgeNatConfig.xsd
    edgeNatRulesCreate: !include schemas/edgeNatRulesCreate.xsd
    edgeNatRuleUpdate: !include schemas/edgeNatRuleUpdate.xsd
    eLogServerCreate: !include schemas/eLogServerCreate.xsd
    firewallRuleUpdate: !include schemas/firewallRuleUpdate.xsd
    firewallRulesCreate: !include schemas/firewallRulesCreate.xsd
    flowsExcludeCreate: !include schemas/flowsExcludeCreate.xsd
    globalFirewallConfigUpdate: !include schemas/globalFirewallConfigUpdate.xsd
    hierarchyCreate: !include schemas/hierarchyCreate.xsd
    highAvailabilityCreate: !include schemas/highAvailabilityCreate.xsd
    installPackagesCreate: !include schemas/installPackagesCreate.xsd
    installPackageUpdate: !include schemas/installPackageUpdate.xsd
    interfacesCreate: !include schemas/interfacesCreate.xsd
    ipAddressRequest: !include schemas/ipAddressRequest.xsd
    ipPool: !include schemas/ipPool.xsd
    ipPoolUpdate: !include schemas/ipPoolUpdate.xsd
    ipsetCreate: !include schemas/ipsetCreate.xsd
    ipsetUpdate: !include schemas/ipsetUpdate.xsd
    layer3RedirectSectionsCreate: !include schemas/layer3RedirectSectionsCreate.xsd
    layer3RedirectSectionUpdate: !include schemas/layer3RedirectSectionUpdate.xsd
    layoutUpdate: !include schemas/layoutUpdate.xsd
    lbMonitorsCreate: !include schemas/lbMonitorsCreate.xsd
    lbMonitorUpdate: !include schemas/lbMonitorUpdate.xsd
    ldapServerCreate: !include schemas/ldapServerCreate.xsd
    loadBalancerConfig: !include schemas/loadBalancerConfig.xsd
    logicalSwitchCreate: !include schemas/logicalSwitchCreate.xsd
    logicalSwitchUpdate: !include schemas/logicalSwitchUpdate.xsd
    logicalSwitchVmAttach: !include schemas/logicalSwitchVmAttach.xsd
    logicalSwitchConnCheck: !include schemas/logicalSwitchConnCheck.xsd
    logicalSwitchPing: !include schemas/logicalSwitchPing.xsd
    macSetCreateUpdate: !include schemas/macSetCreateUpdate.xsd
    mgmtInterfaceUpdate: !include schemas/mgmtInterfaceUpdate.xsd
    netExtipPoolsCreate: !include schemas/netExtipPoolsCreate.xsd
    netExtipPoolsUpdate: !include schemas/netExtipPoolsUpdate.xsd
    nsxControllerPasswordUpdate: !include schemas/nsxControllerPasswordUpdate.xsd
    nsxCliExecute: !include schemas/nsxCliExecute.xsd
    nsxEdgesCreate: !include schemas/nsxEdgesCreate.xsd
    edgeDnsClientUpdate: !include schemas/edgeDnsClientUpdate.xsd
    nsxEdgeUpdate: !include schemas/nsxEdgeUpdate.xsd
    nsxEdgeFirewallConfigUpdate: !include schemas/nsxEdgeFirewallConfigUpdate.xsd
    nwFabricConfig: !include schemas/nwFabricConfig.xsd
    nwfabricClustersUpdate: !include schemas/nwfabricClustersUpdate.xsd
    nwfabricHostsUpdate: !include schemas/nwfabricHostsUpdate.xsd
    poolsCreate: !include schemas/poolsCreate.xsd
    poolUpdate: !include schemas/poolUpdate.xsd
    privateNetworksCreate: !include schemas/privateNetworksCreate.xsd
    privateNetworkUpdate: !include schemas/privateNetworkUpdate.xsd
    routingBGPUpdate: !include schemas/routingBGPUpdate.xsd
    routingConfigUpdate: !include schemas/routingConfigUpdate.xsd
    routingConfigStaticUpdate: !include schemas/routingConfigStaticUpdate.xsd
    routingGlobalConfigUpdate: !include schemas/routingGlobalConfigUpdate.xsd
    routingOSPFUpdate: !include schemas/routingOSPFUpdate.xsd
    rulesCreate: !include schemas/rulesCreate.xsd
    ruleUpdate: !include schemas/ruleUpdate.xsd
    scriptCreate: !include schemas/scriptCreate.xsd
    scriptFileIDUpdate: !include schemas/scriptFileIDUpdate.xsd
    scriptUpdate: !include schemas/scriptUpdate.xsd
    secGroupBulkCreate: !include schemas/secGroupBulkCreate.xsd
    secGroupBulkUpdate: !include schemas/secGroupBulkUpdate.xsd
    secGroupObjectUpdate: !include schemas/secGroupObjectUpdate.xsd
    securityFabricCreate: !include schemas/securityFabricCreate.xsd
    securityPolicyCreate: !include schemas/securityPolicyCreate.xsd
    securityPolicyIDUpdate: !include schemas/securityPolicyIDUpdate.xsd
    securityTagCreate: !include schemas/securityTagCreate.xsd
    serverSettingsUpdate: !include schemas/serverSettingsUpdate.xsd
    serviceGroupsCreate: !include schemas/serviceGroupsCreate.xsd
    serviceGroupUpdate: !include schemas/serviceGroupUpdate.xsd
    servicesScopeCreate: !include schemas/servicesScopeCreate.xsd
    serviceUpdate: !include schemas/serviceUpdate.xsd
    serviceUpgrade: !include schemas/serviceUpgrade.xsd
    solutionIPPortSet: !include schemas/solutionIPPortSet.xsd
    spoofGuardPoliciesCreate: !include schemas/spoofGuardPoliciesCreate.xsd
    spoofGuardPolicyApprove: !include schemas/spoofGuardPolicyApprove.xsd
    spoofGuardPolicyUpdate: !include schemas/spoofGuardPolicyUpdate.xsd
    sslVPNUpdate: !include schemas/sslVPNUpdate.xsd
    ssoConfig: !include schemas/ssoConfig.xsd
    syslogUpdate: !include schemas/syslogUpdate.xsd
    systemLocaleUpdate: !include schemas/systemLocaleUpdate.xsd
    systemSyslogServerUpdate: !include schemas/systemSyslogServerUpdate.xsd
    systemTimeUpdate: !include schemas/systemTimeUpdate.xsd
    traceflowCreate: !include schemas/traceflowCreate.xsd
    universalSyncConfigurationNsxManagersCreate: !include schemas/universalSyncConfigurationNsxManagersCreate.xsd
    universalSyncConfigurationManagersUpdate: !include schemas/universalSyncConfigurationManagersUpdate.xsd
    userRoleMgmtCreate: !include schemas/userRoleMgmtCreate.xsd
    userRoleMgmtUpdate: !include schemas/userRoleMgmtUpdate.xsd
    usersCreate: !include schemas/usersCreate.xsd
    usersUpdate: !include schemas/usersUpdate.xsd
    vcConfig: !include schemas/vcConfig.xsd
    vdsContext: !include schemas/vdsContext.xsd
    vdnSegment: !include schemas/vdnSegment.xsd
    vdnSegmentUpdate: !include schemas/vdnSegmentUpdate.xsd
    vdnMulticast: !include schemas/vdnMulticast.xsd
    vdnMulticastUpdate: !include schemas/vdnMulticastUpdate.xsd
    vdnScopeCreate: !include schemas/vdnScopeCreate.xsd
    vdnScopeEdit: !include schemas/vdnScopeEdit.xsd
    vdnScopeUpdate: !include schemas/vdnScopeUpdate.xsd
    virtualServersCreate: !include schemas/virtualServersCreate.xsd
    vShieldVendorCreate: !include schemas/vShieldVendorCreate.xsd
    vShieldSolutionCreate: !include schemas/vShieldSolutionCreate.xsd
    vShieldSolutionActivate: !include schemas/vShieldSolutionActivate.xsd
    webResourcesCreate: !include schemas/webResourcesCreate.xsd
securitySchemes:
  - basic:
      type: Basic Authentication
/2.0/vdn/switches:
  displayName: vdsManage
  description: |
    Working with vSphere Distributed Switches
    ===========
  post:
    displayName: vdsPrepare
    description: |
      Prepare a vSphere Distributed Switch.
      
      The MTU is the maximum amount of data that can be transmitted in one
      packet before it is divided into smaller packets. VXLAN frames are slightly
      larger in size because of the traffic encapsulation, so the MTU required
      is higher than the standard MTU. You must set the MTU for each switch to
      1602 or higher.
    body:
      application/xml:
        example: |
          <vdsContext>
            <switch>
              <objectId>dvs-26</objectId>
              <type>
                <typeName>DistributedVirtualSwitch</typeName>
              </type>
              <name></name>
              <revision>0</revision>
              <objectTypeName>DistributedVirtualSwitch</objectTypeName>
            </switch>
            <teaming>ETHER_CHANNEL</teaming>
            <mtu>mtu-value</mtu>
          </vdsContext>
        schema: vdsContext
  get:
    displayName: vdsList
    description: |
      Retrieve information about all vSphere Distributed Switches.
    responses:
      200:
        body:
          application/xml:
            example: |
              <vdsContexts>
                <vdsContext>
                  <switch>
                    <objectId>dvs-35</objectId>
                    <objectTypeName>VmwareDistributedVirtualSwitch</objectTypeName>
                    <vsmUuid>423A993F-BEE6-1285-58F1-54E48D508D90</vsmUuid>
                    <nodeId>916287b3-761d-430b-8ab2-83878dfe3e7f</nodeId>
                    <revision>10</revision>
                    <type>
                      <typeName>VmwareDistributedVirtualSwitch</typeName>
                    </type>
                    <name>vds-site-a</name>
                    <scope>
                      <id>datacenter-21</id>
                      <objectTypeName>Datacenter</objectTypeName>
                      <name>Datacenter Site A</name>
                    </scope>
                    <clientHandle></clientHandle>
                    <extendedAttributes/>
                    <isUniversal>false</isUniversal>
                    <universalRevision>0</universalRevision>
                  </switch>
                  <mtu>1600</mtu>
                  <teaming>FAILOVER_ORDER</teaming>
                  <uplinkPortName>Uplink 4</uplinkPortName>
                  <promiscuousMode>false</promiscuousMode>
                </vdsContext>
                <vdsContext>
                  <switch>
                    <objectId>dvs-47</objectId>
                    <objectTypeName>VmwareDistributedVirtualSwitch</objectTypeName>
                    ...
                  </switch>
                  ...
                </vdsContext>
              </vdsContexts>
  /datacenter/{datacenterID}:
    displayName: vdsInDc
    description: |
      Working with vSphere Distributed Switches in a Datacenter
      ------
    uriParameters:
      datacenterID:
          required: true
          displayName: datacenterID
          description: |
            A valid datacenter ID (e.g. datacenter-21)
    get:
      displayName: vdsListInDc
      description: |
        Retrieve information about all vSphere Distributed Switches in the specified datacenter.
      responses:
        200:
          body:
            application/xml:
              example: |
                <vdsContexts>
                  <vdsContext>
                    <switch>
                      <objectId>dvs-35</objectId>
                      <objectTypeName>VmwareDistributedVirtualSwitch</objectTypeName>
                      <vsmUuid>423A993F-BEE6-1285-58F1-54E48D508D90</vsmUuid>
                      <nodeId>916287b3-761d-430b-8ab2-83878dfe3e7f</nodeId>
                      <revision>10</revision>
                      <type>
                        <typeName>VmwareDistributedVirtualSwitch</typeName>
                      </type>
                      <name>vds-site-a</name>
                      <scope>
                        <id>datacenter-21</id>
                        <objectTypeName>Datacenter</objectTypeName>
                        <name>Datacenter Site A</name>
                      </scope>
                      <clientHandle></clientHandle>
                      <extendedAttributes/>
                      <isUniversal>false</isUniversal>
                      <universalRevision>0</universalRevision>
                    </switch>
                    <mtu>1600</mtu>
                    <teaming>FAILOVER_ORDER</teaming>
                    <uplinkPortName>Uplink 4</uplinkPortName>
                    <promiscuousMode>false</promiscuousMode>
                  </vdsContext>
                  <vdsContext>
                    <switch>
                      <objectId>dvs-47</objectId>
                      <objectTypeName>VmwareDistributedVirtualSwitch</objectTypeName>
                      ...
                    </switch>
                    ...
                  </vdsContext>
                </vdsContexts>
  /{vdsId}:
    displayName: vds
    description: |
      Working With a Specific vSphere Distributed Switch
      ------
    uriParameters:
      vdsId:
          required: true
          displayName: switchId
          description: |
            A valid vSphere Distributed Switch ID (e.g. dvs-35)
    get:
      displayName: vdsShow
      description: |
        Retrieve information about the specified vSphere Distributed Switch.
      responses:
        200:
          body:
            application/xml:
              example: |
                <vdsContext>
                  <switch>
                    <objectId>dvs-35</objectId>
                    <objectTypeName>VmwareDistributedVirtualSwitch</objectTypeName>
                    <vsmUuid>423A993F-BEE6-1285-58F1-54E48D508D90</vsmUuid>
                    <nodeId>916287b3-761d-430b-8ab2-83878dfe3e7f</nodeId>
                    <revision>10</revision>
                    <type>
                      <typeName>VmwareDistributedVirtualSwitch</typeName>
                    </type>
                    <name>vds-site-a</name>
                    <scope>
                      <id>datacenter-21</id>
                      <objectTypeName>Datacenter</objectTypeName>
                      <name>Datacenter Site A</name>
                    </scope>
                    <clientHandle></clientHandle>
                    <extendedAttributes/>
                    <isUniversal>false</isUniversal>
                    <universalRevision>0</universalRevision>
                  </switch>
                  <mtu>1600</mtu>
                  <teaming>FAILOVER_ORDER</teaming>
                  <uplinkPortName>Uplink 4</uplinkPortName>
                  <promiscuousMode>false</promiscuousMode>
                </vdsContext>
    delete:
      displayName: vdsDelete
      description: |
        Delete the specified vSphere Distributed Switch.
/2.0/vdn/config:
  displayName: vdnConfig
  description: |
    Working with Segement ID Pools and Multicast Ranges
    ========

  /segments:
    displayName: vdnSegmentPools
    description: |
      Working With Segment ID Pools
      -------------
      Segment ID pools (also called segment ID ranges) provide virtual network
      identifiers (VNIs) to logical switches.
      
      You must configure a segment ID pool for each NSX Manager. You can have
      more than one segment ID pool. The segment ID pool includes the beginning
      and ending IDs.
      
      You should not configure more than 10,000 VNIs in a single vCenter
      server because vCenter limits the number of dvPortgroups to 10,000.
      
      If any of your transport zones will use multicast or hybrid replication
      mode, you must also configure a multicast address range.
    post:
      displayName: vdnSegmentPoolAdd
      description: |
        Add a segment ID pool.
        
        * **name** - Required property.
        * **desc** - Optional property.
        * **begin** - Required property. Minimum value is *5000*
        * **end** - Required property. Maximum value is *16777216*
      queryParameters:
          isUniversal:
            displayName: isUniversal
            description: |
              Set to *true* when creating a universal segment ID pool.
            type: boolean
            required: false
      body:
        application/xml:
          example: |
            <segmentRange>
              <name>Segment 1</name>
              <desc>Segment Range 1</desc>
              <begin>5000</begin>
              <end>12999</end>
            </segmentRange>
          schema: vdnSegment
    get:
      displayName: vdnSegmentPoolList
      description: |
        Retrieve information about all segment ID pools.
      responses:
        200:
          body:
            application/xml:
              example: |
                <segmentRanges>
                  <segmentRange>
                    <id>1</id>
                    <name>Local Segments</name>
                    <desc>Local Segment ID pool</desc>
                    <begin>5000</begin>
                    <end>5999</end>
                    <isUniversal>false</isUniversal>
                    <universalRevision>0</universalRevision>
                  </segmentRange>
                  <segmentRange>
                    <id>3</id>
                    <name>Universal-Segments</name>
                    <desc>Universal segment ID pool</desc>
                    <begin>200000</begin>
                    <end>201000</end>
                    <isUniversal>true</isUniversal>
                    <universalRevision>2</universalRevision>
                  </segmentRange>
                </segmentRanges>
    /{segmentPoolId}:
      displayName: vdnSegmentPool
      description: |
        Working With a Specific Segment ID Pool
        ------
      uriParameters:
        segmentPoolId:
          required: true
          displayName: segmentPoolId
          description: A valid *segmentPoolId*
      get:
        displayName: vdnSegmentPoolShow
        description: |
          Retrieve information about the specified segment ID pool.
        responses:
          200:
            body:
              application/xml:
                example: |
                  <segmentRange>
                    <id>1</id>
                    <name>Local Segments</name>
                    <desc>Local Segment ID pool</desc>
                    <begin>5000</begin>
                    <end>5999</end>
                    <isUniversal>false</isUniversal>
                    <universalRevision>0</universalRevision>
                  </segmentRange>
      put:
        displayName: vdnSegmentPoolChange
        description: |
          Update the specified segment ID pool.
          
          If the segment ID pool is universal you must send the API request to
          the primary NSX Manager.
        body:
          application/xml:
            example: |
              <segmentRange>
                <desc>Local Segment ID pool expanded</desc>
                <end>6999</end>
              </segmentRange>
            schema: vdnSegmentUpdate
      delete:
        displayName: vdnSegmentPoolDelete
        description: |
          Delete the specified segment ID pool.
          
          If the segment ID pool is universal you must send the API request to
          the primary NSX Manager.
  /multicasts:
    displayName: vdnMulticastPools
    description: |
      Working with Multicast Address Ranges
      ------
      If any of your transport zones will use multicast or hybrid replication
      mode, you must add a multicast address range (also called a multicast
      address pool). Specifying a multicast address range helps in spreading
      traffic across your network to avoid overloading a single multicast
      address.
    post:
      displayName: vdnMulticastPoolAdd
      description: |
        Add a multicast address range for logical switches.
        
        The address range includes the beginning and ending addresses.
      queryParameters:
          isUniversal:
            displayName: isUniversal
            description: |
              Set to *true* when creating a universal multicast address range.
            type: boolean
            required: false
      body:
        application/xml:
          example: |
            <multicastRange>
              <name>Range 2</name>
              <begin>237.0.0.0</begin>
              <end>237.255.255.255</end>
            </multicastRange>
          schema: vdnMulticast
    get:
      displayName: vdnMulticastPoolList
      description: |
        Retrieve information about all configured multicast address ranges.
        
        Universal multicast address ranges have the property isUniversal
        set to *true*.
      responses:
        200:
          body:
            application/xml:
              example: |
                <multicastRanges>
                  <multicastRange>
                    <id>5</id>
                    <name>239.0.0.0-239.255.255.255</name>
                    <begin>239.0.0.0</begin>
                    <end>239.255.255.255</end>
                    <isUniversal>false</isUniversal>
                    <universalRevision>0</universalRevision>
                  </multicastRange>
                  <multicastRange>
                    <id>10</id>
                    <name>Range 2</name>
                    <begin>237.0.0.0</begin>
                    <end>237.255.255.255</end>
                    <isUniversal>false</isUniversal>
                    <universalRevision>0</universalRevision>
                  </multicastRange>
                </multicastRanges>
    /{multicastAddresssRangeId}:
      displayName: vdnMulticastPool
      description: |
        Working With a Specific Multicast Address Range
        --------
      uriParameters:
        multicastAddresssRangeId:
          required: true
          displayName: multicastAddresssRangeId
          description: A valid multicast address range ID
      get:
        displayName: vdnMulticastPoolShow
        description: |
          Retrieve information about the specified multicast address range.
        responses:
          200:
            body:
              application/xml:
                example: |
                  <multicastRange>
                    <id>5</id>
                    <name>239.0.0.0-239.255.255.255</name>
                    <begin>239.0.0.0</begin>
                    <end>239.255.255.255</end>
                    <isUniversal>false</isUniversal>
                    <universalRevision>0</universalRevision>
                  </multicastRange>
      put:
        displayName: vdnMulticastPoolChange
        description: |
          Update the specified multicast address range.
          
          If the multicast address range is universal you must send the API
          request to the primary NSX Manager.
        body:
          application/xml:
            example: |
              <multicastRange>
                <name>Extended range 2</name>
                <desc>Extended range 2</desc>
                <end>238.255.255.255</end>
              </multicastRange>
            schema: vdnMulticastUpdate
      delete:
        displayName: vdnMulticastPoolDelete # dupfix vdnSegmentPoolDelete
        description: |
          Delete the specified multicast address range.
          
          If the multicast address range is universal you must send the API
          request to the primary NSX Manager.
  /vxlan/udp/port:
    displayName: vdnConfigUDP
    description: |
      Working with the VXLAN Port Configuration
      ----------
    get:
      displayName: vdnConfigUDPShow
      description: |
        Retrieve the UDP port configured for VXLAN traffic.
      responses:
        200:
          body:
            application/xml:
              example: |
                <int>4789</int>
    /{portNumber}:
      displayName: vdnConfigUDPUpdate
      description: |
        Update the VXLAN Port Configuration
        -------
      uriParameters:
        portNumber:
          required: true
          displayName: portNumber
          description: A valid UDP port for VXLAN
      put:
      # updated 6.2.3: Port change is no longer disruptive. New force query
      # parameter allows port change using the previous disruptive mechanism.
        displayName: vdnConfigUDPUpdateUpdate # dupfix vdnConfigUDPUpdate
        description: |
          Update the VXLAN port configuration to use port *portNumber*.
          
          This method changes the VXLAN port in a three phrase process, avoiding
          disruption of VXLAN traffic. In a cross-vCenter NSX environment,
          change the VXLAN port on the primary NSX Manager to propagate this
          change on all NSX Managers and hosts in the cross-vCenter NSX
          environment.
          
          **Method history:**
          
          Release | Modification
          --------|-------------
          6.2.3 | Method updated. Port change is now non-disruptive, and propagates to secondary NSX Managers if performed on the primary NSX Manager. Force parameter added.
        queryParameters:
          force:
            displayName: force
            type: boolean
            required: false
            description: |
              Set to *true* to force the change in VXLAN port.
              
              This updates the port configuration on the hosts directly, and
              might cause a disruption in VXLAN traffic. In a cross-vCenter
              NSX environment, this does not change the port on all NSX
              Managers.
    /taskStatus:
      displayName: vdnConfigUDPUpdateStatus
      description: |
        VXLAN Port Configuration Update Status
        ----
      get:
        displayName: vdnConfigUDPUpdateStatusRead
        description: |
          Retrieve the status of the VXLAN port configuration update.
          
          **Method history:**
          
          Release | Modification
          --------|-------------
          6.2.3 | Method introduced.
        responses:
          200:
            body:
              application/xml:
                example: |
                  <vxlanPortUpdatingStatus>
                    <prevPort>8472</prevPort>
                    <targetPort>4789</targetPort>
                    <taskPhase>PHASE_TWO</taskPhase>
                    <taskStatus>PAUSED</taskStatus>
                  </vxlanPortUpdatingStatus>
  /resources/allocated:
    displayName: allocatedResources
    description: |
      Working with Allocated Resources
      ------
    get:
      displayName: allocatedResourcesRead
      description: |
        Retrieve information about allocated segment IDs or multicast
        addresses.
      queryParameters:
        type:
          displayName: type
          description: set to **segmentId** or **multicastAddress**
        pagesize:
          displayName: pagesize
          description: !include documentation/reuse/pagesize-1024
          default: 256
        startindex:
          displayName: startindex
          description: !include documentation/reuse/startindex
          default: 0
  /host/{hostId}/vxlan/vteps:
    displayName: hostVtepResolve
    description: |
      Resolving Missing VXLAN VMKernel Adapters
      ----
    post:
      displayName: hostVtepResolveAction
      description: | 
        Resolve missing VXLAN VMKernel adapters.
        
        **Method history:**
        
        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.
      queryParameters:
        action:
          displayName: action
          description: | 
            * *remediate*: Use the *remediate* action to recreate the missing VXLAN VMKernel
            adapter on the host. This action removes the adapter using the
            *resync* action, then recreates the adapter.
            
            * *resync*: If the VXLAN VMKernel adapter is no longer needed, you can use the
            *resync* action to remove the missing VXLAN VMKernel adapter from
            the NSX Manager configuration database.  
          required: true
/2.0/vdn/scopes:
  displayName: vdnScopes
  description: |
    Working with Transport Zones
    ==============
  get:
    displayName: vdnScopesList
    description: |
      Retrieve information about all transport zones (also known as network
      scopes).
    responses:
      200:
        body:
          application/xml:
            example: |
              <vdnScopes>
                <vdnScope>
                  <objectId>vdnscope-1</objectId>
                  <objectTypeName>VdnScope</objectTypeName>
                  <vsmUuid>423A993F-BEE6-1285-58F1-54E48D508D90</vsmUuid>
                  <nodeId>916287b3-761d-430b-8ab2-83878dfe3e7f</nodeId>
                  <revision>0</revision>
                  <type>
                    <typeName>VdnScope</typeName>
                  </type>
                  <name>Local-Transport-Zone-A</name>
                  <description></description>
                  <clientHandle></clientHandle>
                  <extendedAttributes/>
                  <isUniversal>false</isUniversal>
                  <universalRevision>0</universalRevision>
                  <id>vdnscope-1</id>
                  <clusters>
                    <cluster>
                      <cluster>
                        <objectId>domain-c33</objectId>
                        <objectTypeName>ClusterComputeResource</objectTypeName>
                        <vsmUuid>423A993F-BEE6-1285-58F1-54E48D508D90</vsmUuid>
                        <nodeId>916287b3-761d-430b-8ab2-83878dfe3e7f</nodeId>
                        <revision>11</revision>
                        <type>
                          <typeName>ClusterComputeResource</typeName>
                        </type>
                        <name>Compute Cluster A</name>
                        <scope>
                          <id>datacenter-21</id>
                          <objectTypeName>Datacenter</objectTypeName>
                          <name>Datacenter Site A</name>
                        </scope>
                        <clientHandle></clientHandle>
                        <extendedAttributes/>
                        <isUniversal>false</isUniversal>
                        <universalRevision>0</universalRevision>
                      </cluster>
                    </cluster>
                    <cluster>
                      <cluster>
                        <objectId>domain-c41</objectId>
                        <objectTypeName>ClusterComputeResource</objectTypeName>
                        ...
                        <isUniversal>false</isUniversal>
                        <universalRevision>0</universalRevision>
                      </cluster>
                    </cluster>
                  </clusters>
                  <virtualWireCount>4</virtualWireCount>
                  <controlPlaneMode>UNICAST_MODE</controlPlaneMode>
                </vdnScope>
                <vdnScope>
                  <objectId>universalvdnscope</objectId>
                  <objectTypeName>VdnScope</objectTypeName>
                  <vsmUuid>423A993F-BEE6-1285-58F1-54E48D508D90</vsmUuid>
                  <nodeId>916287b3-761d-430b-8ab2-83878dfe3e7f</nodeId>
                  <revision>1</revision>
                  <type>
                    <typeName>VdnScope</typeName>
                  </type>
                  <name>Universal-Transport-Zone</name>
                  <clientHandle></clientHandle>
                  <extendedAttributes/>
                  <isUniversal>true</isUniversal>
                  <universalRevision>0</universalRevision>
                  <id>universalvdnscope</id>
                  <clusters>
                    <cluster>
                      <cluster>
                        <objectId>domain-c33</objectId>
                        <objectTypeName>ClusterComputeResource</objectTypeName>
                        ...
                        <isUniversal>false</isUniversal>
                        <universalRevision>0</universalRevision>
                      </cluster>
                    </cluster>
                    <cluster>
                      <cluster>
                        <objectId>domain-c41</objectId>
                        <objectTypeName>ClusterComputeResource</objectTypeName>
                        ...
                        <isUniversal>false</isUniversal>
                        <universalRevision>0</universalRevision>
                      </cluster>
                    </cluster>
                  </clusters>
                  <virtualWireCount>4</virtualWireCount>
                  <controlPlaneMode>UNICAST_MODE</controlPlaneMode>
                </vdnScope>
              </vdnScopes>
  post:
    displayName: vdnScopeCreate
    description: |
      Create a transport zone.
      
      Request body parameters:
      
        * **name** - Required. The name of the transport zone.
        * **description** - Optional. Description of the transport zone.
        * **objectId** - Required. The cluster object ID from vSphere. One or more are
          required.
        * **controlPlaneMode** - Optional. The control plane mode. It can be
          one of the following:
            * *UNICAST_MODE*
            * *HYBRID_MODE*
            * *MULTICAST_MODE*
    queryParameters:
      isUniversal:
        displayName: isUniversal
        description: |
          Set the **isUniversal** property to *true* when creating a universal
          transport zone.
        type: boolean
        required: false
    body:
      application/xml:
        example: |
          <vdnScope>
            <name>Local-Transport-Zone-B</name>
            <clusters>
              <cluster>
                <cluster>
                  <objectId>domain-c7</objectId>
                </cluster>
              </cluster>
            </clusters>
            <controlPlaneMode>UNICAST_MODE</controlPlaneMode>
          </vdnScope>
        schema: vdnScopeCreate
  /{scopeId}:
    displayName: vdnScope
    description: |
      Working with a Specific Transport Zone
      ---------
    uriParameters:
      scopeId:
        required: true
        displayName: scopeId
        description: A valid transport zone ID (vdnScope objectId)
    get:
      displayName: vdnScopeProperties
      description: |
        Retrieve information about the specified transport zone.
      responses:
        200:
          body:
            application/xml:
              example: |
                <vdnScope>
                  <objectId>vdnscope-1</objectId>
                  <objectTypeName>VdnScope</objectTypeName>
                  <vsmUuid>423A993F-BEE6-1285-58F1-54E48D508D90</vsmUuid>
                  <nodeId>916287b3-761d-430b-8ab2-83878dfe3e7f</nodeId>
                  <revision>0</revision>
                  <type>
                    <typeName>VdnScope</typeName>
                  </type>
                  <name>Local-Transport-Zone-A</name>
                  <description></description>
                  <clientHandle></clientHandle>
                  <extendedAttributes/>
                  <isUniversal>false</isUniversal>
                  <universalRevision>0</universalRevision>
                  <id>vdnscope-1</id>
                  <clusters>
                    <cluster>
                      <cluster>
                        <objectId>domain-c33</objectId>
                        <objectTypeName>ClusterComputeResource</objectTypeName>
                        <vsmUuid>423A993F-BEE6-1285-58F1-54E48D508D90</vsmUuid>
                        <nodeId>916287b3-761d-430b-8ab2-83878dfe3e7f</nodeId>
                        <revision>11</revision>
                        <type>
                          <typeName>ClusterComputeResource</typeName>
                        </type>
                        <name>Compute Cluster A</name>
                        <scope>
                          <id>datacenter-21</id>
                          <objectTypeName>Datacenter</objectTypeName>
                          <name>Datacenter Site A</name>
                        </scope>
                        <clientHandle></clientHandle>
                        <extendedAttributes/>
                        <isUniversal>false</isUniversal>
                        <universalRevision>0</universalRevision>
                      </cluster>
                    </cluster>
                    <cluster>
                      <cluster>
                        <objectId>domain-c41</objectId>
                        ...
                      </cluster>
                    </cluster>
                  </clusters>
                  <virtualWireCount>4</virtualWireCount>
                  <controlPlaneMode>UNICAST_MODE</controlPlaneMode>
                </vdnScope>
    post:
      displayName: vdnScopeChange
      description: |
        Update the specified transport zone.
        
        You can add a cluster to or delete a cluster from a transport zone.
        
        You can also repair missing portgroups. For every logical switch
        created, NSX creates a corresponding portgroup in vCenter. If the
        portgroup is lost for any reason, the logical switch will stop
        functioning. The repair action recreates any missing portgroups.
      queryParameters:
        action:
          displayName: action
          description: |
            The **action** parameter values are:
              * *expand* - add a cluster to a transport zone.
              * *shrink* - remove a cluster from a transport zone.
              * *repair* - recreate missing distributed port groups.
            
          required: true
      body:
        application/xml:
          example: |
            <vdnScope>
             <objectId>universalvdnscope</objectId>
              <clusters>
               <cluster>
                <cluster>
                 <objectId>domain-c7</objectId>
                 </cluster>
               </cluster>
              </clusters>
            </vdnScope>
          schema: vdnScopeEdit
    delete:
      displayName: vdnScopeDelete
      description: |
        Delete the specified transport zone.
    /attributes:
      displayName: vdnScopeAttribUpdate
      description: |
        Working With Transport Zone Attributes
        ----
      put:
        displayName: vdnScopeAttribUpdateUpdate  # dupfix vdnScopeAttribUpdate
        description: |
          Update the attributes of a transport zone.
          
          For example, you can update the name, description, or control plane
          mode. You must include the cluster object IDs for the transport zone
          in the request body.
        body:
          application/xml:
            example: |
              <vdnScope>
                <objectId>vdnscope-1</objectId>
                <name>Local-Transport-Zone Site-B</name>
                <clusters>
                  <cluster>
                    <cluster>
                      <objectId>domain-c7</objectId>
                    </cluster>
                  </cluster>
                </clusters>
              </vdnScope>
            schema: vdnScopeUpdate
    /conn-check/multicast:
      displayName: vdnScopeConnCheck
      description: |
        Testing Multicast Group Connectivity
        -------
      post:
        displayName: vdnScopeConnCheckExecute # dupfix vdnScopeConnCheck
        description: |
          Test multicast group connectivity.
          
          Test multicast group connectivity between two hosts connected to the
          specified transport zone.
          
          Parameter **packetSizeMode** has one of the following values:
          * *0* - VXLAN standard packet size
          * *1* - minimum packet size
          * *2* - customized packet size.
          If you set **packetSizeMode** to *2*, you must specify the size using
          the **packetSize** parameter.
        body:
          application/xml:
            example: |
              <testParameters>
                <gateway>172.23.233.1</gateway>
                <packetSizeMode>0</packetSizeMode>
                <packetSize>1600</packetSize>
                <sourceHost>
                  <hostId>host-9</hostId>
                  <switchId>dvs-22</switchId>
                  <vlanId>54</vlanId>
                </sourceHost>
                <destinationHost>
                  <hostId>host-92</hostId>
                  <switchId>dvs-22</switchId>
                  <vlanId>54</vlanId>
                </destinationHost>
              </testParameters>
/2.0/vdn/scopes/{scopeId}/virtualwires:
  displayName: logicalSwitches
  description: |
    Working with Logical Switches in a Specific Transport Zone
    ==================
  uriParameters:
      scopeId:
        required: true
        displayName: scopeId
        description: |
          A valid transport zone ID (vdnScope objectId).
  get:
    displayName: logicalSwitchList
    description: |
      Retrieve information about all logical switches in the specified
      transport zone (network scope).
    queryParameters:
      startindex:
          displayName: startindex
          description: !include documentation/reuse/startindex
          default: 0
      pagesize:
          displayName: pagesize
          description: !include documentation/reuse/pagesize-1024
          default: 20
  post:
    displayName: logicalSwitchCreate
    description: |
      Create a logical switch.
      
      To create a universal logical switch use *universalvdnscope* as the
      scopeId in the URI and send the request to the primary NSX Manager.
      Request body parameters:
        * **name** - Optional. The name of the logical switch.
        * **description** - Optional. Description of the logical switch.
        * **tenantId** - Required.
        * **controlPlaneMode** - Optional. The control plane mode. If not
          specified, the **controlPlaneMode** of the transport zone is used. It
          can be one of the following:
            * *UNICAST_MODE*
            * *HYBRID_MODE*
            * *MULTICAST_MODE*
        * **guestVlanAllowed** - Optional. Default is *false*.
    body:
      application/xml:
        example: |
          <virtualWireCreateSpec>
            <name>Web-Tier-01</name>
            <description>Web tier network</description>
            <tenantId>virtual wire tenant</tenantId>
            <controlPlaneMode>UNICAST_MODE</controlPlaneMode>
            <guestVlanAllowed>false</guestVlanAllowed>
          </virtualWireCreateSpec>
        schema: logicalSwitchCreate
/api/2.0/vdn/traceflow:
  displayName: traceflows
  description: |
    Working with Traceflow
    ================
    For Traceflow to work as expected, make sure that the controller cluster is
    connected and in healthy state. The Traceflow operation requires active
    communication between vCenter, NSX Manager, controller cluster, and netcpa
    User World Agents (UWA) on the host. Traceflow observes marked packet as it
    traverses overlay network. Each packet is delivered to host VM and
    monitored as it crosses overlay network until it reaches the destination
    VM. The packet is never delivered to the destination guest VM. This means
    that Traceflow packet delivery is successful even when the guest VM is
    powered down. Unknown L2 Packets are always be sent to the bridge.
    Typically, the bridge forwards these packets to a VLAN and reports the
    Traceflow packet as delivered. The packet which is reported as delivered
    need not necessarily mean that the trace packet was delivered to the
    destination specified. You should conclude only after validating the
    observations.vdl2 serves ARP proxy for ARP packets coming from VMs.
    However, traceflow bypasses this process, hence vdl2 may broadcast the
    traceflow packet out.
  post:
    displayName: traceflowCreate
    description: Create a traceflow.
    body:
      application/xml:
        example: |
          <traceflowRequest>
            <vnicId>74eb1145-d40b-4061-8e64-1caddf2dbf81.001</vnicId>
            <timeout>10000</timeout>
            <routed>true</routed>
            <packet class="fieldsPacketData">
              <resourceType>FieldsPacketData</resourceType>
              <ethHeader>
                <srcMac>00:50:56:83:7e:87</srcMac>
                <dstMac>00:50:56:83:fa:6c</dstMac>
                <ethType>2048</ethType>
              </ethHeader>
              <ipHeader>
                <ttl>64</ttl>
                <srcIp>172.32.1.5</srcIp>
                <dstIp>172.34.1.5</dstIp>
              </ipHeader>
            </packet>
          </traceflowRequest>
        schema: traceflowCreate
  /{traceflowId}:
    displayName: traceflow
    description: |
      Working with a Specific Traceflow
      ---------
    uriParameters:
      traceflowId:
        displayName: traceflowId
        description: Traceflow ID.
    get:
      displayName: traceflowRead
      description: |
        Query a specific traceflow by *tracflowId* which is the value returned
        after executing the create Traceflow API call.
      responses:
        200:
          body:
            application/xml:
              example: |
                <traceflowDto>
                  <operState>COMPLETE</operState>
                  <vnicId>74eb1145-d40b-4061-8e64-1caddf2dbf81.001</vnicId>
                  <id>00000000-0000-0000-0000-000056b5dec3</id>
                  <receivedCount>2</receivedCount>
                  <forwardedCount>1</forwardedCount>
                  <deliveredCount>1</deliveredCount>
                  <logicalReceivedCount>4</logicalReceivedCount>
                  <logicalDroppedCount>0</logicalDroppedCount>
                  <logicalForwardedCount>4</logicalForwardedCount>
                  <timeout>10000</timeout>
                  <completeAvailable>true</completeAvailable>
                  <result>SUCCESS</result>
                  <resultSummary>Traceflow delivered observation(s) reported</resultSummary>
                  <srcIp>172.32.1.5</srcIp>
                  <srcMac>00:50:56:83:7e:87</srcMac>
                  <dstMac>172.34.1.5</dstMac>
                  <lifMac>00:50:56:83:fa:6c</lifMac>
                </traceflowDto>
    /observations:
      displayName: traceflowObservations
      description: |
        Traceflow Observations
        -----
      get:
        displayName: traceflowObservationsList
        description: Retrieve traceflow observations.
        responses:
          200:
            body:
              application/xml:
                example: |
                  <traceflowObservations>
                    <traceflowObservationsDataPage>
                      <pagingInfo>
                        <pageSize>100</pageSize>
                        <startIndex>0</startIndex>
                        <totalCount>12</totalCount>
                        <sortOrderAscending>true</sortOrderAscending>
                        <sortBy></sortBy>
                      </pagingInfo>
                      <traceflowObservationReceived>
                        <roundId>00000000-0000-0000-0000-000056b5dec3</roundId>
                        <transportNodeId>a02fe610-5358-4a3d-8fef-7be60b7d4ea5</transportNodeId>
                        <hostName>10.146.104.42</hostName>
                        <hostId>host-22</hostId>
                        <component>PHYS</component>
                        <compDisplayName>vNIC</compDisplayName>
                        <hopCount>0</hopCount>
                      </traceflowObservationReceived>
                      <traceflowObservationLogicalReceived>
                        <roundId>00000000-0000-0000-0000-000056b5dec3</roundId>
                        <transportNodeId>a02fe610-5358-4a3d-8fef-7be60b7d4ea5</transportNodeId>
                        <hostName>10.146.104.42</hostName>
                        <hostId>host-22</hostId>
                        <component>FW</component>
                        <compDisplayName>Firewall</compDisplayName>
                        <hopCount>1</hopCount>
                      </traceflowObservationLogicalReceived>
                      <traceflowObservationLogicalForwarded>
                        <roundId>00000000-0000-0000-0000-000056b5dec3</roundId>
                        <transportNodeId>a02fe610-5358-4a3d-8fef-7be60b7d4ea5</transportNodeId>
                        <hostName>10.146.104.42</hostName>
                        <hostId>host-22</hostId>
                        <component>FW</component>
                        <compDisplayName>Firewall</compDisplayName>
                        <hopCount>2</hopCount>
                        <ruleId>1001</ruleId>
                      </traceflowObservationLogicalForwarded>
                      <traceflowObservationLogicalForwarded>
                        <roundId>00000000-0000-0000-0000-000056b5dec3</roundId>
                        <transportNodeId>a02fe610-5358-4a3d-8fef-7be60b7d4ea5</transportNodeId>
                        <hostName>10.146.104.42</hostName>
                        <hostId>host-22</hostId>
                        <component>LS</component>
                        <compDisplayName>1-switch-3</compDisplayName>
                        <hopCount>3</hopCount>
                        <vni>10000</vni>
                        <logicalCompId>universalwire-1</logicalCompId>
                        <logicalCompName>1-switch-3</logicalCompName>
                      </traceflowObservationLogicalForwarded>
                      <traceflowObservationLogicalReceived>
                        <roundId>00000000-0000-0000-0000-000056b5dec3</roundId>
                        <transportNodeId>a02fe610-5358-4a3d-8fef-7be60b7d4ea5</transportNodeId>
                        <hostName>10.146.104.42</hostName>
                        <hostId>host-22</hostId>
                        <component>LR</component>
                        <compDisplayName>1-vm-3</compDisplayName>
                        <hopCount>4</hopCount>
                        <vni>10000</vni>
                        <lifName>27100000000a</lifName>
                        <compId>10000</compId>
                        <srcNsxManager>4204ad55-71ec-927b-ca1b-aabfa36863ad</srcNsxManager>
                        <srcGlobal>true</srcGlobal>
                        <compName>default+edge-bbe379a7-e7b9-4ece-b97c-466cf746c93e</compName>
                        <logicalCompId>edge-bbe379a7-e7b9-4ece-b97c-466cf746c93e</logicalCompId>
                        <logicalCompName>1-vm-3</logicalCompName>
                        <otherLogicalCompId>universalwire-1</otherLogicalCompId>
                        <otherLogicalCompName>1-switch-3</otherLogicalCompName>
                      </traceflowObservationLogicalReceived>
                      <traceflowObservationLogicalForwarded>
                        <roundId>00000000-0000-0000-0000-000056b5dec3</roundId>
                        <transportNodeId>a02fe610-5358-4a3d-8fef-7be60b7d4ea5</transportNodeId>
                        <hostName>10.146.104.42</hostName>
                        <hostId>host-22</hostId>
                        <component>LR</component>
                        <compDisplayName>1-vm-3</compDisplayName>
                        <hopCount>5</hopCount>
                        <vni>10002</vni>
                        <lifName>27100000000c</lifName>
                        <compId>10000</compId>
                        <compName>default+edge-bbe379a7-e7b9-4ece-b97c-466cf746c93e</compName>
                        <srcNsxManager>4204ad55-71ec-927b-ca1b-aabfa36863ad</srcNsxManager>
                        <srcGlobal>true</srcGlobal>
                        <logicalCompId>edge-bbe379a7-e7b9-4ece-b97c-466cf746c93e</logicalCompId>
                        <logicalCompName>1-vm-3</logicalCompName>
                        <otherLogicalCompId>universalwire-3</otherLogicalCompId>
                        <otherLogicalCompName>3-switch-98</otherLogicalCompName>
                      </traceflowObservationLogicalForwarded>
                      <traceflowObservationLogicalReceived>
                        <roundId>00000000-0000-0000-0000-000056b5dec3</roundId>
                        <transportNodeId>a02fe610-5358-4a3d-8fef-7be60b7d4ea5</transportNodeId>
                        <hostName>10.146.104.42</hostName>
                        <hostId>host-22</hostId>
                        <component>LS</component>
                        <compDisplayName>3-switch-98</compDisplayName>
                        <hopCount>6</hopCount>
                        <vni>10002</vni>
                        <logicalCompId>universalwire-3</logicalCompId>
                        <logicalCompName>3-switch-98</logicalCompName>
                      </traceflowObservationLogicalReceived>
                      <traceflowObservationForwarded>
                        <roundId>00000000-0000-0000-0000-000056b5dec3</roundId>
                        <transportNodeId>a02fe610-5358-4a3d-8fef-7be60b7d4ea5</transportNodeId>
                        <hostName>10.146.104.42</hostName>
                        <hostId>host-22</hostId>
                        <component>PHYS</component>
                        <compDisplayName>10.146.104.42</compDisplayName>
                        <hopCount>7</hopCount>
                        <remoteIpAddress>172.19.172.142</remoteIpAddress>
                        <context>5109430534275084</context>
                      </traceflowObservationForwarded>
                      <traceflowObservationReceived>
                        <roundId>00000000-0000-0000-0000-000056b5dec3</roundId>
                        <transportNodeId>d2fd4b26-a664-423f-b0aa-8ba760cd967f</transportNodeId>
                        <hostName>10.146.103.3</hostName>
                        <hostId>host-20</hostId>
                        <component>PHYS</component>
                        <compDisplayName>10.146.103.3</compDisplayName>
                        <hopCount>8</hopCount>
                      </traceflowObservationReceived>
                      <traceflowObservationLogicalReceived>
                        <roundId>00000000-0000-0000-0000-000056b5dec3</roundId>
                        <transportNodeId>d2fd4b26-a664-423f-b0aa-8ba760cd967f</transportNodeId>
                        <hostName>10.146.103.3</hostName>
                        <hostId>host-20</hostId>
                        <component>FW</component>
                        <compDisplayName>Firewall</compDisplayName>
                        <hopCount>9</hopCount>
                      </traceflowObservationLogicalReceived>
                      <traceflowObservationLogicalForwarded>
                        <roundId>00000000-0000-0000-0000-000056b5dec3</roundId>
                        <transportNodeId>d2fd4b26-a664-423f-b0aa-8ba760cd967f</transportNodeId>
                        <hostName>10.146.103.3</hostName>
                        <hostId>host-20</hostId>
                        <component>FW</component>
                        <compDisplayName>Firewall</compDisplayName>
                        <hopCount>10</hopCount>
                        <ruleId>1001</ruleId>
                      </traceflowObservationLogicalForwarded>
                      <traceflowObservationDelivered>
                        <roundId>00000000-0000-0000-0000-000056b5dec3</roundId>
                        <transportNodeId>d2fd4b26-a664-423f-b0aa-8ba760cd967f</transportNodeId>
                        <hostName>10.146.103.3</hostName>
                        <hostId>host-20</hostId>
                        <component>PHYS</component>
                        <compDisplayName>vNIC</compDisplayName>
                        <hopCount>11</hopCount>
                        <vlanId>0</vlanId>
                      </traceflowObservationDelivered>
                    </traceflowObservationsDataPage>
                  </traceflowObservations>
/2.0/vdn/virtualwires:
  displayName: logicalSwitchesGlobal
  description: |
    Working with Logical Switches in All Transport Zones
    ===========
  get:
    displayName: logicalSwitchesRead
    description: |
      Retrieve information about all logical switches in all transport zones.
    queryParameters:
      startindex:
        displayName: startindex
        description: !include documentation/reuse/startindex
        default: 0
      pagesize:
        displayName: pagesize
        description: !include documentation/reuse/pagesize-1024
        default: 20
    responses:
      200:
        body:
          application/xml:
            example: |
              <virtualWires>
                <dataPage>
                  <pagingInfo>
                    <pageSize>20</pageSize>
                    <startIndex>0</startIndex>
                    <totalCount>13</totalCount>
                    <sortOrderAscending>true</sortOrderAscending>
                  </pagingInfo>
                  <virtualWire>
                    <objectId>virtualwire-1</objectId>
                    <objectTypeName>VirtualWire</objectTypeName>
                    <vsmUuid>423A993F-BEE6-1285-58F1-54E48D508D90</vsmUuid>
                    <nodeId>916287b3-761d-430b-8ab2-83878dfe3e7f</nodeId>
                    <revision>3</revision>
                    <type>
                      <typeName>VirtualWire</typeName>
                    </type>
                    <name>Transit-Network-01</name>
                    <description></description>
                    <clientHandle></clientHandle>
                    <extendedAttributes/>
                    <isUniversal>false</isUniversal>
                    <universalRevision>0</universalRevision>
                    <tenantId>virtual wire tenant</tenantId>
                    <vdnScopeId>vdnscope-1</vdnScopeId>
                    <vdsContextWithBacking>
                      <switch>
                        <objectId>dvs-47</objectId>
                        <objectTypeName>VmwareDistributedVirtualSwitch</objectTypeName>
                        <vsmUuid>423A993F-BEE6-1285-58F1-54E48D508D90</vsmUuid>
                        <nodeId>916287b3-761d-430b-8ab2-83878dfe3e7f</nodeId>
                        <revision>29</revision>
                        <type>
                          <typeName>VmwareDistributedVirtualSwitch</typeName>
                        </type>
                        <name>vds-mgt-edge</name>
                        <scope>
                          <id>datacenter-21</id>
                          <objectTypeName>Datacenter</objectTypeName>
                          <name>Datacenter Site A</name>
                        </scope>
                        <clientHandle></clientHandle>
                        <extendedAttributes/>
                        <isUniversal>false</isUniversal>
                        <universalRevision>0</universalRevision>
                      </switch>
                      <mtu>1600</mtu>
                      <promiscuousMode>false</promiscuousMode>
                      <backingType>portgroup</backingType>
                      <backingValue>dvportgroup-355</backingValue>
                      <missingOnVc>false</missingOnVc>
                    </vdsContextWithBacking>
                    <vdsContextWithBacking>
                      <switch>
                        <objectId>dvs-35</objectId>
                        <objectTypeName>VmwareDistributedVirtualSwitch</objectTypeName>
                        ...
                      </switch>
                      <mtu>1600</mtu>
                      <promiscuousMode>false</promiscuousMode>
                      <backingType>portgroup</backingType>
                      <backingValue>dvportgroup-354</backingValue>
                      <missingOnVc>false</missingOnVc>
                    </vdsContextWithBacking>
                    <vdnId>5000</vdnId>
                    <guestVlanAllowed>false</guestVlanAllowed>
                    <controlPlaneMode>UNICAST_MODE</controlPlaneMode>
                    <ctrlLsUuid>7ad8bc71-5857-475c-af2a-a9e5337b0944</ctrlLsUuid>
                    <macLearningEnabled>false</macLearningEnabled>
                  </virtualWire>
                  <virtualWire>
                    <objectId>virtualwire-2</objectId>
                    ...
                  </virtualWire>
                  <virtualWire>
                    <objectId>virtualwire-3</objectId>
                    ...
                  </virtualWire>
                  <virtualWire>
                    <objectId>virtualwire-4</objectId>
                    ...
                  </virtualWire>
                  <virtualWire>
                    <objectId>universalwire-1</objectId>
                    ...
                  </virtualWire>
                  ...
                  <virtualWire>
                    <objectId>virtualwire-9</objectId>
                    ...
                  </virtualWire>
                </dataPage>
              </virtualWires>
  /vm/vnic:
    displayName: logicalSwitchVmAttach
    description: |
      Working Virtual Machine Connections to Logical Switches
      -----
    post:
      displayName: logicalSwitchVmAttachCreate # dupfix logicalSwitchVmAttach
      description: |
        Attach a VM vNIC to, or detach a VM vNIC from a logical switch.
        
        Specify the logical switch ID in the **portgroupId** parameter. To
        detach a VM vNIC from a logical switch, leave the **portgroupId** parameter
        empty.
        
        To find the ID of a VM vNIC, do the following:
        1. In the vSphere MOB, navigate to the VM you want to connect or disconnect.
        2. Click **config** and take note of the **instanceUuid**.
        3. Click **hardware** and take note of the last three digits of the
        appropriate network interface device.
        
        Use these two values to form the VM vNIC ID.  For example, if the
        **instanceUuid** is *502e71fa-1a00-759b-e40f-ce778e915f16* and the
        appropriate **device** value is *device[4000]*, the **objectId** and
        **vnicUuid** are both *502e71fa-1a00-759b-e40f-ce778e915f16.000*.
      body:
        application/xml:
          example: |
            <com.vmware.vshield.vsm.inventory.dto.VnicDto>
              <objectId>502e71fa-1a00-759b-e40f-ce778e915f16.000</objectId>
              <vnicUuid>502e71fa-1a00-759b-e40f-ce778e915f16.000</vnicUuid>
              <portgroupId>virtualwire-2</portgroupId>
            </com.vmware.vshield.vsm.inventory.dto.VnicDto>
          schema: logicalSwitchVmAttach
  /{virtualWireID}:
    displayName: logicalSwitch
    description: |
      Working With a Specific Logical Switch
      ----
    uriParameters:
      virtualWireID:
        required: true
        displayName: virtualWireID
        description: A logical switch id, e.g. virtualwire-1002
    get:
      displayName: logicalSwitchShow
      description: |
        Retrieve information about the specified logical switch.
        
        If the switch is a universal logical switch the **isUniversal**
        parameter is set to true in the response body.
      responses:
        200:
          body:
            application/xml:
              example: |
                <virtualWire>
                  <objectId>universalwire-2</objectId>
                  <objectTypeName>VirtualWire</objectTypeName>
                  <vsmUuid>423A993F-BEE6-1285-58F1-54E48D508D90</vsmUuid>
                  <nodeId>916287b3-761d-430b-8ab2-83878dfe3e7f</nodeId>
                  <revision>3</revision>
                  <type>
                    <typeName>VirtualWire</typeName>
                  </type>
                  <name>ULS-Web-Tier-02</name>
                  <clientHandle></clientHandle>
                  <extendedAttributes/>
                  <isUniversal>true</isUniversal>
                  <universalRevision>2</universalRevision>
                  <tenantId>ULS-Tenant</tenantId>
                  <vdnScopeId>universalvdnscope</vdnScopeId>
                  <vdsContextWithBacking>
                    <switch>
                      <objectId>dvs-35</objectId>
                      <objectTypeName>VmwareDistributedVirtualSwitch</objectTypeName>
                      <vsmUuid>423A993F-BEE6-1285-58F1-54E48D508D90</vsmUuid>
                      <nodeId>916287b3-761d-430b-8ab2-83878dfe3e7f</nodeId>
                      <revision>29</revision>
                      <type>
                        <typeName>VmwareDistributedVirtualSwitch</typeName>
                      </type>
                      <name>vds-site-a</name>
                      <scope>
                        <id>datacenter-21</id>
                        <objectTypeName>Datacenter</objectTypeName>
                        <name>Datacenter Site A</name>
                      </scope>
                      <clientHandle></clientHandle>
                      <extendedAttributes/>
                      <isUniversal>false</isUniversal>
                      <universalRevision>0</universalRevision>
                    </switch>
                    <mtu>1600</mtu>
                    <promiscuousMode>false</promiscuousMode>
                    <backingType>portgroup</backingType>
                    <backingValue>dvportgroup-397</backingValue>
                    <missingOnVc>false</missingOnVc>
                  </vdsContextWithBacking>
                  <vdsContextWithBacking>
                    ...
                  </vdsContextWithBacking>
                  <vdnId>200001</vdnId>
                  <guestVlanAllowed>false</guestVlanAllowed>
                  <controlPlaneMode>UNICAST_MODE</controlPlaneMode>
                  <ctrlLsUuid>f360d6e5-c709-4aca-b8d1-37de500a867a</ctrlLsUuid>
                  <macLearningEnabled>false</macLearningEnabled>
                </virtualWire>
    put:
      displayName: logicalSwitchUpdate
      description: |
        Update the specified logical switch.
        
        For example, you can update the name, description, or control plane
        mode.
      body:
        application/xml:
          example: |
            <virtualWire>
              <name>ULS-Web-Tier-02 </name>
              <description>Universal Web Logical Switch</description>
              <tenantId>virtual wire tenant</tenantId>
              <controlPlaneMode>UNICAST_MODE</controlPlaneMode>
            </virtualWire>
          schema: logicalSwitchUpdate
    delete:
      displayName: logicalSwitchDelete
      description: Delete the specified logical switch.
    /backing:
      displayName: logicalSwitchPortGroupFix
      description: |
        Resolving Missing Portgroups for a Logical Switch
        ----
      post:
        displayName: logicalSwitchPortGroupFixAction
        description: |
          For every logical switch created, NSX creates a corresponding port
          group in vCenter. If the port group is missing, the logical switch
          will stop functioning.
          
          If the port group backing a logical switch is deleted, you can
          recreate a new backing port group for the logical switch.
          
          **Method history:**
          
          Release | Modification
          --------|-------------
          6.2.3 | Method introduced.
        queryParameters:
          action:
            displayName: action
            description: |
              * *remediate*: The *remediate* action performs the *resync* action and then
              creates a new backing port group for the logical switch. Under
              normal operations, you should need the *remediate* action only. 
              
              * *resync*: The *resync* action removes the association between
              the backing port group and the logical switch in the NSX Manager
              configuration. 
            required: true
    /conn-check/multicast:
      displayName: logicalSwitchConnCheck
      description: |
        Testing Host Connectivity
        -----
      post:
        displayName: logicalSwitchConnCheckExecute # dupfix logicalSwitchConnCheck
        description: |
          Test multicast group connectivity.
          
          Test multicast group connectivity between two hosts connected to the
          specified logical switch.
          
          Parameter **packetSizeMode** has one of the following values:
          * *0* - VXLAN standard packet size
          * *1* - minimum packet size
          * *2* - customized packet size.
          If you set **packetSizeMode** to *2*, you must specify the size using
          the **packetSize** parameter.
        body:
          application/xml:
            example: |
              <testParameters>
                <gateway></gateway>
                <packetSizeMode></packetSizeMode>
                <packetSize></packetSize>
                <sourceHost>
                  <hostId></hostId>
                  <switchId></switchId>
                  <vlanId></vlanId>
                </sourceHost>
                <destinationHost>
                  <hostId></hostId>
                  <switchId></switchId>
                  <vlanId></vlanId>
                </destinationHost>
              </testParameters>
            schema: logicalSwitchConnCheck
    /conn-check/p2p:
      displayName: logicalSwitchPing
      description: |
        Testing Point-to-Point Connectivity
        ----
      post:
        displayName: logicalSwitchPingExecute # dupfix logicalSwitchPing
        description: |
          Test point-to-point connectivity.
          
          Test point-to-point connectivity between two hosts connected to the
          specified logical switch.
          
          Parameter **packetSizeMode** has one of the following values:
          * *0* - VXLAN standard packet size
          * *1* - minimum packet size
          * *2* - customized packet size.
          If you set **packetSizeMode** to *2*, you must specify the size using
          the **packetSize** parameter.
        body:
          application/xml:
            example: |
              <testParameters>
                <gateway></gateway>
                <packetSizeMode></packetSizeMode>
                <packetSize></packetSize>
                <sourceHost>
                  <hostId></hostId>
                  <switchId></switchId>
                  <vlanId></vlanId>
                </sourceHost>
                <destinationHost>
                  <hostId></hostId>
                  <switchId></switchId>
                  <vlanId></vlanId>
                </destinationHost>
              </testParameters>
            schema: logicalSwitchPing
    /hardwaregateways:
      displayName: logicalSwitchHardwareGatewayBindings
      description: |
        Working with Hardware Gateway Bindings for a Specific Logical Switch
        -----
      get:
        displayName: logicalSwitchHardwareGatewayBindingsList
        description: |
          Retrieve hardware gateway bindings for the specified logical switch.
          
          **Method history:**
          
          Release | Modification
          --------|-------------
          6.2.3 | Method introduced.
        responses:
          200:
            body:
              application/xml:
                example: |
                  <list>
                    <hardwareGatewayBinding>
                      <id>torbinding-2</id>
                      <hardwareGatewayId>torgateway-1</hardwareGatewayId>
                      <switchName>1-switch-579</switchName>
                      <portname>p1</portname>
                      <vlan>0</vlan>
                      <virtualWire>virtualwire-1</virtualWire>
                      <vni>5342</vni>
                    </hardwareGatewayBinding>
                    <hardwareGatewayBinding>
                      <id>torbinding-1</id>
                      <hardwareGatewayId>torgateway-2</hardwareGatewayId>
                      <switchName>1-switch-104</switchName>
                      <portname>p1</portname>
                      <vlan>0</vlan>
                      <virtualWire>virtualwire-1</virtualWire>
                      <vni>5342</vni>
                    </hardwareGatewayBinding>
                  </list>
      /{hardwareGatewayBindingId}:
        displayName: logicalSwitchHardwareGatewayBinding
        description: |
          Working with Connections Between Hardware Gateways and Logical Switches
          -------
        uriParameters:
          hardwareGatewayBindingId:
            displayName: hardwareGatewayBindingId
            description: Hardware Gateway Binding ID.
        post:
          displayName: logicalSwitchHardwareGatewayBindingCreate
          description: |
            Manage the connection between a hardware gateway and a logical switch.
            
            ### Attach a hardware gateway to a logical switch and create a new binding with the information provided
            
            `POST /api/2.0/vdn/virtualwires/{virtualwireid}/hardwaregateways`
            
            ```
            <hardwareGatewayBinding>
              <hardwareGatewayId>hardwarewgateway1</hardwareGatewayId>
              <vlan>v1</vlan>
              <switchName>s1</switchName>
              <portName>s1</portName>
            </hardwareGatewayBinding> 
            ```
            
            ### Attach a hardware gateway to a logical switch, specifying an existing binding by ID
            
            `POST /api/2.0/vdn/virtualwires/<virtualwireId>/hardwaregateways/{bindingId}?action=attach`
            
            ```
            <virtualWire>
              ...
              <hardwareGatewayBindings>
                <hardwareGatewayBinding>
                  <id>binding id</id>
                </hardwareGatewayBinding>
              </hardwareGatewayBindings>
            </virtualWire>
            ```
            
            ### Detach a hardware gateway from a logical switch
            
            `POST /api/2.0/vdn/virtualwires/<virtualwireId>/hardwaregateways/{bindingId}?action=detach`
            
            **Method history:**
            
            Release | Modification
            --------|-------------
            6.2.3 | Method introduced.
          queryParameters:
            action:
              displayName: action
              description: |
                Specify *attach* to attach a hardware gateway to a logical
                switch.
                
                Specify *detach* to detach a hardware gateway from a logical
                switch.
              required: false
          body:
            application/xml:
              example: |
                <hardwareGatewayBinding>
                  <hardwareGatewayId>hardwarewgateway1</hardwareGatewayId>
                  <vlan>v1</vlan>
                  <switchName>s1</switchName>
                  <portName>s1</portName>
                </hardwareGatewayBinding> 
/2.0/xvs/networks/{ID}/features:
  displayName: arpMAC
  description: |
    Working with IP Discovery and MAC Learning for Logical Switches
    ==============
    You can enable IP discovery (ARP suppression) and MAC learning for logical
    switches or dvPortGroup. Enabling MAC learning builds a VLAN - MAC
    pair learning table on each vNic.
    
    This table is stored as part of the dvfilter data. During vMotion,
    dvfilter saves/restores the table at the new location. The switch then
    issues RARPs for all the VLAN - MAC entries in the table.
    
    Enabling this feature avoids possible traffic loss during vMotion in the
    following cases:
    
    * the vNic is in VLAN trunk mode
    * the VM is using more  than one unicast MAC address. Since Etherswitch
    supports only one unicast MAC per vNic, RARP is not processed.
    
    When a logical switch is created using the API, IP discovery is enabled,
    and MAC learning is disabled.
    
    In cross-vCenter NSX, the following applies:
    * The MAC learning setting for a universal logical switch is managed
    on the primary NSX Manager. Any changes are synchronized to all secondary
    NSX Managers.
    * The IP discovery setting for a universal logical switch is managed
    separately on each NSX Manager.
    
    **Note:** In NSX 6.2.2 and earlier you cannot disable IP discovery for
    universal logical switches on secondary NSX Managers.
  uriParameters:
    ID:
      required: true
      description: dvPortGroup MOID or logical switch (virtual wire) ID.
  get:
    displayName: arpMACRead
    description: Retrieve IP discovery and MAC learning information.
  put:
    displayName: arpMACUpdate # existing dupfix arpMAC
    description: |
      Enable or disable IP discovery and MAC learning.
      
      **Method history:**
      
      Release | Modification
      --------|-------------
      6.2.3 | Method updated. IP discovery can be disabled on secondary NSX Managers.
    body:
      application/xml:
        example: |
          <networkFeatureConfig>
            <ipDiscoveryConfig>
              <enabled></enabled>
            </ipDiscoveryConfig>
            <macLearningConfig>
              <enabled></enabled>
            </macLearningConfig>
          </networkFeatureConfig>
        schema: arpMACUpdate
/2.0/vdn/controller:
  displayName: nsxControllers
  description: |
    Working with NSX Controllers
    ==============
    For the unicast or hybrid control plane mode,
    you must add an NSX controller to manage overlay transport and provide
    East-West routing. The controller optimizes virtual machine broadcast (ARP
    only) traffic, and the learning is stored on the host and the controller.
  post:
    displayName: nsxControllerCreate
    description: |
      Adds a new NSX controller on the specified given cluster. The *hostId*
      parameter is optional. The *resourcePoolId* can be either the
      *clusterId* or *resourcePoolId*.
      
      The IP address of the controller node will be allocated
      from the specified IP pool. The *deployType* property determines the
      controller node memory size and can be small, medium, or large. However,
      different controller deployment types are not currently supported because
      the OVF overrides it and different OVF types require changes in the
      manager build scripts. Despite not being supported, an arbitrary
      *deployType* size must still be specified or an error will be returned.
      Request without body to upgrade controller cluster.
    body:
      application/xml:
        example: |
          <controllerSpec>
            <name></name>
            <description></description>
            <ipPoolId></ipPoolId>
            <resourcePoolId></resourcePoolId>
            <hostId></hostId>
            <datastoreId></datastoreId>
            <deployType></deployType>
            <networkId></networkId>
            <password></password>
          </controllerSpec>
        schema: controller
  get:
    displayName: nsxControllersRead
    description: |
      Retrieves details and runtime status for all controllers.  Runtime status
      can be one of the following:
      
        * **Deploying** - controller is being deployed and the procedure has not
        completed yet.
        * **Removing** - controller is being removed and the procedure has not
        completed yet.
        * **Running** - controller has been deployed and can respond to API
        invocation.
        * **Unknown** - controller has been deployed but fails to respond to API
        invocation.
    responses:
      200:
        body:
          application/xml:
            example: |
              <controllers>
                <controller>
                  <id></id>
                  <name></name>
                  <description></description>
                  <ipAddress></ipAddress>
                  <status></status>
                </controller>
              </controllers>
  /upgrade-available:
    displayName: nsxControllerUpgradeAvailability
    description: |
      Working With Controller Upgrade Availability
      ----
    get:
      displayName: nsxControllerUpgradeAvailabilityRead # dupfix nsxControllerUpgradeAvailability
      description: Retrieve controller upgrade availability.
  /progress/{jobId}:
    displayName: nsxControllerJob
    description: |
      Working With of Controller Job Status
      -----
    uriParameters:
      jobId:
        required: true
        displayName: jobId
        description: Specified job Id
    get:
      displayName: nsxControllerJobRead
      description: |
        Retrieves status of controller creation or removal. The progress gives
        a percentage indication of current deploy / remove procedure.
      responses:
        200:
          body:
            application/xml:
              example: |
                <controllerDeploymentInfo>
                  <vmId></vmId>
                  <progress></progress>
                  <status></status>
                  <exceptionMessage></exceptionMessage>
                </controllerDeploymentInfo>
  /{controllerId}:
    displayName: nsxController
    description: |
      Working with a Specific Controller
      -----
    uriParameters:
      controllerId:
        required: true
        displayName: controllerId
        description: |
          Specified controller ID.
          
          To retrieve the controller IDs, log in to the vSphere Web Client.
          Navigate to Networking & Security > Installation > Management, and
          view the **NSX Controller nodes** section. The controller ID is
          listed in the **Controller ID** or **Controller Node** column,
          depending on NSX version. An example controller ID is
          *controller-1*. 
          
          In a cross-vCenter NSX environment, retrieve the controller IDs from
          rows where the NSX Manager column contains the primary NSX Manager
          IP address.
    delete:
      displayName: nsxControllerDelete
      description: |
        Delete the NSX controller.
      queryParameters:
        forceRemoval:
          type: boolean
          required: true
          displayName: forceRemoval
          description: |
            Specify whether to force removal of controller. Must be set to
            true to remove last controller of the controller cluster.
    post:
      displayName: nsxControllerRemediateAction
      description: |
        If you power off or delete a controller from vCenter, NSX Manager
        detects the change in controller status. You can remediate the
        controller, which will power on a powered off controller, or remove the
        controller from the NSX Manager database if the controller is deleted.
        
        **Method history:**
        
        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.
      queryParameters:
        action:
          displayName: action
          description: |
            Specify *remediate* to recover from controller shutdown or deletion.
          required: true
    /systemStats:
      displayName: nsxControllerStats
      description: |
        Working With NSX Controller System Statistics
        ----
      get:
        displayName: nsxControllerStatsList
        description: |
          Retrieve NSX Controller system statistics.
          
          **Method history:**
          
          Release | Modification
          --------|-------------
          6.2.3 | Method introduced.
        responses:
          200:
            body:
              application/xml:
                example: |
                  <controllerNodeStatus>
                    <id>controller-2</id>
                    <ipAddress>192.168.110.32</ipAddress>
                    <syncTime>1490991545530</syncTime>
                    <cpuCoreCount>2</cpuCoreCount>
                    <cpuLoadInfo>
                      <interval>1</interval>
                      <averageLoad>0.17</averageLoad>
                    </cpuLoadInfo>
                    <cpuLoadInfo>
                      <interval>5</interval>
                      <averageLoad>0.6</averageLoad>
                    </cpuLoadInfo>
                    <cpuLoadInfo>
                      <interval>15</interval>
                      <averageLoad>0.4</averageLoad>
                    </cpuLoadInfo>
                    <totalMemory>1924280</totalMemory>
                    <usedMemory>1542524</usedMemory>
                    <cachedMemory>589196</cachedMemory>
                    <totalSwap>4190204</totalSwap>
                    <usedSwap>0</usedSwap>
                    <systemTime>1490991545521</systemTime>
                    <upTime>433880</upTime>
                    <nodeFailoverReady>false</nodeFailoverReady>
                    <nodeDiskLatencyStatus>
                      <deviceName>sda</deviceName>
                      <refreshTime>1490991404000</refreshTime>
                      <latencyType>w_await</latencyType>
                      <lastLatency>97.0</lastLatency>
                      <avgLatency>28.572</avgLatency>
                      <alertEnabled>false</alertEnabled>
                    </nodeDiskLatencyStatus>
                    <nodeDiskLatencyStatus>
                      <deviceName>sda</deviceName>
                      <refreshTime>1490991186000</refreshTime>
                      <latencyType>r_await</latencyType>
                      <lastLatency>9.18</lastLatency>
                      <avgLatency>0.0</avgLatency>
                      <alertEnabled>false</alertEnabled>
                    </nodeDiskLatencyStatus>
                    <nodeDiskLatencyStatus>
                      <deviceName>dm-1</deviceName>
                      <refreshTime>1490991185000</refreshTime>
                      <latencyType>w_await</latencyType>
                      <lastLatency>0.0</lastLatency>
                      <avgLatency>0.0</avgLatency>
                      <alertEnabled>false</alertEnabled>
                    </nodeDiskLatencyStatus>
                    <nodeDiskLatencyStatus>
                      <deviceName>dm-1</deviceName>
                      <refreshTime>1490991185000</refreshTime>
                      <latencyType>r_await</latencyType>
                      <lastLatency>51.51</lastLatency>
                      <avgLatency>0.0</avgLatency>
                      <alertEnabled>false</alertEnabled>
                    </nodeDiskLatencyStatus>
                    <nodeDiskLatencyStatus>
                      <deviceName>dm-0</deviceName>
                      <refreshTime>1490991404000</refreshTime>
                      <latencyType>w_await</latencyType>
                      <lastLatency>129.33</lastLatency>
                      <avgLatency>34.16</avgLatency>
                      <alertEnabled>false</alertEnabled>
                    </nodeDiskLatencyStatus>
                    <nodeDiskLatencyStatus>
                      <deviceName>dm-0</deviceName>
                      <refreshTime>1490991225000</refreshTime>
                      <latencyType>r_await</latencyType>
                      <lastLatency>0.0</lastLatency>
                      <avgLatency>12.678</avgLatency>
                      <alertEnabled>false</alertEnabled>
                    </nodeDiskLatencyStatus>
                  </controllerNodeStatus>
    /techsupportlogs:
      displayName: nsxControllerLogs
      description: |
        Working with Controller Tech Support Logs
        -----
      get:
        displayName: nsxControllerLogsRead
        description: |
          Retrieve controller logs. Response content type is
          application/octet-stream and response header is filename. This
          streams a fairly large bundle back (possibly hundreds of MB).
  # need to specify different Accept header?
    /syslog:
      displayName: nsxControllerSyslog
      description: |
        Working with Controller Syslog
        -----
      post:
        displayName: nsxControllerSyslogCreate
        description: Add controller syslog exporter on the controller.
        body:
          application/xml:
            example: |
              <controllerSyslogServer>
                <syslogServer></syslogServer>
                <port></port>
                <protocol></protocol>
                <level></level>
              </controllerSyslogServer>
            schema: controllerSyslog
      get:
        displayName: nsxControllerSyslogRead
        description: |
          Retrieve details about the syslog exporter on the controller.
        responses:
          200:
            body:
              application/xml:
                example: |
                  <controllerSyslogServer>
                    <syslogServer></syslogServer>
                    <port></port>
                    <protocol></protocol>
                    <level></level>
                  </controllerSyslogServer>
      delete:
        displayName: nsxControllerSyslogDelete
        description: |
          Deletes syslog exporter on the specified controller node.
    /snapshot:
      displayName: nsxControllerSnapshot
      description: |
        Working with Controller Cluster Snapshots
        -----
      get:
        displayName: nsxControllerSnapshotRead # dupfix nsxControllerSnapshot
        description: |
          Take a snapshot of the control cluster from the specified controller
          node.
  /cluster:
    displayName: nsxControllerCluster
    description: |
      Working with the NSX Controller Cluster Configuration
      ----
    get:
      displayName: nsxControllerClusterRead
      description: |
        Retrieve cluster wide configuration information for controller.
      responses:
        200:
          body:
            application/xml:
              example: |
                <controllerConfig>
                  <sslEnabled></sslEnabled>
                </controllerConfig>
    put:
      displayName: nsxControllerClusterUpdate
      description: |
        Modify cluster wide configuration information for controller.
      body:
        application/xml:
          example: |
            <controllerConfig>
              <sslEnabled></sslEnabled>
            </controllerConfig>
          schema: clusterUpdate
  /credential:
    displayName: nsxControllerPassword
    description: |
      Working with the NSX Controller Password
      ------
    put:
      displayName: nsxControllerPasswordUpdate
      description: Change the NSX controller password.
      body:
        application/xml:
          example: |
            <controllerCredential>
              <apiPassword></apiPassword>
            </controllerCredential>
          schema: nsxControllerPasswordUpdate
/2.0/services/application:
  displayName: servicesApps # existing reorg URI
  description: |
    Working with Services Grouping Objects
    =============

  /scope/{scopeId}:
    displayName: servicesAppsScopeScope # existing reorg/dupfix servicesScope
    description: | 
      Retrieve Services from a Specific Scope
      ----
    uriParameters:
      scopeId:
        required: true
        displayName: scopeId
        description: |
          Can be "globalroot-0", "universalroot-0" or datacenterId in upgrade use
          cases.
    get:
      displayName: servicesAppsScopeScopeRead
      description: Retrieve services that have been created on the specified scope.
  /{scopeId}:
    displayName: servicesAppsScope
    description: |
      Create a Service on a Specific Scope
      ------
    uriParameters:
      scopeId:
        required: true
        displayName: scopeId
        description: |
          For scopeMoref use "globalroot-0" for non-universal IP sets and use
          "universalroot-0" for universal IP sets.
    post:
      displayName: servicesAppsScopeCreate # existing reorg/dupfix servicesScopeCreate
      description: |
        Create a new service on the specified scope.
      body:
        application/xml:
          example: |
            <application>
              <objectId></objectId>
              <type>
                <typeName/>
              </type>
              <description></description>
              <name></name>
              <revision></revision>
              <objectTypeName></objectTypeName>
              <element>
                <applicationProtocol>mandatory</applicationProtocol>
                <value>mandatory</value>
              </element>
            </application>
          schema: servicesScopeCreate
  /{applicationId}:
    displayName: serviceApp # existing reorg/dupfix service
    description: |
      Working With a Specified Service
      -------
    uriParameters:
      applicationId:
        required: true
        displayName: applicationId
        description: |
          Application ID. You can get a list of application IDs from `GET
          /api/2.0/services/application/scope/{scopeId}`.
    get:
      displayName: serviceAppRead # existing reorg/dupfix serviceRead
      description: Retrieve details about the specified service.
    put:
      displayName: serviceAppUpdate # existing reorg/dupfix serviceUpdate
      description: |
        Modify the name, description, applicationProtocol, or port value of a
        service.
      body:
        application/xml:
          example: |
            <application>
              <objectId></objectId>
              <type>
                <typeName></typeName>
              </type>
              <description></description>
              <name></name>
              <revision></revision>
              <objectTypeName></objectTypeName>
              <element>
                <applicationProtocol></applicationProtocol>
                <value></value>
              </element>
            </application>
          schema: serviceUpdate
    delete:
      displayName: serviceAppDelete # existing reorg/dupfix serviceDelete
      description: Delete the specified service.
      queryParameters:
        force:
          type: boolean
          required: false
          displayName: force
          description: |
            Indicates if the delete should be forced or unforced. The default is
            unforced (false).
/2.0/services/applicationgroup:
  displayName: applicationgroup
  description: |
    Working with Service Groups Grouping Objects
    ============

  /{scopeId}:
    displayName: serviceGroups
    description: |
      Working with Service Groups on a Specific Scope
      -------
    uriParameters:
      scopeId:
        required: true
        displayName: scopeId
        description: |
          The scopeId can be "globalroot-0", "universalroot-0" or datacenterId
          in upgrade use cases
    post:
      displayName: serviceGroupsCreate
      description: Create a new service group on the specified scope.
      body:
        application/xml:
          example: |
            <applicationGroup>
              <description></description>
              <name></name>
              <revision></revision>
              <inheritanceAllowed></inheritanceAllowed>
            </applicationGroup>
          schema: serviceGroupsCreate
  /scope/{scopeId}:
    displayName: serviceGroupsScope
    description: |
      Working with Service Groups on a Specific Scope
      -------
    uriParameters:
      scopeId:
        required: true
        displayName: scopeId
        description: |
          The scopeId can be "globalroot-0", "universalroot-0" or datacenterId
          in upgrade use cases
    get:
      displayName: serviceGroupsRead
      description: |
        Retrieve a list of service groups that have been created on the scope.
  /{applicationgroupId}:
    displayName: serviceGroup
    description: |
      Working with a Specific Service Group
      ----
    uriParameters:
      applicationgroupId:
        required: true
        displayName: applicationgroupId
        description: Application group ID
    get:
      displayName: serviceGroupRead
      description: Retrieve details about the specified service group.
    put:
      displayName: serviceGroupUpdate
      description: |
        Modify the name, description, applicationProtocol, or port value of
        the specified service group.
      body:
        application/xml:
          example: |
            <applicationGroup>
              <objectId></objectId>
              <type>
                <typeName></typeName>
              </type>
              <name></name>
              <description></description>
              <revision></revision>
              <objectTypeName></objectTypeName>
              <scope>
                <id></id>
                <objectTypeName></objectTypeName>
                <name></name>
              </scope>
              <extendedAttributes></extendedAttributes>
              <inheritanceAllowed></inheritanceAllowed>
              <member>
                <objectId></objectId>
                <type>
                  <typeName></typeName>
                </type>
                <name></name>
                <revision></revision>
                <objectTypeName></objectTypeName>
                <scope>
                  <id></id>
                  <objectTypeName></objectTypeName>
                  <name></name>
                </scope>
              </member>
            </applicationGroup>
          schema: serviceGroupUpdate
    delete:
      displayName: serviceGroupDelete
      description: Delete the specified service group from a scope.
      queryParameters:
        force:
          type: boolean
          required: false
          displayName: force
          description: |
            Indicates if the delete should be forced or unforced. The default
            is unforced (false).
    /members/{moref}:
      displayName: serviceGroupMembers
      description: |
        Working with a Specific Service Group Member
        -----
      uriParameters:
        moref:
          required: true
          displayName: moref
          description: Managed object reference to the member.
      put:
        displayName: serviceGroupMembersCreate
        description: Add a member to the service group.
      delete:
        displayName: serviceGroupMembersDelete
        description: Delete a member from the service group.

  /scope/{scopeId}/members:
    displayName: serviceGroupMembersScope # existing dupfix serviceGroupMembersRead
    description: |
      Working with Service Group Members on a Specific Scope
      ------
    uriParameters:
      scopeId:
        required: true
        displayName: scopeId
        description: globalroot-0 or datacenterId in upgrade use cases
    get:
      displayName: serviceGroupMembersScopeList # existing dupfix serviceGroupMembersRead
      description: |
        Get a list of member elements that can be added to the service groups
        created on a particular scope.
        
        Since service group allows only either services or other service
        groups as members to be added, this helps you get a list of all
        possible valid elements that can be added to the
        service.
/2.0/services/ipam/pools:
  displayName: ipPoolsObjects # added for reorg
  description: |
    Working with IP Pool Grouping Objects
    ========

  /scope/{scopeId}:
    displayName: ipPools
    description: |
      Working with IP Pools on a Specific Scope
      -----
    uriParameters:
      scopeId:
        required: true
        displayName: scopeId
        description: |
          For *scopeID* use globalroot-0 or *datacenterId* in upgrade use
          cases.
    get:
      displayName: ipPoolsList # dupfix ipPoolRead
      description: |
        Retrieves all IP pools on the specified scope where the *scopeID* is the
        reference to the desired scope. An example of the *scopeID* is
        globalroot-0.
      responses:
        200:
          body:
            application/xml:
              example: |
                <ipamAddressPool>
                  <objectId>ipaddresspool-1</objectId>
                  <objectTypeName>IpAddressPool</objectTypeName>
                  <vsmUuid>4237BA90-C373-A71A-9827-1673BFA29498</vsmUuid>
                  <revision>1</revision>
                  <type>
                    <typeName>IpAddressPool</typeName>
                  </type>
                  <name>rest-ip-pool-1</name>
                  <extendedAttributes></extendedAttributes>
                  <prefixLength>23</prefixLength>
                  <gateway>192.168.1.1</gateway>
                  <dnsSuffix>example.com</dnsSuffix>
                  <dnsServer1>10.11.0.1</dnsServer1>
                  <dnsServer2>10.11.0.2</dnsServer2>
                  <ipRanges>
                    <ipRangeDto>
                      <id>iprange-1</id>
                      <startAddress>192.168.1.2</startAddress>
                      <endAddress>192.168.1.3</endAddress>
                    </ipRangeDto>
                  </ipRanges>
                  <totalAddressCount>2</totalAddressCount>
                  <usedAddressCount>0</usedAddressCount>
                  <usedPercentage>0</usedPercentage>
                </ipamAddressPool>
    post:
      displayName: ipPoolCreate
      description: |
        Create a pool of IP addresses. For *scopeId* use globalroot-0 or
        the *datacenterId* in upgrade use cases.
      body:
        application/xml:
          example: |
            <ipamAddressPool>
              <name></name>
              <prefixLength></prefixLength>
              <gateway></gateway>
              <dnsSuffix></dnsSuffix>
              <dnsServer1></dnsServer1>
              <dnsServer2></dnsServer2>
              <ipRanges>
                <ipRangeDto>
                  <startAddress></startAddress>
                  <endAddress></endAddress>
                </ipRangeDto>
              </ipRanges>
            </ipamAddressPool>
          schema: ipPool

  /{poolId}:
    displayName: ipPool
    description: |
      Working with a Specific IP Pool
      ------
    uriParameters:
      poolId:
        required: true
        displayName: poolId
        description: Specifiy the pool ID as *poolId* in the URI.
    get:
      displayName: ipPoolRead
      description: Retrieve details about a specific IP pool.
      responses:
        200:
          body:
            application/xml:
              example: |
                <ipamAddressPool>
                  <objectId>ipaddresspool-1</objectId>
                  <objectTypeName>IpAddressPool</objectTypeName>
                  <vsmUuid>4237BA90-C373-A71A-9827-1673BFA29498</vsmUuid>
                  <revision>1</revision>
                  <type>
                    <typeName>IpAddressPool</typeName>
                  </type>
                  <name>rest-ip-pool-1</name>
                  <extendedAttributes></extendedAttributes>
                  <prefixLength>23</prefixLength>
                  <gateway>192.168.1.1</gateway>
                  <dnsSuffix>example.com</dnsSuffix>
                  <dnsServer1>10.11.0.1</dnsServer1>
                  <dnsServer2>10.11.0.2</dnsServer2>
                  <ipRanges>
                    <ipRangeDto>
                      <id>iprange-1</id>
                      <startAddress>192.168.1.2</startAddress>
                      <endAddress>192.168.1.3</endAddress>
                    </ipRangeDto>
                  </ipRanges>
                  <totalAddressCount>2</totalAddressCount>
                  <usedAddressCount>0</usedAddressCount>
                  <usedPercentage>0</usedPercentage>
                </ipamAddressPool>
    put:
      displayName: ipPoolUpdate
      description: |
        To modify an IP pool, query the IP pool first. Then modify the output and
        send it back as the request body.
      body:
        application/xml:
          example: |
            <ipamAddressPool>
              <objectId></objectId>
              <objectTypeName></objectTypeName>
              <vsmUuid></vsmUuid>
              <revision></revision>
              <type>
                <typeName></typeName>
              </type>
              <name></name>
              <extendedAttributes></extendedAttributes>
              <prefixLength></prefixLength>
              <gateway></gateway>
              <dnsSuffix></dnsSuffix>
              <dnsServer1></dnsServer1>
              <dnsServer2></dnsServer2>
              <ipRanges>
                <ipRangeDto>
                  <id></id>
                  <startAddress></startAddress>
                  <endAddress></endAddress>
                </ipRangeDto>
              </ipRanges>
            </ipamAddressPool>
          schema: ipPoolUpdate
    delete:
      displayName: ipPoolDelete
      description: Delete an IP pool.
    /ipaddresses:
      displayName: ipPoolAllocate
      description: |
        Working with IP Pool Address Allocations
        ------
      get:
        displayName: ipPoolIpsRead
        description: |
          Retrieves all allocated IP addresses from the specified pool.
        responses:
          200:
            body:
              application/xml:
                example: |
                  <allocatedIpAddresses>
                    <allocatedIpAddress>
                      <id>allocatedipaddress-4</id>
                      <ipAddress>192.168.1.2</ipAddress>
                      <gateway>192.168.1.1</gateway>
                      <prefixLength>23</prefixLength>
                      <dnsServer1>10.112.0.1</dnsServer1>
                      <dnsServer2>10.112.0.2</dnsServer2>
                      <dnsSuffix>eng.vmware.com</dnsSuffix>
                      <allocationNote>sample note</allocationNote>
                    </allocatedIpAddress>
                  </allocatedIpAddresses>
      post:
        displayName: ipPoolAllocateIp
        description: |
          Allocate an IP Address from the pool. Use *ALLOCATE* in the
          **allocationMode** field in the body to allocate the next available
          IP. To allocate a specific one use *RESERVE* and pass the IP to
          reserve in the **ipAddress** fields in the body.
        body:
          application/xml:
            example: |
              <ipAddressRequest>
                <allocationMode>ALLOCATE</allocationMode>
                <ipAddress>192.168.1.2</ipAddress>
              </ipAddressRequest>
            schema: ipAddressRequest
        responses:
          200:
            body:
              application/xml:
                example: |
                  <allocatedIpAddress>
                    <id>allocatedipaddress-1</id>
                    <ipAddress>192.168.1.2</ipAddress>
                    <gateway>192.168.1.1</gateway>
                    <prefixLength>23</prefixLength>
                    <dnsServer1>10.112.0.1</dnsServer1>
                    <dnsServer2>10.112.0.2</dnsServer2>
                    <dnsSuffix>eng.vmware.com</dnsSuffix>
                    <allocationNote>sample note</allocationNote>
                  </allocatedIpAddress>
      /{ipAddress}:
        displayName: ipAddressRelease
        description: |
          Working with Specific IPs Allocated to an IP Pool
          ----
        uriParameters:
          ipAddress:
            required: true
            displayName: ipAddress
            description: |
              The IP address to release, e.g. '192.168.10.10'
        delete:
          displayName: ipAddressReleaseDelete # dupfix ipAddressRelease
          description: Release an IP address allocation in the pool.
/2.0/services/licensing/capacityusage:
  displayName: capacityUsage
  description: |
    Working with Licensing Capacity
    ============
    The licensing capacity usage API command reports usage of CPUs, VMs and
    concurrent users for the distributed firewall and VXLAN.
  get:
    displayName: capacityUsageRead
    description: |
      Retrieve capacity usage information on the usage of CPUs, VMs and concurrent
      users for the distributed firewall and VXLAN.
      
      **Method history:**
      
      Release | Modification
      --------|-------------
      6.2.3 | Method introduced.
    responses:
      200:
        body:
          application/xml:
            example: |
              <featureCapacityUsageList>
                <featureCapacityUsageInfo>
                  <capacityUsageInfo>
                    <capacityType>CPU_CAPACITY_TYPE</capacityType>
                    <usageCount>16</usageCount>
                  </capacityUsageInfo>
                  <capacityUsageInfo>
                    <capacityType>VM_CAPACITY_TYPE</capacityType>
                    <usageCount>3</usageCount>
                  </capacityUsageInfo>
                  <capacityUsageInfo>
                    <capacityType>CONCURRENT_USER_CAPACITY_TYPE</capacityType>
                    <usageCount>3</usageCount>
                  </capacityUsageInfo>
                  <feature>dfw</feature>
                </featureCapacityUsageInfo>
                <featureCapacityUsageInfo>
                  <capacityUsageInfo>
                    <capacityType>CPU_CAPACITY_TYPE</capacityType>
                    <usageCount>16</usageCount>
                  </capacityUsageInfo>
                  <capacityUsageInfo>
                    <capacityType>VM_CAPACITY_TYPE</capacityType>
                    <usageCount>3</usageCount>
                  </capacityUsageInfo>
                  <capacityUsageInfo>
                    <capacityType>CONCURRENT_USER_CAPACITY_TYPE</capacityType>
                    <usageCount>3</usageCount>
                  </capacityUsageInfo>
                  <feature>vxlan</feature>
                </featureCapacityUsageInfo>
              </featureCapacityUsageList>
/2.0/services/securitytags:
  displayName: securitytags
  description: |
    Working with Security Tags
    =====
    
    You can manage security tags and their virtual machine assignments. For
    example, you can create a user defined security tag, assign tags to a
    virtual machine, view tags assigned to virtual machines, and view virtual
    machines that have a specific tag assigned.

  /tag:
    displayName: securitytagsTag # existing reorg securityTag
    description: |
      Managing Security Tags
      -----
    post:
      displayName: securityTagCreate
      description: | 
        Create a new security tag.
        
        **Method history:**
        
        Release | Modification
        --------|-------------
        6.3.0 | Method updated. **isUniversal** parameter can be set to create a universal security tag.
      body:
        application/xml:
          example: |
            <securityTag>
              <objectTypeName>SecurityTag</objectTypeName>
              <type>
                <typeName>SecurityTag</typeName>
              </type>
              <name>TAG_NAME</name>
              <isUniversal>true</isUniversal>
              <description>description of the tag</description>
              <extendedAttributes></extendedAttributes>
            </securityTag>
          schema: securityTagCreate
    get:
      displayName: securityTagRead
      description: |
        Retrieve all security tags.

        **Method history:**

        Release | Modification
        --------|-------------
        6.3.0 | Method updated. Added **isUniversal** query parameter to filter universal security tags.
      queryParameters:
        isUniversal:
          displayName: isUniversal
          description: |
            Set to *true* to view universal security tags only.  Set to
            *false* to view security tags local to that NSX Manager only.
            To view all tags (tags local to that NSX Manager plus universal
            tags), omit the action parameter.
          type: boolean
          required: false
    /{tagId}:
      displayName: securityTagDelete
      description: |
        Delete a Security Tag
        ----
      uriParameters:
        tagId:
          description: Specified security tag.
          displayName: tagId
          required: true
      delete:
        displayName: securityTagDeleteDelete # dupfix securityTagDelete
        description: Delete the specified security tag.
      /vm:
        displayName: securityTagVMsList
        description: |
          Working With Virtual Machines on a Specific Security Tag
          ----
        get:
          displayName: securityTagVMsListList # dupfix securityTagVMsList
          description: |
            Retrieve the list of VMs that have the specified tag attached to
            them.
        post:
          displayName: securityTagVMsAction
          description: |
            Attach or detach a security tag to a virtual machine.

            This operation does not check that the virtual machine exists in
            the local inventory. This allows you to attach a universal
            security tag to a virtual machine that is connected to a secondary
            NSX Manager (and therefore is not connected to the primary NSX
            Manager where the call is sent).

            Possible keys for the tagParameter are:
            * instance_uuid
            * bios_uuid
            * vmname

            **Method history:**

            Release | Modification
            --------|-------------
            6.3.0 | Method introduced.
          queryParameters:
            action:
              displayName: action
              description: | 
                Action to perform: *attach* or *detach* specified security tag
                from the VMs listed in the request body.
              required: true
          body:
            application/xml:
              example: |
                <securityTagAssignment>
                  <tagParameter>
                   <key>instance_uuid</key>
                   <value>123e4567-e89b-12d3-a456-426655440000</value>
                  </tagParameter>
                </securityTagAssignment>
        /{vmId}:
          displayName: securityTagVM
          description: |
            Manage a Security Tag on a Virtual Machine
            ----
          uriParameters:
            vmId:
              displayName: vmId
              description: |
                Specify VM using VM managed object ID or VM instance
                UUID.
              required: true
          put:
            displayName: securityTagVMAttach
            description: |
              Apply a security tag to the specified virtual machine.

              **Note:** this method can attach a universal security tag to a
              virtual machine. However, this method checks that the VM exists
              on the NSX Manager to which the API call is sent. In a
              cross-vCenter active active environment, the VM might exist on
              a secondary NSX Manager, and so the call would fail. 
              
              You can instead use the `POST
              /api/2.0/services/securitytags/tag/{tagId}/vm?action=attach`
              method to attach universal security tags to a VM that is not
              local to the primary NSX Manager. This method does not check
              that the VM is local to the NSX Manager.
          delete:
            displayName: securityTagVMDetach
            description: |
              Detach a security tag from the specified virtual machine.
      /vmDetail:
        displayName: securityTagVMDetail
        description: |
          Working with Virtual Machine Details for a Specific Security Tag
          -----
        get:
          displayName: securityTagVMDetailList
          description: |
            Retrieve details about the VMs that are attached to the
            specified security tag.

            **Method history:**

            Release | Modification
            --------|-------------
            6.3.0 | Method introduced.
          responses:
            200:
              body:
                application/xml:
                  example: |
                    <attachedVMList>
                      <attachedVM>
                        <objectId>vm-17</objectId>
                        <objectTypeName>VirtualMachine</objectTypeName>
                        <vsmUuid>564D5E43-1A21-9061-CE62-16E4E64FBC52</vsmUuid>
                        <revision>1</revision>
                        <type>
                          <typeName>VirtualMachine</typeName>
                        </type>
                        <name>Ubuntu2</name>
                        <scope>
                          <id>domain-c7</id>
                          <objectTypeName>ClusterComputeResource</objectTypeName>
                          <name>sp cluster</name>
                        </scope>
                        <clientHandle />
                        <isUniversal>false</isUniversal>
                        <universalRevision>0</universalRevision>
                        <instanceUUID>520932b3-b531-7b4a-d3fe-76f0fdd82736</instanceUUID>
                        <biosUUID>423f7c14-6463-8ebc-d06d-2a284b24cabb</biosUUID>
                      </attachedVM>
                      <attachedVM>
                        <objectId>vm-59</objectId>
                        <objectTypeName>VirtualMachine</objectTypeName>
                        <vsmUuid>564D5E43-1A21-9061-CE62-16E4E64FBC52</vsmUuid>
                        <revision>1</revision>
                        <type>
                          <typeName>VirtualMachine</typeName>
                        </type>
                        <name>vShield-FW (1)</name>
                        <scope>
                          <id>domain-c7</id>
                          <objectTypeName>ClusterComputeResource</objectTypeName>
                          <name>sp cluster</name>
                        </scope>
                        <clientHandle />
                        <isUniversal>false</isUniversal>
                        <universalRevision>0</universalRevision>
                        <instanceUUID>502777a8-a4b0-6b1e-1af1-6ab43f3417a0</instanceUUID>
                        <biosUUID>42278ffc-021c-cd1f-1413-978f34079593</biosUUID>
                      </attachedVM>
                    </attachedVMList>
  /vm/{vmId}:
    displayName: securitytagVmId # update existing addition securitytagVmMoid
    description: |
      Working With Security Tags on a Specific Virtual Machine
      -----
    uriParameters:
      vmId:
        displayName: vmId
        description: |
          Specify VM using VM managed object ID or VM instance
          UUID.
    get:
      displayName: securitytagVmIdList
      description: |
        Retrieve all security tags associated with the specified virtual
        machine.
    post:
      displayName: securitytagVmMoidAction
      description: |
        Update security tags associated with the specified virtual machine.

        You can assign multiple tags at a time to the specified VM, or clear
        all assigned tags from the specified VM.

        **Method history:**

        Release | Modification
        --------|-------------
        6.3.0 | Method introduced.
      queryParameters:
        action:
          displayName: action
          description: |
            Action to perform. *ASSIGN_TAGS* or *CLEAR_ALL_TAGS*.
          required: true
      body:
        application/xml:
          example: |
            <securityTags>
              <securityTag>
                <objectId>securitytag-12</objectId>
              </securityTag>
              <securityTag>
                <objectId>securitytag-13</objectId>
              </securityTag>
              <securityTag>
                <objectId>securitytag-14</objectId>
              </securityTag>
            </securityTags>                  
  /selection-criteria:
    displayName: securitytagsCriteria
    description: |
      Working with Security Tags Unique ID Selection Criteria
      -------
      In NSX versions before 6.3.0, security tags are local to a NSX Manager,
      and are mapped to VMs using the VM's managed object ID.
      
      In NSX 6.3.0 and later, you can create universal security tags to use in
      all NSX Managers in a cross-vCenter NSX environment.

      In an active standby environment, the managed object ID for a given VM
      might not be the same in the active and standby datacenters. NSX 6.3.x
      introduces a Unique ID Selection Criteria on the primary NSX Manager to
      use to identify VMs when attaching them to universal security tags only.
      You can use them singly or in combination. The VM instance UUID is the
      recommended selection criteria. See the descriptions for more
      information.

      The default value for the selection criteria is null and must be set
      before assigning a universal security tag to a VM. The selection
      criteria can be set only on the primary NSX manager and is read-only on
      secondary NSX Managers.

      Security Tag Assignment<br>Metadata Parameter | Description
      ------|-------
      instance_uuid | The VM instance UUID is generally unique within a vCenter domain, however there are exceptions such as when deployments are made through snapshots. If the VM instance UUID is not unique, you can use the VM BIOS UUID in combination with the VM name.
      bios_uuid | The BIOS UUID is not guaranteed to be unique within a vCenter domain, but it is always preserved in case of disaster. Use BIOS UUID in combination with VM name to reduce the chance of a duplicate ID.
      vmname | If all of the VM names in an environment are unique, then VM name can be used to identify a VM across vCenters. Use VM name in combination with VM BIOS UUID to reduce the chance of a duplicate ID.
    get:
      displayName: securitytagsCriteriaRead
      description: |
        Retrieve unique ID section criteria configuration.

        **Method history:**

        Release | Modification
        --------|-------------
        6.3.0 | Method introduced.
    put:
      displayName: securitytagsCriteriaUpdate
      description: |
        Configure the unique ID section criteria configuration.

        If you set the selection criteria and assign security tags to VMs, you
        must remove all security tags from VMs before you can change the
        selection criteria.

        **Method history:**

        Release | Modification
        --------|-------------
        6.3.0 | Method introduced.
      body:
        application/xml:
          example: |
            <securityTagAssignmentMetadata>
              <metadata>instance_uuid</metadata>
            </securityTagAssignmentMetadata>
/2.0/services/ssoconfig:
  displayName: ssoConfig
  description: |
    Working with NSX Manager SSO Registration
    ============
  get:
    displayName: ssoConfigRead
    description: Retrieve SSO Configuration.
  post:
    displayName: ssoConfigSet
    description: Register NSX Manager to SSO Services.
    body:
      application/xml:
        example: |
          <ssoConfig>
            <ssoLookupServiceUrl></ssoLookupServiceUrl>
            <ssoAdminUsername></ssoAdminUsername>
            <ssoAdminUserpassword></ssoAdminUserpassword>
            <certificateThumbprint></certificateThumbprint>
          </ssoConfig>
        schema: ssoConfig
  delete:
    displayName: ssoConfigDelete
    description: Deletes the NSX Manager SSO Configuration.
  /status:
    displayName: ssoStatus
    description: |
      Working with SSO Configuration Status
      -----
    get:
      displayName: ssoStatusRead
      description: Retrieve the SSO configuration status of NSX Manager.
/2.0/services/usermgmt:
  displayName: userMgmt
  description: |
    Working with User Management
    ==========

  /user/{userId}:
    displayName: userMgmtUser
    description: |
      Manage Users on NSX Manager
      -----
    uriParameters:
      userId:
        required: true
        displayName: userId
        description: user ID
    get:
      displayName: userMgmtUserRead
      description: Get information about a user.
    delete:
      displayName: userMgmtUserDelete
      description: Remove the NSX role for a vCenter user.
  /role/{userId}:
    displayName: userRoleMgmt
    description: |
      Manage NSX Roles for Users
      -----
    uriParameters:
      userId:
        required: true
        displayName: userId
        description: User to retrieve role information from.
    get:
      displayName: userMgmtRoleRead
      description: |
        Retrieve a user's role (possible roles are super_user, vshield_admin,
        enterprise_admin, security_admin, and audit).
    post:
      displayName: userMgmtRoleCreate
      description: Add role and resources for a user.
      queryParameters:
        isGroup:
          displayName: isGroup
          description: |
            Set to "true" to apply to a group; set to "false" to apply to an
            individual user
          required: true
          type: boolean
      body:
        application/xml:
          example: |
            <accessControlEntry>
              <role></role>
              <resource>
                <resourceId></resourceId>
              </resource>
            </accessControlEntry>
          schema: userRoleMgmtCreate
    put:
      displayName: userMgmtRoleUpdate
      description: Change a user's role.
      body:
        application/xml:
          example: |
            <accessControlEntry>
              <role></role>
              <resource>
                <resourceId></resourceId>
              </resource>
            </accessControlEntry>
          schema: userRoleMgmtUpdate
    delete:
      displayName: userMgmtRoleDelete
      description: |
        Delete the role assignment for specified vCenter user. Once this role
        is deleted, the user is removed from NSX Manager. You cannot delete the
        role for a local user.
  /enablestate/{value}:
    displayName: userMgmtState
    description: |
      Working with User Account State
      -----
    uriParameters:
      value:
        required: true
        type: integer
        displayName: value
        description: value can be 0 to disable, or 1 to enable.
    put:
      displayName: userMgmtStateUpdate
      description: Enable or disable a user account.
  /users/vsm:
    displayName: userNSXManagerInfo
    description: |
      Working with NSX Manager Role Assignment
      ----
    get:
      displayName: userNSXManagerInfoRead
      description: |
        Get information about users who have been assigned a NSX Manager role
        (local users as well as vCenter users with NSX Manager role).
  /roles:
    displayName: userMgmtRoles
    description: |
      Working with Available NSX Manager Roles
      ----
    get:
      displayName: userMgmtRolesRead # dupfix userMgmtRoleRead
      description: Read all possible roles in NSX Manager
  /scopingobjects:
    displayName: userScopingObjects
    description: |
      Working With Scoping Objects
      ----
    get:
      displayName: userScopingObjectsRead
      description: |
        Retrieve a list of objects that can be used to define a user's access
        scope.
/2.0/services/securitygroup:
  displayName: secGroup
  description: |
    Working with Security Group Grouping Objects
    ===========
    A security group is a collection of assets or grouping objects from your
    vSphere inventory.

  /bulk/{scopeId}:
    displayName: secGroupBulk
    description: |
      Creating New Security Groups With Members
      ----
    uriParameters:
      scopeId:
        required: true
        displayName: scopeId
        description: |
          For the scopeId use *globalroot-0* for non-universal security groups
          and *universalroot-0* for universal security groups.
    post:
      displayName: secGroupBulkCreate
      description: |
        Create a new security group on a global scope or universal scope with
        membership information.
        
        Universal security groups are read-only when querying a secondary NSX
        manager.
      
        When you create a universal security group (on scope
        *universalroot-0*) by default **localMembersOnly** is set to *false*
        which indicates that the universal security group will contain members
        across the cross-vCenter NSX environment.  This is the case in an
        active active environment. You can add the following
        objects to a universal security group with *localMembersOnly=false*
        (active active):
        * IP Address Set
        * MAC Address Set
        * Universal Security Groups with *localMembersOnly=false*

        When you create a universal security group (on scope
        *universalroot-0*) you can set the extendedAttribute
        **localMembersOnly** to *true* to indicate that the universal security
        group will contain members local to that NSX Manager only.  This is
        the case in an active standby environment, because only one NSX
        environment is active at a time, and the same VMs are present in each
        NSX environment. You can add the following objects to a universal
        security group with *localMembersOnly=true* (active standby):
        * Universal Security Tag
        * IP Address Set
        * MAC Address Set
        * Universal Security Groups with *localMembersOnly=true*
        * Dynamic criteria using VM name

        You can set the **localMembersOnly** attribute only when the universal
        security group is created, it cannot be modified afterwards.
 
        **Method history:**

        Release | Modification
        --------|-------------
        6.3.0 | Extended attribute **localMembersOnly** introduced.
      body:
        application/xml:
          example: |
            <securitygroup>
              <objectId></objectId>
              <objectTypeName></objectTypeName>
              <vsmUuid></vsmUuid>
              <revision></revision>
              <type>
                <typeName></typeName>
              </type>
              <name></name>
              <scope>
                <id></id>
                <objectTypeName></objectTypeName>
                <vsmUuid></vsmUuid>
                <name></name>
                <revision></revision>
              </scope>
              <clientHandle></clientHandle>
              <extendedAttributes>
                <extendedAttribute>
                  <name>localMembersOnly</name>
                  <value>true</value>
                </extendedAttribute>
              </extendedAttributes>
              <member>
                <objectId></objectId>
                <objectTypeName></objectTypeName>
                <vsmUuid></vsmUuid>
                <revision></revision>
                <type>
                  <typeName></typeName>
                </type>
                <name></name>
                <scope>
                  <id></id>
                  <objectTypeName></objectTypeName>
                  <name></name>
                </scope>
                <clientHandle></clientHandle>
                <extendedAttributes></extendedAttributes>
              </member>
              <excludeMember>
                <objectId></objectId>
                <objectTypeName></objectTypeName>
                <vsmUuid></vsmUuid>
                <revision></revision>
                <type>
                  <typeName></typeName>
                </type>
                <name></name>
                <scope>
                  <id></id>
                  <objectTypeName></objectTypeName>
                  <name></name>
                </scope>
                <clientHandle></clientHandle>
                <extendedAttributes></extendedAttributes>
              </excludeMember>
              <dynamicMemberDefinition>
                <dynamicSet>
                  <operator></operator>
                  <dynamicCriteria>
                    <operator></operator>
                    <key></key>
                    <criteria></criteria>
                    <value></value>
                  </dynamicCriteria>
                </dynamicSet>
              </dynamicMemberDefinition>
            </securitygroup>
          schema: secGroupBulkCreate
  /{scopeId}:
    displayName: secGroupScopeId
    description: |
      Creating New Security Groups Without Members
      -----
    uriParameters:
      scopeId:
        required: true
        displayName: scopeId
        description: |
          For the scopeId use *globalroot-0* for non-universal security groups
          and *universalroot-0* for universal security groups.
    post:
      displayName: secGroupScopeIdCreate
      description: |
        Create a new security group, with no membership information specified.
        You can add members later with `PUT
        /2.0/services/securitygroup/bulk/{objectId}`
        
        When you create a universal security group (on scope
        *universalroot-0*) by default **localMembersOnly** is set to *false*
        which indicates that the universal security group will contain members
        across the cross-vCenter NSX environment.  This is the case in an
        active active environment. You can add the following
        objects to a universal security group with *localMembersOnly=false*
        (active active):
        * IP Address Set
        * MAC Address Set
        * Universal Security Groups with *localMembersOnly=false*

        When you create a universal security group (on scope
        *universalroot-0*) you can set the extendedAttribute
        **localMembersOnly** to *true* to indicate that the universal security
        group will contain members local to that NSX Manager only.  This is
        the case in an active standby environment, because only one NSX
        environment is active at a time, and the same VMs are present in each
        NSX environment. You can add the following objects to a universal
        security group with *localMembersOnly=true* (active standby):
        * Universal Security Tag
        * IP Address Set
        * MAC Address Set
        * Universal Security Groups with *localMembersOnly=true*
        * Dynamic criteria using VM name

        You can set the **localMembersOnly** attribute only when the universal
        security group is created, it cannot be modified afterwards.
 
        **Method history:**

        Release | Modification
        --------|-------------
        6.3.0 | Extended attribute **localMembersOnly** introduced.
      body:
        application/xml:
          example: |
            <securitygroup>
              <name></name>
              <extendedAttributes>
                <extendedAttribute>
                  <name>localMembersOnly</name>
                  <value>true</value>
                </extendedAttribute>
              </extendedAttributes>
            </securitygroup>
  /bulk/{objectId}:
    displayName: secGroupBulkObject
    description: |
      Updating a Specific Security Group Including Membership
      ----
    uriParameters:
      objectId:
        required: true
        displayName: objectId
        description: Security group ID.
    put:
      displayName: secGroupBulkObjectUpdate # dupfix secGroupBulkObject
      description: |
        Update configuration for the specified security group, including membership information.
      body:
        application/xml:
          example: |
            <securitygroup>
              <objectId></objectId>
              <objectTypeName></objectTypeName>
              <vsmUuid></vsmUuid>
              <revision></revision>
              <type>
                <typeName></typeName>
              </type>
              <name></name>
              <scope>
                <id></id>
                <objectTypeName></objectTypeName>
                <vsmUuid></vsmUuid>
                <name></name>
                <revision></revision>
              </scope>
              <clientHandle></clientHandle>
              <extendedAttributes></extendedAttributes>
              <member>
                <objectId></objectId>
                <objectTypeName></objectTypeName>
                <vsmUuid></vsmUuid>
                <revision></revision>
                <type>
                  <typeName></typeName>
                </type>
                <name></name>
                <scope>
                  <id></id>
                  <objectTypeName></objectTypeName>
                  <name></name>
                </scope>
                <clientHandle></clientHandle>
                <extendedAttributes/>
              </member>
              <excludeMember>
                <objectId></objectId>
                <objectTypeName></objectTypeName>
                <vsmUuid></vsmUuid>
                <revision></revision>
                <type>
                  <typeName></typeName>
                </type>
                <name></name>
                <scope>
                  <id></id>
                  <objectTypeName></objectTypeName>
                  <name></name>
                </scope>
                <clientHandle></clientHandle>
                <extendedAttributes></extendedAttributes>
              </excludeMember>
              <dynamicMemberDefinition>
                <dynamicSet>
                  <operator></operator>
                  <dynamicCriteria>
                    <operator></operator>
                    <key></key>
                    <criteria></criteria>
                    <value></value>
                  </dynamicCriteria>
                </dynamicSet>
              </dynamicMemberDefinition>
            </securitygroup>
          schema: secGroupBulkUpdate
  /{objectId}:
    displayName: secGroupObject
    description: |
      Working with a Specific Security Group
      ----
    uriParameters:
      objectId:
        required: true
        displayName: objectId
        description: Security group ID.
    get:
      displayName: secGroupObjectRead
      description: Retrieve all members of the specified security group.
    put:
      displayName: secGroupObjectUpdate
      description: |
        Update configuration for the specified security group. Members are not
        updated. You must use `PUT
        /2.0/services/securitygroup/bulk/{objectId}` to update a security
        group membership.
      body:
        application/xml:
          example: |
            <securitygroup>
              <objectId></objectId>
              <objectTypeName></objectTypeName>
              <revision></revision>
              <type>
                <typeName></typeName>
              </type>
              <name></name>
              <scope>
                <id></id>
                <objectTypeName></objectTypeName>
                <name></name>
              </scope>
              <clientHandle></clientHandle>
              <extendedAttributes></extendedAttributes>
              <isUniversal></isUniversal>
              <inheritanceAllowed></inheritanceAllowed>
            </securitygroup>
          schema: secGroupObjectUpdate
    delete:
      displayName: secGroupObjectDelete
      description: |
        Delete an existing security group.
        
        If *force=true* is specified, the object is deleted even if used in
        other configurations, such as firewall rules. If *force=true* is not
        specified, the object is deleted only if it is not used by other
        configuration; otherwise the delete fails.
      queryParameters:
        force:
          displayName: force
          description: |
            Use *force=true* to force removal of security group that is in
            use in other configurations.
          type: boolean
          required: false
    /members/{memberId}:
      displayName: secGroupMember
      description: |
        Working with Members of a Specific Security Group
        ----
      uriParameters:
        memberId:
          required: true
          displayName: memberId
          description: | 
            Security group member, can be a vSphere managed object ID or NSX
            object ID.
      put:
        displayName: secGroupMemberUpdate
        description: |
          Add a new member to the specified security group.
        queryParameters:
          failIfExists:
            displayName: failIfExists
            description: |
              Default is true.
              
              If failIfExists=false:
              * If the member is not already present in the SecurityGroup, the API
              adds the member to the SecurityGroup.
              * If the member is already present in the SecurityGroup, the API will
              be a no-op and will return silently.
              
              If failIfExists=true:
              * If the member is not already present in the SecurityGroup, the API
              adds the member to the SecurityGroup.
              * If the member is already present in the SecurityGroup, the API call
              fails with the below error:
              ```
              <error>
                <details>The object vm-1000 is already present in the system.</details>
                <errorCode>203</errorCode>
                <moduleName>core-services</moduleName>
              </error>
              ```
            type: boolean
            default: true
            required: false
      delete:
        displayName: secGroupMemberDelete
        description: Delete member from the specified security group.
        queryParameters:
          failIfAbsent:
            displayName: failIfAbsent
            description: |
              Default is true.
              
              If failIfAbsent=false:
              * If the member is present in the SecurityGroup, the API removes
                the member from the SecurityGroup.
              * If the member is not present in the SecurityGroup, the API call
                will be a no-op and will return silently.
              
              If failIfExists=true:
              * If the member is present in the SecurityGroup, the API removes
                the member from the SecurityGroup.
              * If the member is not present in the SecurityGroup, the API call
              fails with the below error:
              ```
              <error>
                <details>The requested object : vm-1000 could not be found. Object identifiers are case sensitive.</details>
                <errorCode>202</errorCode>
                <moduleName>core-services</moduleName>
              </error>
              ```
            type: boolean
            default: true
            required: false
    /translation/virtualmachines:
      displayName: secGroupVMNodes
      description: |
        Working with Virtual Machines in a Security Group
        ----
      get:
        displayName: secGroupVMNodesRead
        description: |
          Retrieve list of virtual machine entities that belong to a specific security
          group.
    /translation/ipaddresses:
      displayName: secGroupIPNodes
      description: |
        Working with IP Addresses in a Security Group
        -----
      get:
        displayName: secGroupIPNodesRead
        description: |
          Retrieve list of IP addresses that belong to a specific security
          group.
    /translation/macaddresses:
      displayName: secGroupMacNodes
      description: |
        Working with MAC Addresses in a Security Group
        -----
      get:
        displayName: secGroupMacNodesRead
        description: |
          Retrieve list of MAC addresses that belong to a specific security
          group.
    /translation/vnics:
      displayName: secGroupVnicNodes
      description: |
        Working with vNICs in a Security Group
        -----
      get:
        displayName: secGroupVnicNodesRead
        description: |
          Retrieve list of vNICs that belong to a specific security group.
  /lookup/virtualmachine/{virtualMachineId}:
    displayName: secGroupLookupVM
    description: |
      Working with Virtual Machine Security Group Membership
      ------
    uriParameters:
      virtualMachineId:
        required: true
        displayName: virtualMachineId
        description: Specified virtual machine
    get:
      displayName: secGroupLookupVMRead
      description: |
        Retrieve list of security groups that the specified virtual machine
        belongs to.
  /internal/scope/{scopeId}:
    displayName: secGroupInternal
    description: |
      Working with Internal Security Groups
      ----
    uriParameters:
      scopeId:
        required: true
        displayName: scopeId
        description: Specified transport zone (scope)
    get:
      displayName: secGroupInternalRead
      description: |
        Retrieve all internal security groups on the NSX Manager. These are used
         internally by the system and should not be created or modified by end
        users.
  /scope/{scopeId}:
    displayName: secGroupScope
    description: |
      Working with Security Groups on a Specific Scope
      ----
    uriParameters:
      scopeId:
        required: true
        displayName: scopeId
        description: |
          scopeId can be "globalroot-0", "universalroot-0" or datacenterID /
          portgroupID in upgrade use cases
    get:
      displayName: secGroupScopeRead
      description: List all the security groups created on a specific scope.
    /memberTypes:
      displayName: secGroupMemberTypes
      description: |
        Working with Security Group Member Types
        ----
      get:
        displayName: secGroupScopeMembersRead
        description: |
          Retrieve a list of valid elements that can be added to a security
          group.
    /members/{memberType}:
      displayName: secGroupScopeMemberByType
      description: |
        Working with a Specific Security Group Member Type
        ----
      uriParameters:
        memberType:
          required: true
          displayName: memberType
          description: Specific member type
      get:
        displayName: secGroupScopeMemberTypeRead
        description: Retrieve members of a specific type in the specified scope.
/2.0/services/ipset:
  displayName: ipsets
  description: |
    Working with IP Set Grouping Objects
    =======

  /scope/{scopeMoref}:
    displayName: ipsetList
    description: |
      Working with IP Sets on a Specific Scope
      ----
    uriParameters:
      scopeMoref:
        required: true
        displayName: scopeMoref
        description: |
          For scopeMoref use "globalroot-0" for non-universal IP sets and use
          "universalroot-0" for universal IP sets.
    get:
      displayName: ipsetListList # dupfix ipsetList
      description: Retrieve all configured IPSets
  /{scopeMoref}:
    displayName: ipsetCreate
    description: |
      Creating New IP Sets
      -----
    uriParameters:
      scopeMoref:
        required: true
        displayName: scopeMoref
        description: |
          For scopeMoref use "globalroot-0" for non-universal IP sets and use
          "universalroot-0" for universal IP sets.
    post:
      displayName: ipsetCreateCreate # dupfix ipsetCreate
      description: Create a new IP set.
      body:
        application/xml:
          example: |
            <ipset>
              <objectId></objectId>
              <type>
                <typeName></typeName>
              </type>
              <description></description>
              <name></name>
              <revision></revision>
              <objectTypeName></objectTypeName>
              <value></value>
              <inheritanceAllowed></inheritanceAllowed>
            </ipset>
          schema: ipsetCreate
  /{ipsetId}:
    displayName: ipset
    description: |
      Working with a Specific IP Set
      ----
    uriParameters:
      ipsetId:
        required: true
        displayName: ipsetId
        description: The IP set to be queried or changed.
    get:
      displayName: ipsetRead
      description: Retrieve an individual IP set.
    put:
      displayName: ipsetUpdate
      description: Modify an existing IP set.
      body:
          application/xml:
            example: |
              <ipset>
                <objectId></objectId>
                <type>
                  <typeName></typeName>
                </type>
                <description></description>
                <name></name>
                <objectTypeName></objectTypeName>
                <value></value>
              </ipset>
            schema: ipsetUpdate
    delete:
      displayName: ipsetDelete
      description: Delete an IP set.
      queryParameters:
          force:
            displayName: force
            description: Set to "true" when forcing the removal of an IP set.
            type: boolean
            required: false
/2.0/services/vcconfig:
  displayName: vCenterConfig
  description: |
    Configuring NSX Manager with vCenter Server
    =========
    You can synchronize NSX Manager with a vCenter Server, which enables the
    Networking and Security tab in the vCenter Web Client to display your VMware
    Infrastructure inventory.
    
    **vCenter Config Parameters**
    
    Parameter | Comments
    ipAddress | FQDN or IP address of vCenter server.
    userName | Required.
    password | Required.
    certificateThumbprint | Required. Must be colon (:) delimited hexadecimal.
    assignRoleToUser | Optional. *true* or *false*.
    pluginDownloadServer | Optional.
    pluginDownloadPort | Optional.
  get:
    displayName: vCenterConfigRead
    description: Get vCenter Server configuration details on NSX Manager.
    responses:
      200:
        body:
          application/xml:
            example: |
              <vcInfo>
                <ipAddress>vcsa-01a.corp.local</ipAddress>
                <userName>administrator@vsphere.local</userName>
                <certificateThumbprint>D2:75:61:24:52:CA:B2:8D:D3:25:3F:78:11:2A:8F:94:5A:30:57:0D</certificateThumbprint>
                <assignRoleToUser>true</assignRoleToUser>
                <vcInventoryLastUpdateTime>1492567224920</vcInventoryLastUpdateTime>
              </vcInfo>
  put:
    displayName: vCenterConfigUpdate
    description: Synchronize NSX Manager with vCenter server.
    body:
      application/xml:
        example: |
          <vcInfo>
            <ipAddress>vc-l-01a.corp.local</ipAddress>
            <userName>administrator@vsphere.local</userName>
            <password>VMware123</password>
            <certificateThumbprint>D2:75:61:24:52:CA:B2:8D:D3:25:3F:78:11:2A:8F:94:5A:30:57:0D</certificateThumbprint>
            <assignRoleToUser>true</assignRoleToUser>
            <pluginDownloadServer></pluginDownloadServer>
            <pluginDownloadPort></pluginDownloadPort>
          </vcInfo>
        schema: vcConfig
  /status:
    displayName: vCenterStatus
    description: |
      Connection Status for vCenter Server
      -----
    get:
      displayName: vCenterStatusRead
      description: Get default vCenter Server connection status.
      responses:
        200:
          body:
            application/xml:
              example: |
                <vcConfigStatus>
                  <connected>true</connected>
                  <lastInventorySyncTime>1492568145678</lastInventorySyncTime>
                </vcConfigStatus>
/2.0/universalsync:
  displayName: universalSync
  description: |
    Working with Universal Sync Configuration in Cross-vCenter NSX
    ======

  /configuration/role:
    displayName: universalSyncConfigurationRole
    description: |
      Working with Universal Sync Configuration Roles
      ----
      You can set the role of an NSX Manager to primary, secondary, or
      standalone. If you set an NSX Manager’s role to primary, then use it to
      create universal objects, and then set the role to standalone, the role
      will be set as transit. In the transit role, the universal objects will
      still exist, but cannot be modified, other than being deleted.
    post:
      displayName: universalSyncConfigurationRoleSet
      description: Set the universal sync configuration role.
      queryParameters:
        action:
          displayName: action
          description: |
            Set the role of the NSX manager. Possible values are
            *set-as-standalone*, or *set-as-primary*. To set an NSX Manager as
            secondary, use the `POST
            /api/2.0/universalsync/configuration/nsxmanagers` method on the
            primary NSX Manager.
    get:
      displayName: universalSyncConfigurationRoleRead
      description: Retrieve the universal sync configuration role.
  /configuration/nsxmanagers:
      displayName: universalSyncConfigurationNsxManagers
      description: |
        Working with Universal Sync Configuration of NSX Managers
        -----
      post:
        displayName: universalSyncConfigurationNsxManagersCreate
        description: | 
          Add a secondary NSX manager.
          
          Run this method on the primary NSX Manager, providing details of the
          secondary NSX Manager.
          
          Retrieve the certificate thumbprint of the secondary NSX Manager
          using the `GET
          /api/1.0/appliance-management/certificatemanager/certificates/nsx`
          method. The **sha1Hash** parameter contains the thumbprint.
        body:
          application/xml:
            example: |
              <nsxManagerInfo>
                <nsxManagerIp></nsxManagerIp>
                <nsxManagerUsername></nsxManagerUsername>
                <nsxManagerPassword></nsxManagerPassword>
                <certificateThumbprint></certificateThumbprint>
                <isPrimary></isPrimary>
              </nsxManagerInfo>
            schema: universalSyncConfigurationNsxManagersCreate
      get:
        displayName: universalSyncConfigurationNsxManagersList
        description: |
          If run on a primary NSX Manager, it will list secondary NSX Managers
          configured on the primary NSX Manager.
          
          If run on a secondary NSX Manager, it will list information about
          the secondary NSX Manager and the primary NSX Manager it is
          associated with.
      delete:
        displayName: universalSyncConfigurationNsxManagersDelete
        description: Delete secondary NSX manager configuration.
      /{nsxManagerID}:
        displayName: universalSyncConfigurationManagers
        description: |
          Universal Sync Configuration of a Specific NSX Manager
          ----
        uriParameters:
          nsxManagerID:
            displayName: nsxManagerID
            description: NSX Manager UUID.
        get:
          displayName: universalSyncConfigurationManagersRead
          description: |
            Retrieve information about the specified secondary NSX Manager.
        delete:
          displayName: universalSyncConfigurationManagersDelete
          description: Delete the specified secondary NSX Manager.
          queryParameters:
            forceRemoval:
              type: boolean
              required: false
              displayName: universalSyncConfigurationManagerDeleteforceRemoval
              description: |
                Force removal of a secondary NSX manager. Options are true and
                false.
        put:
          displayName: universalSyncConfigurationManagersUpdate # existing fix bad URI universalSyncConfigurationNsxManagersThumbprintUpdate
          description: |
            Update the the specified secondary NSX manager IP or thumbprint in
            the universal sync configuration.
          body:
            application/xml:
              example: |
                <nsxManagerInfo>
                  <uuid></uuid>
                  <nsxManagerIp></nsxManagerIp>
                  <certificateThumbprint></certificateThumbprint>
                </nsxManagerInfo>
              schema: universalSyncConfigurationManagersUpdate.xsd
  /sync:
    displayName: universalSyncSync
    description: |
      NSX Manager Synchronization
      ----
    post:
      displayName: universalSyncSyncAction # dupfix universalSyncSync
      description: Sync all objects on the NSX Manager.
      queryParameters:
        action:
          displayName: application
          description: Use *invoke* to sync all objects on the NSX Manager.
  /entitystatus:
    displayName: universalSyncEntityStatus
    description: |
      Working with Universal Sync Entities
      ----
    get:
      displayName: universalSyncEntityStatusRead
      description: Retrieve the status of a universal sync entity.
      queryParameters:
        objectType:
          displayName: objectType
          description: Specifiy the object type. For example "VdnScope"
        objectId:
          displayName: objectId
          description: Specify the objectID. For example "globalvdnscope"
  /status:
    displayName: universalSyncStatus
    description: |
      Working With Universal Sync Status
      -----
    get:
      displayName: universalSyncStatusRead
      description: Retrieve the universal sync status.
/1.0/appliance-management:
  displayName: applianceManager
  description: |
    Working with the Appliance Manager
    ========

    With the appliance management tool, you can manage:
    * System configurations like network configuration, syslog, time settings,
      and certificate management etc.
    * Components of appliance such as NSX Manager, Postgres, SSH component,
      Rabbitmq service etc.
    * Overall support related features such as tech support logs, backup
      restore, status, and summary reports of appliance health.
  /global/info:
    displayName: globalInfo
    description: |
      Global Information for NSX Manager
      ----
    get:
      displayName: globalInfoRead
      description: |
        Retrieve global information containing version information as well as
        current logged in user.
      responses:
        200:
          body:
            application/xml:
              example: |
                <globalInfo>
                  <currentLoggedInUser>admin</currentLoggedInUser>
                  <versionInfo>
                    <majorVersion>6</majorVersion>
                    <minorVersion>2</minorVersion>
                    <patchVersion>5</patchVersion>
                    <buildNumber>4818372</buildNumber>
                  </versionInfo>
                </globalInfo>
  /summary/system:
    displayName: systemInfo
    description: | 
      Summary Information for NSX Manager
      ----
    get:
      displayName: summaryInfoRead
      description: |
        Retrieve system summary info such as address, dns name, version, CPU,
        memory and storage.
      responses:
        200:
          body:
            application/xml:
              example: |
                <systemSummary>
                  <ipv4Address>192.168.110.15</ipv4Address>
                  <dnsName>nsxmgr-01a</dnsName>
                  <hostName>nsxmgr-01a</hostName>
                  <applianceName>vShield Virtual Appliance Management</applianceName>
                  <versionInfo>
                    <majorVersion>6</majorVersion>
                    <minorVersion>2</minorVersion>
                    <patchVersion>5</patchVersion>
                    <buildNumber>4818372</buildNumber>
                  </versionInfo>
                  <uptime>25 days, 21 hours, 51 minutes</uptime>
                  <cpuInfoDto>
                    <totalNoOfCPUs>4</totalNoOfCPUs>
                    <capacity>2799 MHZ</capacity>
                    <usedCapacity>49 MHZ</usedCapacity>
                    <freeCapacity>2750 MHZ</freeCapacity>
                    <usedPercentage>2</usedPercentage>
                  </cpuInfoDto>
                  <memInfoDto>
                    <totalMemory>16025 MB</totalMemory>
                    <usedMemory>5633 MB</usedMemory>
                    <freeMemory>10392 MB</freeMemory>
                    <usedPercentage>35</usedPercentage>
                  </memInfoDto>
                  <storageInfoDto>
                    <totalStorage>86G</totalStorage>
                    <usedStorage>22G</usedStorage>
                    <freeStorage>64G</freeStorage>
                    <usedPercentage>25</usedPercentage>
                  </storageInfoDto>
                  <currentSystemDate>Wednesday, 19 April 2017 06:02:32 AM UTC</currentSystemDate>
                </systemSummary>
  /summary/components:
    displayName: componentInfo
    description: |
      Component Information for NSX Manager
      ----
    get:
      displayName: componentInfoRead
      description: |
        Retrieve summary of all available components and their status info.
      responses:
        200:
          body:
            application/xml:
              example: |
                <componentsSummary>
                  <componentsByGroup class="tree-map">
                    <entry>
                      <string>COMMON</string>
                      <components>
                        <component>
                          <componentId>VPOSTGRES</componentId>
                          <name>vPostgres</name>
                          <description>vPostgres - Database service</description>
                          <status>RUNNING</status>
                          <enabled>true</enabled>
                          <showTechSupportLogs>false</showTechSupportLogs>
                          <usedBy>
                            <string>NSX</string>
                          </usedBy>
                          <componentGroup>COMMON</componentGroup>
                        </component>
                        <component>
                          <componentId>RABBITMQ</componentId>
                          <name>RabbitMQ</name>
                          <description>RabbitMQ - Messaging service</description>
                          <status>RUNNING</status>
                          <enabled>true</enabled>
                          <showTechSupportLogs>false</showTechSupportLogs>
                          <usedBy>
                            <string>NSX</string>
                          </usedBy>
                          <componentGroup>COMMON</componentGroup>
                        </component>
                      </components>
                    </entry>
                    <entry>
                      <string>NSXGRP</string>
                      <components>
                        <component>
                          <componentId>NSXREPLICATOR</componentId>
                          <name>NSX Replicator</name>
                          <description>NSX Replicator</description>
                          <status>RUNNING</status>
                          <enabled>true</enabled>
                          <showTechSupportLogs>false</showTechSupportLogs>
                          <uses>
                            <string>NSX</string>
                          </uses>
                          <usedBy/>
                          <componentGroup>NSXGRP</componentGroup>
                          <versionInfo>
                            <majorVersion>6</majorVersion>
                            <minorVersion>2</minorVersion>
                            <patchVersion>5</patchVersion>
                            <buildNumber>4818383</buildNumber>
                          </versionInfo>
                        </component>
                        <component>
                          <componentId>NSX</componentId>
                          <name>NSX Manager</name>
                          <description>NSX Manager</description>
                          <status>RUNNING</status>
                          <enabled>true</enabled>
                          <showTechSupportLogs>true</showTechSupportLogs>
                          <uses>
                            <string>VPOSTGRES</string>
                            <string>RABBITMQ</string>
                          </uses>
                          <usedBy>
                            <string>NSXREPLICATOR</string>
                          </usedBy>
                          <componentGroup>NSXGRP</componentGroup>
                          <versionInfo>
                            <majorVersion>6</majorVersion>
                            <minorVersion>2</minorVersion>
                            <patchVersion>5</patchVersion>
                            <buildNumber>4818372</buildNumber>
                          </versionInfo>
                        </component>
                      </components>
                    </entry>
                    <entry>
                      <string>SYSTEM</string>
                      <components>
                        <component>
                          <componentId>SSH</componentId>
                          <name>SSH Service</name>
                          <description>Secure Shell</description>
                          <status>RUNNING</status>
                          <enabled>true</enabled>
                          <showTechSupportLogs>false</showTechSupportLogs>
                          <usedBy/>
                          <componentGroup>SYSTEM</componentGroup>
                        </component>
                      </components>
                    </entry>
                  </componentsByGroup>
                </componentsSummary>
  /system/restart:
    displayName: systemReboot
    description: |
      Reboot NSX Manager
      -----
    post:
      displayName: systemRebootExecute # dupfix systemReboot
      description: Reboot the NSX Manager appliance.
  /system/cpuinfo:
    displayName: systemCPUInfo
    description: |
      NSX Manager CPU Information
      -----
    get:
      displayName: systemCPUInfoRead # dupfix systemCPUInfo
      description: Retrieve NSX Manager CPU information.
      responses:
        200:
          body:
            application/xml:
              example: |
                <cpuInfo>
                  <totalNoOfCPUs>4</totalNoOfCPUs>
                  <capacity>2799 MHZ</capacity>
                  <usedCapacity>47 MHZ</usedCapacity>
                  <freeCapacity>2752 MHZ</freeCapacity>
                  <usedPercentage>2</usedPercentage>
                </cpuInfo>
  /system/uptime:
    displayName: systemUptime
    description: |
      NSX Manager Appliance Uptime Information
      ----
    get:
      displayName: systemUptimeRead # dupfix systemUptime
      description: |
        Retrieve NSX Manager uptime information.
        
        **Example response:**
        ```
        25 days, 22 hours, 11 minutes
        ```
  /system/meminfo:
    displayName: systemMemoryInfo
    description: |
      NSX Manager Appliance Memory Information
      -----
    get:
      displayName: systemMemoryInfoRead # dupfix systemMemoryInfo
      description: Retrieve NSX Manager memory information.
      responses:
        200:
          body:
            application/xml:
              example: |
                <memInfo>
                  <totalMemory>16025 MB</totalMemory>
                  <usedMemory>5633 MB</usedMemory>
                  <freeMemory>10392 MB</freeMemory>
                  <usedPercentage>35</usedPercentage>
                </memInfo>
  /system/storageinfo:
    displayName: systemStorageInfo
    description: |
      NSX Manager Appliance Storage Information
      ----
    get:
      displayName: systemStorageInfoRead # dupfix systemStorageInfo
      description: Retrieve NSX Manager storage information.
      responses:
        200:
          body:
            application/xml:
              example: |
                <storageInfo>
                  <totalStorage>86G</totalStorage>
                  <usedStorage>22G</usedStorage>
                  <freeStorage>64G</freeStorage>
                  <usedPercentage>25</usedPercentage>
                </storageInfo>
  /system/network:
    displayName: networkSettings
    description: |
      NSX Manager Appliance Network Settings
      ----
    get:
      displayName: networkSettingsRead
      description: |
        Retrieve network information for the NSX Manager appliance. i.e. host name, IP address, DNS settings
      responses:
        200:
          body:
            application/xml:
              example: |
                <network>
                  <hostName>nsxmgr-01a</hostName>
                  <networkIPv4AddressDto>
                    <ipv4Address>192.168.110.15</ipv4Address>
                    <ipv4NetMask>255.255.255.0</ipv4NetMask>
                    <ipv4Gateway>192.168.110.1</ipv4Gateway>
                  </networkIPv4AddressDto>
                  <dns>
                    <ipv4Address>192.168.110.10</ipv4Address>
                    <domainList>corp.local</domainList>
                  </dns>
                </network>
    put:
      displayName: networkSettingsUpdate
      description: |
        Update network information for the NSX Manager appliance.
      body:
        application/xml:
          example: |
            <network>
              <hostName>nsxmgr-01a</hostName>
              <networkIPv4AddressDto>
                <ipv4Address>192.168.110.15</ipv4Address>
                <ipv4NetMask>255.255.255.0</ipv4NetMask>
                <ipv4Gateway>192.168.110.1</ipv4Gateway>
              </networkIPv4AddressDto>
              <networkIPv6AddressDto>
                <ipv6Address>fdd1:0ebc:b724:d2f1:0000:8a7e:0360:5332</ipv6Address>
                <ipv6PrefixLength>64</ipv6PrefixLength>
                <ipv6Gateway>fdd1:0ebc:b724:d2f1:0000:8a7e:0360:0002</ipv6Gateway>
              </networkIPv6AddressDto>
              <dns>
                <ipv4Address>192.168.110.10</ipv4Address>
                <ipv6Address>fdd1:0ebc:b724:d2f1:0000:8a7e:0360:0010</ipv6Address>
                <domainList>corp.local</domainList>
              </dns>
            </network>
    /dns:
      displayName: applianceDnsClient # existing dupfix dns
      description: |
        Working with DNS Configuration
        -----
      put:
        displayName: applianceDnsClientUpdate # existing dupfix dnsUpdate
        description: Configure DNS.
        body:
          application/xml:
            example: |
              <dns>
                <ipv4Address></ipv4Address>
                <ipv6Address></ipv6Address>
                <domainList></domainList>
              </dns>
            schema: applianceDnsClientUpdate
      delete:
        displayName: applianceDnsClientDelete # existing dupfix dnsUpdate
        description: Delete DNS server configuration.
  /system/securitysettings:
    displayName: systemSecSettings
    description: |
      Working with Security Settings
      ----
    get:
      displayName: systemSecSettingsRead
      description: |
        Retrieve the NSX Manager FIPS and TLS settings.

        **Method history:**

        Release | Modification
        --------|-------------
        6.3.0 | Method introduced.
      responses:
        200:
          body:
            application/xml:
              example: |
                <securitySettings>
                  <fipsEnabled>false</fipsEnabled>
                  <tlsSettings>
                    <serverEnabledProtocols>TLSv1,TLSv1.1,TLSv1.2</serverEnabledProtocols>
                    <clientEnabledProtocols>TLSv1,TLSv1.1,TLSv1.2</clientEnabledProtocols>
                  </tlsSettings>
                </securitySettings>
    post:
      displayName: systemSecSettingsUpdate
      description: |
        Update the NSX Manager security settings, including FIPS and TLS.

        Do not enable FIPS until you have upgraded all NSX components to NSX
        6.3.0 or later. Enable FIPS on NSX Edges before enabling it on the NSX
        Manager.

        Changing the FIPS mode will reboot the NSX Manager appliance.

        **Method history:**

        Release | Modification
        --------|-------------
        6.3.0 | Method introduced.
      body:
        application/xml:
          example: |
            <securitySettings>
              <fipsEnabled>true</fipsEnabled>
              <tlsSettings>
                <serverEnabledProtocols>TLSv1.1,TLSv1.2</serverEnabledProtocols>
                <clientEnabledProtocols>TLSv1.1,TLSv1.2</clientEnabledProtocols>
              </tlsSettings>
            </securitySettings>
  /system/tlssettings:
    displayName: tlsSettings
    description: |
      Working with TLS Settings
      ----
    get:
      displayName: tlsSettingsRead # update existing addition tlsSettingsList
      description: |
        Retrieve TLS settings.
        
        **Method history:**
        
        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.
      responses:
        200:
          body:
            application/xml:
              example: |
                <tlsSettings>
                  <serverEnabledProtocols>TLSv1,TLSv1.1,TLSv1.2</serverEnabledProtocols>
                  <clientEnabledProtocols>TLSv1,TLSv1.1,TLSv1.2</clientEnabledProtocols>
                </tlsSettings>
    post:
      displayName: tlsSettingsUpdate
      description: |
        Update TLS settings.
        
        Include a comma separated list of the TLS versions you want to enable,
        for both server and client.
        
        **Method history:**
        
        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.
      body:
        application/xml:
          example: |
            <tlsSettings>
              <serverEnabledProtocols>TLSv1.1,TLSv1.2</serverEnabledProtocols>
              <clientEnabledProtocols>TLSv1.1,TLSv1.2</clientEnabledProtocols>
            </tlsSettings>
  /system/timesettings:
    displayName: systemTime
    description: |
      Working with Time Settings
      ------
      You can either configure time or specify the NTP server to be used for
      time synchronization.
    get:
      displayName: systemTimeRead
      description: |
        Retrieve time settings, like timezone or current date and time with
        NTP server, if configured.
      responses:
        200:
          body:
            application/xml:
              example: |
                <timeSettings>
                  <ntpServer>
                    <string>192.168.110.1</string>
                  </ntpServer>
                  <datetime>04/19/2017 06:53:57</datetime>
                  <timezone>UTC</timezone>
                </timeSettings>
    put:
      displayName: systemTimeUpdate
      description: |
        Configure time or specify the NTP server to use for time
        synchronization.
      body:
        application/xml:
          example: |
            <timeSettings>
              <ntpServer>
                <string>192.168.110.1</string>
              </ntpServer>
              <datetime>04/19/2017 06:53:57</datetime>
              <timezone>UTC</timezone>
            </timeSettings>
          schema: systemTimeUpdate
    /ntp:
      displayName: ntp
      description: |
        Working with NTP Settings
        ----
      delete:
        displayName: ntpDelete
        description: Delete NTP server.
  /system/locale:
    displayName: systemLocale
    description: |
      Configure System Locale
      ----
    get:
      displayName: systemLocaleRead
      description: Retrieve locale info.
      responses:
        200:
          body:
            application/xml:
              example: |
                <locale>
                  <language>en</language>
                  <country>US</country>
                </locale>
    put:
      displayName: systemLocaleUpdate
      description: Configure locale.
      body:
        application/xml:
          example: |
            <locale>
              <language>ja</language>
              <country>JP</country>
            </locale>
          schema: systemLocaleUpdate
  /system/syslogserver:
    displayName: systemSyslogServer
    description: |
      Working with Syslog Servers
      -----
    get:
      displayName: systemSyslogServerRead
      description: Retrieve syslog servers.
      responses:
        200:
          body:
            application/xml:
              example: |
                <syslogserver>
                  <syslogServer>192.168.110.20</syslogServer>
                  <port>514</port>
                  <protocol>UDP</protocol>
                </syslogserver>
    put:
      displayName: systemSyslogServerUpdate
      description: Configure syslog servers.
      body:
        application/xml:
          example: |
            <syslogserver>
              <syslogServer>192.168.110.20</syslogServer>
              <port>514</port>
              <protocol>UDP</protocol>
            </syslogserver>
          schema: systemSyslogServerUpdate
    delete:
      displayName: systemSyslogServerDelete
      description: Delete syslog servers.
  /components:
    displayName: componentsManagement
    description: |
      Working with Components
      ----
      
      The NSX Manager appliance has the following components:
      
      Component | Description |
      ------|--------
      NSX | NSX Manager
      NSXREPLICATOR | Universal Synchronization Service
      RABBITMQ | RabbitMQ - Messaging service
      SSH | SSH Service
      VPOSTGRES | vPostgres - Database service
    get:
      displayName: componentsManagementRead
      description: Retrieve all appliance manager components.
      responses:
        200:
          body:
            application/xml:
              example: |
                <components>
                  <component>
                    <componentId>SSH</componentId>
                    <name>SSH Service</name>
                    <description>Secure Shell</description>
                    <status>RUNNING</status>
                    <enabled>true</enabled>
                    <showTechSupportLogs>false</showTechSupportLogs>
                    <usedBy/>
                    <componentGroup>SYSTEM</componentGroup>
                  </component>
                  <component>
                    <componentId>VPOSTGRES</componentId>
                    <name>vPostgres</name>
                    <description>vPostgres - Database service</description>
                    <status>RUNNING</status>
                    <enabled>true</enabled>
                    <showTechSupportLogs>false</showTechSupportLogs>
                    <usedBy>
                      <string>NSX</string>
                    </usedBy>
                    <componentGroup>COMMON</componentGroup>
                  </component>
                  <component>
                    <componentId>NSXREPLICATOR</componentId>
                    <name>NSX Replicator</name>
                    <description>NSX Replicator</description>
                    <status>RUNNING</status>
                    <enabled>true</enabled>
                    <showTechSupportLogs>false</showTechSupportLogs>
                    <uses>
                      <string>NSX</string>
                    </uses>
                    <usedBy/>
                    <componentGroup>NSXGRP</componentGroup>
                    <versionInfo>
                      <majorVersion>6</majorVersion>
                      <minorVersion>2</minorVersion>
                      <patchVersion>5</patchVersion>
                      <buildNumber>4818383</buildNumber>
                    </versionInfo>
                  </component>
                  <component>
                    <componentId>RABBITMQ</componentId>
                    <name>RabbitMQ</name>
                    <description>RabbitMQ - Messaging service</description>
                    <status>RUNNING</status>
                    <enabled>true</enabled>
                    <showTechSupportLogs>false</showTechSupportLogs>
                    <usedBy>
                      <string>NSX</string>
                    </usedBy>
                    <componentGroup>COMMON</componentGroup>
                  </component>
                  <component>
                    <componentId>NSX</componentId>
                    <name>NSX Manager</name>
                    <description>NSX Manager</description>
                    <status>RUNNING</status>
                    <enabled>true</enabled>
                    <showTechSupportLogs>true</showTechSupportLogs>
                    <uses>
                      <string>VPOSTGRES</string>
                      <string>RABBITMQ</string>
                    </uses>
                    <usedBy>
                      <string>NSXREPLICATOR</string>
                    </usedBy>
                    <componentGroup>NSXGRP</componentGroup>
                    <versionInfo>
                      <majorVersion>6</majorVersion>
                      <minorVersion>2</minorVersion>
                      <patchVersion>5</patchVersion>
                      <buildNumber>4818372</buildNumber>
                    </versionInfo>
                  </component>
                </components>
    /component/{componentID}:
      displayName: componentManagement
      description: |
        Working with a Specific Component
        ----
      uriParameters:
        componentID:
          required: true
          displayName: componentID
          description: Specified component ID.
      get:
        displayName: componentManagementRead
        description: Retrieve details for the specified component.
        responses:
          200:
            body:
              application/xml:
                example: |
                  <component>
                    <componentId>NSX</componentId>
                    <name>NSX Manager</name>
                    <description>NSX Manager</description>
                    <status>RUNNING</status>
                    <enabled>true</enabled>
                    <showTechSupportLogs>true</showTechSupportLogs>
                    <uses>
                      <string>VPOSTGRES</string>
                      <string>RABBITMQ</string>
                    </uses>
                    <usedBy>
                      <string>NSXREPLICATOR</string>
                    </usedBy>
                    <componentGroup>NSXGRP</componentGroup>
                    <versionInfo>
                      <majorVersion>6</majorVersion>
                      <minorVersion>2</minorVersion>
                      <patchVersion>5</patchVersion>
                      <buildNumber>4818372</buildNumber>
                    </versionInfo>
                  </component>
      /dependencies:
        displayName: componentDependencies
        description: |
          Working with Component Dependencies
          ----
        get:
          displayName: componentDependenciesRead
          description: Retrieve dependency details for the specified component.
          responses:
            200:
              body:
                application/xml:
                  example: |
                    <list>
                      <string>VPOSTGRES</string>
                      <string>RABBITMQ</string>
                    </list>
      /dependents:
        displayName: componentDependents
        description: |
          Working with Component Dependents
          ----
        get:
          displayName: componentDependentsRead
          description: Retrieve dependents for the specified component.
          responses:
            200:
              body:
                application/xml:
                  example: |
                    <list>
                      <string>NSXREPLICATOR</string>
                    </list>
      /status:
        displayName: componentStatus
        description: |
          Working with Component Status
          ----
        get:
          displayName: componentStatusRead
          description: Retrieve current status for the specified component.
          responses:
            200:
              body:
                application/xml:
                  example: |
                    <result>
                      <result class="status">RUNNING</result>
                      <operationStatus>SUCCESS</operationStatus>
                    </result>
      /toggleStatus/{command}:
        displayName: componentManagementToggle
        description: | 
          Toggle Component Status
          -----
        uriParameters:
          command:
            displayName: command
            description: Use **command** parameter *start* or *stop*.
            required: true
        post:
          displayName: componentManagementToggleCommand # update existing additon componentManagementToggleAction
          description: Start or stop a component.
    /component/APPMGMT/restart:
      displayName: componentAppMgmtRestart # update existing addition componentRestart
      description: |
        Working With the Appliance Management Web Application
        -----
      post:
        displayName: componentAppMgmtRestartExecute # update existing addition componentRestartAction 
        description: Restart the appliance management web application.
  /backuprestore/backupsettings:
    displayName: applianceMgrBackupSettings
    description: |
      NSX Manager Appliance Backup Settings
      -----
      You can back up and restore your NSX Manager data, which can include
      system configuration, events, and audit log tables. Configuration tables
      are included in every backup. Backups are saved to a remote location that
      must be accessible by the NSX Manager.
      
      Parameters for the NSX Manager appliance backup:
      
      * **transferProtocol**: *FTP, SFTP*
      * **frequency**: *weekly, daily, hourly*
      * **dayOfWeek**: *SUNDAY, MONDAY, ...., SATURDAY*
      * **hourOfDay**: [*0-24*]
      * **minuteOfHour**: [*0-60*]
      * **excludeTables**: *AUDIT_LOG, SYSTEM_EVENTS, FLOW_RECORDS*  
      The tables specified in the **excludeTables** parameter are not backed up.
      
      You must set a **passPhrase** for the backups. The passphrase is used
      to create and read backup files. If you do not set a passphrase, backups
      will fail. If you forget the passphrase set on a backup file, you cannot
      restore that backup file.
    get:
      displayName: applianceMgrBackupSettingsRead
      description: Retrieve backup settings.
      responses:
        200:
          body:
            application/xml:
              example: |
                <backupRestoreSettings>
                  <ftpSettings>
                    <transferProtocol>SFTP</transferProtocol>
                    <hostNameIPAddress>192.168.110.30</hostNameIPAddress>
                    <port>22</port>
                    <userName>admin</userName>
                    <password>testing123</password>
                    <backupDirectory>/backups</backupDirectory>
                    <filenamePrefix>nsxmgr-01a</filenamePrefix>
                    <passPhrase>testing456</passPhrase>
                    <passiveMode>true</passiveMode>
                    <useEPRT>false</useEPRT>
                    <useEPSV>true</useEPSV>
                  </ftpSettings>
                  <backupFrequency>
                    <frequency>DAILY</frequency>
                    <hourOfDay>2</hourOfDay>
                    <minuteOfHour>15</minuteOfHour>
                  </backupFrequency>
                  <excludeTables>
                    <excludeTable>AUDIT_LOGS</excludeTable>
                    <excludeTable>SYSTEM_EVENTS</excludeTable>
                    <excludeTable>FLOW_RECORDS</excludeTable>
                  </excludeTables>
                </backupRestoreSettings>
    put:
      displayName: applianceMgrBackupSettingsUpdate
      description: Configure backups on the appliance manager.
      body:
        application/xml:
          example: |
            <backupRestoreSettings>
              <ftpSettings>
                <transferProtocol>SFTP</transferProtocol>
                <hostNameIPAddress>192.168.110.30</hostNameIPAddress>
                <port>22</port>
                <userName>admin</userName>
                <password>testing123</password>
                <backupDirectory>/backups</backupDirectory>
                <filenamePrefix>nsxmgr-01a</filenamePrefix>
                <passPhrase>testing456</passPhrase>
                <passiveMode>true</passiveMode>
                <useEPRT>false</useEPRT>
                <useEPSV>true</useEPSV>
              </ftpSettings>
              <backupFrequency>
                <frequency>WEEKLY</frequency>
                <dayOfWeek>SUNDAY</dayOfWeek>
                <hourOfDay>2</hourOfDay>
                <minuteOfHour>15</minuteOfHour>
              </backupFrequency>
              <excludeTables>
                <excludeTable>AUDIT_LOGS</excludeTable>
              </excludeTables>
            </backupRestoreSettings>
          schema: applianceMgrBackupSettingsUpdate
    delete:
      displayName: applianceMgrBackupSettingsDelete
      description: Delete appliance manager backup configuration.
    /ftpsettings:
      displayName: applianceMgrBackupSettingsFtp
      description: |
        NSX Manager Appliance Backup FTP Settings
        ---
        See *NSX Manager Appliance Backup Settings* for details.
      put:
        displayName: applianceMgrBackupSettingsFtpUpdate
        description: Configure FTP settings.
    /excludedata:
      displayName: applianceMgrBackupSettingsExclude
      description: |
        NSX Manager Appliance Backup Exclusion Settings
        ---
        See *NSX Manager Appliance Backup Settings* for details.
      put:
        displayName: applianceMgrBackupSettingsExcludeUpdate
        description: Specify tables that need not be backed up.
    /schedule:
      displayName: applianceMgrBackupSettingsSchedule
      description: |
        NSX Manager Appliance Backup Schedule Settings
        ---
        See *NSX Manager Appliance Backup Settings* for details.
      put:
        displayName: applianceMgrBackupSettingsScheduleUpdate
        description: Set backup schedule.
      delete:
        displayName: applianceMgrBackupSettingsScheduleDelete
        description: Delete backup schedule.
  /backuprestore/backup:
    displayName: applianceMgrBackup
    description: |
      NSX Manager Appliance On-Demand Backup
      ----
    post:
      displayName: applianceMgrBackupCreate # existing dupfix applianceMgrBackup
      description: Start an on-demand NSX backup.
  /backuprestore/backups:
    displayName: applianceMgrBackups
    description: |
      Working with NSX Manager Appliance Backup Files
      -----
    get:
      displayName: applianceMgrBackupsRead
      description: |
        Retrieve list of all backups available at configured backup location.
      responses:
        200:
          body:
            application/xml:
              example: |
                <list>
                  <backupFileProperties>
                    <fileName></fileName>
                    <fileSize></fileSize>
                    <creationTime></creationTime>
                  </backupFileProperties>
                </list>
  /backuprestore/restore:
    displayName: applianceMgrBackupRestore
    description: |
      Restoring Data from an NSX Manager Appliance Backup File
      ------
    post:
      displayName: applianceMgrBackupRestoreExecute # existing dupfix applianceMgrBackupRestore
      description: | 
        Restore data from a backup file.
        
        Retrive a list of restore files using `GET /api/1.0/appliance-management/backuprestore/backups`.
      queryParameters:
        restoreFile:
          required: true
          displayName: restoreFile
          description: File name of restore file.
  /techsupportlogs/{componentID}:
    displayName: techLogs
    description: |
      Working with Tech Support Logs by Component
      ----
    uriParameters:
      componentID:
        required: true
        displayName: componentID
        description: |
          Specified component to generate tech support logs. For example,
          *NSX*.
    post:
      displayName: techLogsCreate
      description: | 
        Generate tech support logs. The location response header contains the
        location of the created tech support file. 
  /techsupportlogs/{filename}:
    displayName: techLogsDownload
    description: | 
      Working with Tech Support Log Files
      -----
    uriParameters:
      filename:
        required: true
        displayName: filename
        description: Name of log file to download.
    get:
      displayName: techLogsDownloadRead # dupfix techLogsDownload
      description: Download tech support logs
  /notifications:
    displayName: notifications
    description: |
      Working with Support Notifications
      ----
    get:
      displayName: notificationsRead
      description: Retrieve all system generated notifications.
    delete:
      displayName: notificationsDelete
      description: Delete all notifications.
    /{ID}/acknowledge:
      displayName: notificationsAcknowledge
      description: |
        Acknowledge Notifications
        ----
      uriParameters:
        ID:
          displayName: ID
          description: Notification ID.
          required: true
      post:
        displayName: notificationsAcknowledgeAck # dupfix notificationsAcknowledge
        description: |
          Acknowledge a notification. The notification is then deleted from
          the system.
  /upgrade:
    displayName: nsxManagerUpgrade
    description: |
      Upgrading NSX Manager Appliance
      ----
        
      To upgrade NSX Manager, you must do the following:
        * upload an upgrade bundle   
          `POST /api/1.0/appliance-management/upgrade/uploadbundle/{componentID}`
        * retrieve the upgrade information   
          `GET /api/1.0/appliance-management/upgrade/information/{componentID}`
        * edit the **preUpgradeQuestionsAnswers** section of the upgrade
          information response, if needed
        * start the upgrade, providing the edited **preUpgradeQuestionsAnswers**
          section as the request body   
          `POST /api/1.0/appliance-management/upgrade/start/{componentID}`
        
    /uploadbundle/{componentID}:
      displayName: upgrade
      description: |
        Upload an NSX Manager Upgrade Bundle
        ----
        You must upload the upgrade bundle using the form-data content-type.
        Consult the documentation for your REST client for instructions. 
        
        Do not set other Content-type headers in your request, for
        example, *Content-type: application/xml*.
        
        When you upload a file as form-data, you must provide a **key**
        and a **value** for the file. The **key** is *file*, and the **value**
        is the location of the upgrade bundle file.
        
        **Example using curl**
        ```
        /usr/bin/curl -v -k -i -F file=@/tmp/VMware-NSX-Manager-upgrade-bundle-6.2.7-5343628.tar.gz -H 'Authorization: Basic YWRtaW46ZGXXXXXXXX==' 
        https://192.168.110.42/api/1.0/appliance-management/upgrade/uploadbundle/NSX
        ```
      uriParameters:
        componentID:
          required: true
          displayName: componentID
          description: Component ID.
      post:
        displayName: upgradeBundleUpload
        description: Upload upgrade bundle.
    /information/{componentID}:
      displayName: upgradeBundleInformation
      description: |
        Prepare for NSX Manager Upgrade
        ---
      get:
        displayName: upgradeBundleDetails
        description: |
          Once you have uploaded an upgrade bundle, you must retrieve
          information about the upgrade. This request contains pre-upgrade
          validation warnings and error messages, along with pre-upgrade
          questions with default answers. Review the information and edit the
          answers in the **preUpgradeQuestionsAnswers** section if needed before
          providing the section as the request body to the `POST
          /api/1.0/appliance-management/upgrade/start/{componentID}` method.
        responses:
          200:
            body:
              application/xml:
                example: |
                  <upgradeInformation>
                    <fromVersion>6.2.5</fromVersion>
                    <toVersion>6.2.7.5343628</toVersion>
                    <upgradeBundleDescription>Upgrade to 6.2.7 5343628</upgradeBundleDescription>
                    <preUpgradeQuestionsAnswers>
                      <preUpgradeQuestionAnswer>
                        <questionId>preUpgradeChecks1:Q1</questionId>
                        <question>Do you want to enable SSH ?</question>
                        <questionAnserType>YESNO</questionAnserType>
                        <defaultSelection>NO</defaultSelection>
                      </preUpgradeQuestionAnswer>
                      <preUpgradeQuestionAnswer>
                        <questionId>preUpgradeChecks1:Q2</questionId>
                        <question>This product participates in VMware&apos;s Customer Experience Improvement Program (&quot;CEIP&quot;). The CEIP provides VMware with information that enables VMware to improve its products and services, to fix problems, and to advise you on
                          how best to deploy and use our products. As part of the CEIP, VMware collects technical information about your organization&apos;s use of VMware products and services on a regular basis in association with your organization&apos;s VMware license
                          key(s). This information does not personally identify any individual. For additional information regarding the CEIP, please see the Trust and Assurance Center at http://www.vmware.com/trustvmware/ceip.html. You can select your participation
                          preferences below. Do you want to join the VMware Customer Experience Improvement Program ?</question>
                        <questionAnserType>YESNO</questionAnserType>
                        <defaultSelection>YES</defaultSelection>
                      </preUpgradeQuestionAnswer>
                    </preUpgradeQuestionsAnswers>
                    <upgradeStepsDto>
                      <step>
                        <stepId>ValidationStep</stepId>
                        <stepLabel>Upgrade Bundle Validation</stepLabel>
                        <description>Upgrade bundle will be validated before the actual upgrade process.</description>
                      </step>
                      <step>
                        <stepId>UpgradeStep</stepId>
                        <stepLabel>Upgrade NSX manager</stepLabel>
                        <description>Upgrade process for NSX Manager will begin.</description>
                      </step>
                    </upgradeStepsDto>
                  </upgradeInformation>
    /start/{componentID}:
      displayName: upgradeStart
      description: |
        Start the NSX Manager Upgrade
        ----
      uriParameters:
        componentID:
          required: true
          displayName: componentID
          description: Component ID
      post:
        displayName: upgradeStartExecute # dupfix upgradeStart
        description: Start upgrade process.
        body:
          application/xml:
            example: |
              <preUpgradeQuestionsAnswers>
                <preUpgradeQuestionAnswer>
                  <questionId>preUpgradeChecks1:Q1</questionId>
                  <question>Do you want to enable SSH ?</question>
                  <questionAnserType>YESNO</questionAnserType>
                  <answer>YES</answer>
                </preUpgradeQuestionAnswer>
                <preUpgradeQuestionAnswer>
                  <questionId>preUpgradeChecks1:Q2</questionId>
                  <question>This product participates in VMware&apos;s Customer Experience Improvement Program (&quot;CEIP&quot;). The CEIP provides VMware with information that enables VMware to improve its products and services, to fix problems, and to advise you on
                    how best to deploy and use our products. As part of the CEIP, VMware collects technical information about your organization&apos;s use of VMware products and services on a regular basis in association with your organization&apos;s VMware license
                    key(s). This information does not personally identify any individual. For additional information regarding the CEIP, please see the Trust and Assurance Center at http://www.vmware.com/trustvmware/ceip.html. You can select your participation
                    preferences below. Do you want to join the VMware Customer Experience Improvement Program ?</question>
                  <questionAnserType>YESNO</questionAnserType>
                  <answer>YES</answer>
                </preUpgradeQuestionAnswer>
              </preUpgradeQuestionsAnswers>
    /status/{componentID}:
      displayName: upgradeStatus
      description: |
        NSX Manager Upgrade Status
        ----
      uriParameters:
        componentID:
          required: true
          displayName: componentID
          description: Component ID.
      get:
        displayName: upgradeStatusRead # dupfix upgradeStatus
        description: Query upgrade status.
  /certificatemanager:
    displayName: certificateManager # URI added for reorg
    description: |
      Working with Certificates on the NSX Manager Appliance
      -------

    /pkcs12keystore/nsx:
      displayName: certificatesKeystore
      description: |
        Working with Keystore Files
        ------------
      post:
        displayName: certificatesKeystoreUpdate
        description: |
          Upload keystore file.
          
          Input is PKCS#12 formatted NSX file along with password.
        queryParameters:
          password:
            displayName: password
            description: Password.
    /certificates/nsx:
      displayName: certificateManagerNsx # existing reorg certificateManager
      description: |
        NSX Manager Certificate Manager
        --------
      get:
        displayName: certificateManagerCertificatesNsxRead
        description: |
          Retrieve certificate information from NSX Manager.
        responses:
          200:
            body:
              application/xml:
                example: |
                  <x509Certificates>
                    <x509certificate>
                      <subjectCn></subjectCn>
                      <issuerCn></issuerCn>
                      <version></version>
                      <serialNumber></serialNumber>
                      <signatureAlgo></signatureAlgo>
                      <signature></signature>
                      <notBefore></notBefore>
                      <notAfter></notAfter>
                      <issuer></issuer>
                      <subject></subject>
                      <publicKeyAlgo></publicKeyAlgo>
                      <publicKeyLength></publicKeyLength>
                      <rsaPublicKeyModulus></rsaPublicKeyModulus>
                      <rsaPublicKeyExponent></rsaPublicKeyExponent>
                      <sha1Hash></sha1Hash>
                      <md5Hash></md5Hash>
                      <isCa></isCa>
                      <isValid></isValid>
                    </x509certificate>
                    ...
                  </x509Certificates>
    /csr/nsx:
      displayName: certificateCsr
      description: |
        Working with Certificate Signing Requests
        ------
      post:
        displayName: certificateCsrCreate
        description: |
          Create a certificate signing request (CSR) for NSX Manager.
          
          The response header contains the created file location.
          
          **Method history:**
          
          Release | Modification
          --------|-------------
          6.2.3 | Method introduced. Replaces `PUT /api/1.0/appliance-management/certificatemanager/csr/nsx`.
        body:
          application/xml:
            example: |
              <csr>
                <algorithm></algorithm>
                <keySize></keySize>
                <subjectDto>
                  <commonName></commonName>
                  <organizationUnit></organizationUnit>
                  <organizationName></organizationName>
                  <localityName></localityName>
                  <stateName></stateName>
                  <countryCode></countryCode>
                </subjectDto>
              </csr>
      get:
        displayName: certificateCsrRead
        description: |
          Retrieve generated certificate signing request (CSR).
    /uploadchain/nsx:
      displayName: certificateChain
      description: |
        Working with Certificate Chains
        -----
      post:
        displayName: certificateChainUpload
        description: |
          Upload certificate chain.
          
          Input is certificate chain file which is a PEM encoded chain of
          certificates received from the CA after signing a CSR.
/2.0/systemevent:
  displayName: systemEvents
  description: |
    Working with NSX Manager System Events
    ==========
  get:
    displayName: systemEventsRead
    description: Get NSX Manager system events
    queryParameters:
      startIndex:
        displayName: startIndex
        description: !include documentation/reuse/startindex
        required: false
      pageSize:
        displayName: pageSize
        description: !include documentation/reuse/pagesize-1024
        default: 256
        required: false
/2.0/auditlog:
  displayName: auditLogs
  description: |
    Working with NSX Manager Audit Logs
    ==========
  get:
    displayName: auditLogsRead
    description: Get NSX Manager audit logs
    queryParameters:
      startIndex:
        displayName: startIndex
        description: !include documentation/reuse/startindex
        required: false
      pageSize:
        displayName: pageSize
        description: !include documentation/reuse/pagesize-1024
        required: false
        default: 256
/2.0/nwfabric:
  displayName: nwfabric
  description: |
    Working with Network Fabric Configuration
    =====

  /configure:
    displayName: nwfabricConfig
    description: |
      Working with Network Virtualization Components and VXLAN
      ---
      Cluster preparation can be broken down into the following:
        * Install VIB and non-VIB related action: Before any per-host config
        a VIB must be installed on the host. The feature can use this time to
        perform other bootstrapping tasks which do not depend on
        VIB-installation. e.g. VXLAN creates the vmknic-pg and sets up some
        opaque data.
        * Post-VIB install: Prepare each host for the feature. In the case of
        VXLAN, create vmknics.
    post:
      displayName: nwfabricConfigCreate
      description: |
        Install network fabric or VXLAN.
        
        This method can be used to perform the following tasks: 
        * Install Network Virtualization Components
        * Configure VXLAN
        * Configure VXLAN with LACPv2
        * Reset Communication Between NSX Manager and a Host or Cluster
        
        **Parameter Information**
        
        | Name | Comments |
        |------|----------|
        |**resourceId** | vCenter MOB ID of cluster. For example, *domain-7*. A host can be specified when resetting communication. For example, *host-24*. |
        |**featureId** | Feature to act upon. Omit for network virtualization components operations. Use *com.vmware.vshield.vsm.vxlan* for VXLAN operations, *com.vmware.vshield.vsm.messagingInfra* for message bus operations.|
        |**ipPoolId** | Used for VXLAN installation. If not specified, DHCP is used for VTEP address assignment.|
        |**teaming** | Used for VXLAN installation. Options are *FAILOVER_ORDER*, *ETHER_CHANNEL*, *LACP_ACTIVE*, *LACP_PASSIVE*, *LOADBALANCE_LOADBASED*, *LOADBALANCE_SRCID*, *LOADBALANCE_SRCMAC*, *LACP_V2*|
        |**uplinkPortName** | The *uplinkPortName* as specified in vCenter.|
        
        ### Install Network Virtualization Components
        
        `POST /api/2.0/nwfabric/configure`
        
        ```
        <nwFabricFeatureConfig>
          <resourceConfig>
            <resourceId>CLUSTER MOID</resourceId>
          </resourceConfig>
        </nwFabricFeatureConfig>
        ```
        
        ### Configure VXLAN
        
        `POST /api/2.0/nwfabric/configure`
        
        ```
        <nwFabricFeatureConfig>
          <featureId>com.vmware.vshield.vsm.vxlan</featureId>
          <resourceConfig>
            <resourceId>CLUSTER MOID</resourceId>
            <configSpec class="clusterMappingSpec">
              <switch>
                <objectId>DVS MOID</objectId></switch>
                <vlanId>0</vlanId>
                <vmknicCount>1</vmknicCount>
                <ipPoolId>IPADDRESSPOOL ID</ipPoolId>
            </configSpec>
          </resourceConfig>
          <resourceConfig>
            <resourceId>DVS MOID</resourceId>
            <configSpec class="vdsContext">
              <switch>
                  <objectId>DVS MOID</objectId>
              </switch>
              <mtu>1600</mtu>
              <teaming>ETHER_CHANNEL</teaming>
            </configSpec>
          </resourceConfig>
        </nwFabricFeatureConfig>
        ```
        
        ### Configure VXLAN with LACPv2
        
        `POST /api/2.0/nwfabric/configure`
        
        ```
        <nwFabricFeatureConfig>
          <featureId>com.vmware.vshield.nsxmgr.vxlan</featureId>
          <resourceConfig>
            <resourceId>CLUSTER MOID</resourceId>
            <configSpec class="clusterMappingSpec">
              <switch>
                <objectId>DVS MOID</objectId>
              </switch>
              <vlanId>0</vlanId>
              <vmknicCount>1</vmknicCount>
            </configSpec>
          </resourceConfig>
          <resourceConfig>
            <resourceId>DVS MOID</resourceId>
            <configSpec class="vdsContext">
              <switch>
                <objectId>DVS MOID</objectId>
              </switch>
              <mtu>1600</mtu>
              <teaming>LACP_V2</teaming>
              <uplinkPortName>LAG NAME</uplinkPortName>
            </configSpec>
          </resourceConfig>
        </nwFabricFeatureConfig>
        ```
        
        ### Reset Communication Between NSX Manager and a Host or Cluster
        
        `POST /api/2.0/nwfabric/configure?action=synchronize`
        
        ``` 
        <nwFabricFeatureConfig>
          <featureId>com.vmware.vshield.vsm.messagingInfra</featureId>
          <resourceConfig>
            <resourceId>resourceId</resourceId>
          </resourceConfig>
        </nwFabricFeatureConfig> 
        ```
      body:
        application/xml:
          example: |
            <nwFabricFeatureConfig>
              <featureId>com.vmware.vshield.vsm.vxlan</featureId>
              <resourceConfig>
                <resourceId>CLUSTER MOID</resourceId>
                <configSpec class="clusterMappingSpec">
                  <switch>
                    <objectId>DVS MOID</objectId></switch>
                    <vlanId>0</vlanId>
                    <vmknicCount>1</vmknicCount>
                    <ipPoolId>IPADDRESSPOOL ID</ipPoolId>
                </configSpec>
              </resourceConfig>
            </nwFabricFeatureConfig> 
          schema: nwFabricConfig
      queryParameters:
        action:
          displayName: action
          description: |
            Specify *synchronize* to reset communication between NSX Manager
            and a host or cluster.
    put:
      displayName: nwfabricConfigUpdate
      description: |
        Upgrade Network virtualization components.
        _
        This API call can be used to upgrade network virtualization components.
        After NSX Manager is upgraded, previously prepared clusters must have
        the 6.x network virtualization components installed.
      body:
        application/xml:
          example: |
            <nwFabricFeatureConfig>
              <resourceConfig>
                <resourceId>CLUSTER MOID</resourceId>
              </resourceConfig>
            </nwFabricFeatureConfig>
          schema: nwFabricConfig
    delete:
      displayName: nwfabricConfigDelete
      description: |
        Remove VXLAN or network virtualization components.
        
        Removing network virtualization components removes previously
        installed VIBs, tears down NSX Manager to ESXi messaging, and removes
        any other network fabric dependent features such as logical switches.
        If a feature such as logical switches is being used in your
        environment, this call fails.
        
        Removing VXLAN does not remove the network virtualization components
        from the cluster.
        
        | Name | Comments |
        |------|----------|
        |**resourceId** | vCenter MOB ID of cluster. For example, domain-7.|
        |**featureId** | Feature to act upon. Omit for network virtualization components operations. Use *com.vmware.vshield.vsm.vxlan* for VXLAN operations.|
        
        ### Remove Network Virtualization Components
        
        ```
        <nwFabricFeatureConfig>
          <resourceConfig>
            <resourceId>CLUSTER MOID</resourceId>
          </resourceConfig>
        </nwFabricFeatureConfig>
        ```
        
        ### Remove VXLAN
        
        ```
        <nwFabricFeatureConfig>
          <featureId>com.vmware.vshield.vsm.vxlan</featureId>
          <resourceConfig>
            <resourceId>CLUSTER MOID</resourceId>
           </resourceConfig>
        </nwFabricFeatureConfig>
        ```
        
        ### Remove VXLAN with vDS context
        
        ```
        <nwFabricFeatureConfig>
          <featureId>com.vmware.vshield.vsm.vxlan</featureId>
          <resourceConfig>
            <resourceId>CLUSTER MOID</resourceId>
            <configSpec class="map">
              <entry>
                <keyclass="java.lang.String">vxlan</key>
                <valueclass="java.lang.String">cascadeDeleteVdsContext</value>
              </entry>
            </configSpec>
          </resourceConfig>
        </nwFabricFeatureConfig>
        ```
      body:
        application/xml:
          example: |
            <nwFabricFeatureConfig>
              <featureId>com.vmware.vshield.vsm.vxlan</featureId>
              <resourceConfig>
                <resourceId>CLUSTER MOID</resourceId>
               </resourceConfig>
            </nwFabricFeatureConfig>
          schema: nwFabricConfig
  /features:
    displayName: nwfabricFeatures
    get:
      displayName: nwfabricFeaturesList # dupfix nwfabricFeatures
      description: |
        Retrieves all network fabric features available on the cluster. Multiple
        **featureInfo** sections may be returned.
      responses:
        200:
          body:
            application/xml:
              example: |
                <featureInfos>
                  <featureInfo>
                    <name>FEATURE NAME</name>
                    <featureId>FEATURE ID</featureId>
                    <version>FEATURE VERSION</version>
                  </featureInfo>
                </featureInfos>
  /status:
    displayName: nwfabricStatus
    description: |
      Working With Network Fabric Status
      ----
    get:
      displayName: nwfabricStatusRead # dupfix nwfabricStatus
      description: |
        Retrieve the network fabric status of the specified resource.
      queryParameters:
        resource:
          displayName: resource
          description: |
            Set **resource** to the correct *resourceId* which is a valid
            vCenter MOID (e.g. domain-c34 for a cluster).
          required: true
      responses:
        200:
          body:
            application/xml:
              example: |
                <resourceStatuses>
                  <resourceStatus>
                    <resource>
                      <objectId>resource-id</objectId>
                      <objectTypeName>ClusterComputeResource</objectTypeName>
                      <nsxmgrUuid>jfldj</nsxmgrUuid>
                      <revision>2</revision>
                      <type>
                        <typeName>ClusterComputeResource</typeName>
                      </type>
                      <name>c-1</name>
                      <scope>
                        <id>datacenter-2</id>
                        <objectTypeName>Datacenter</objectTypeName>
                        <name>dc-1</name>
                      </scope>
                      <clientHandle></clientHandle>
                      <extendedAttributes></extendedAttributes>
                    </resource>
                    <nwFabricFeatureStatus>
                      <featureId>com.vmware.vshield.nsxmgr.nwfabric.hostPrep</featureId>
                      <featureVersion>5.5</featureVersion>
                      <updateAvailable>false</updateAvailable>
                      <status>RED</status>
                      <message></message>
                      <installed>true</installed>
                    </nwFabricFeatureStatus>
                    <nwFabricFeatureStatus>
                      <featureId>com.vmware.vshield.nsxmgr.vxlan</featureId>
                      <featureVersion>5.5</featureVersion>
                      <updateAvailable>false</updateAvailable>
                      <status>UNKNOWN</status>
                      <installed>false</installed>
                    </nwFabricFeatureStatus>
                    <nwFabricFeatureStatus>
                      <featureId>com.vmware.vshield.nsxmgr.messagingInfra</featureId>
                      <featureVersion>5.5</featureVersion>
                      <updateAvailable>false</updateAvailable>
                      <status>UNKNOWN</status>
                      <installed>false</installed>
                    </nwFabricFeatureStatus>
                    <nwFabricFeatureStatus>
                      <featureId>com.vmware.vshield.firewall</featureId>
                      <featureVersion>5.5</featureVersion>
                      <updateAvailable>false</updateAvailable>
                      <status>UNKNOWN</status>
                      <installed>false</installed>
                    </nwFabricFeatureStatus>
                  </resourceStatus>
                </resourceStatuses>
    /child/{parentResourceID}:
      displayName: childStatus
      description: |
        Working With Network Fabric Status of Child Resources
        ----
      uriParameters:
        parentResourceID:
          required: true
          displayName: parentResourceID
          description: Parent resource ID
      get:
        displayName: childStatusRead
        description: |
          Retrieve the network fabric status of child resources of the specified resource.
        responses:
          200:
            body:
              application/xml:
                example: |
                  <resourceStatuses>
                    <resourceStatus>
                      <resource>
                        <objectId>host-9</objectId>
                        <objectTypeName>HostSystem</objectTypeName>
                        <nsxmgrUuid>jfldj</nsxmgrUuid>
                        <revision>4</revision>
                        <type>
                          <typeName>HostSystem</typeName>
                        </type>
                        <name>10.135.14.186</name>
                        <scope>
                          <id>domain-c34</id>
                          <objectTypeName>ClusterComputeResource</objectTypeName>
                          <name>c-1</name>
                        </scope>
                        <clientHandle></clientHandle>
                        <extendedAttributes></extendedAttributes>
                      </resource>
                      <nwFabricFeatureStatus>
                        <featureId>com.vmware.vshield.nsxmgr.nwfabric.hostPrep</featureId>
                        <featureVersion>5.5</featureVersion>
                        <updateAvailable>false</updateAvailable>
                        <status>RED</status>
                        <message></message>
                        <installed>true</installed>
                      </nwFabricFeatureStatus>
                      <nwFabricFeatureStatus>
                        <featureId>com.vmware.vshield.nsxmgr.vxlan</featureId>
                        <featureVersion>5.5</featureVersion>
                        <updateAvailable>false</updateAvailable>
                        <status>UNKNOWN</status>
                        <installed>false</installed>
                      </nwFabricFeatureStatus>
                      <nwFabricFeatureStatus>
                        <featureId>com.vmware.vshield.nsxmgr.messagingInfra</featureId>
                        <featureVersion>5.5</featureVersion>
                        <updateAvailable>false</updateAvailable>
                        <status>UNKNOWN</status>
                        <installed>false</installed>
                      </nwFabricFeatureStatus>
                      <nwFabricFeatureStatus>
                        <featureId>com.vmware.vshield.firewall</featureId>
                        <featureVersion>5.5</featureVersion>
                        <updateAvailable>false</updateAvailable>
                        <status>UNKNOWN</status>
                        <installed>false</installed>
                      </nwFabricFeatureStatus>
                    </resourceStatus>
                  </resourceStatuses>
    /alleligible/{resourceType}:
      displayName: statusResourceType
      description: |
        Working With Status of Resources by Criterion
        ----
      uriParameters:
        resourceType:
          required: true
          displayName: resourceType
          description: Valid resource type
      get:
        displayName: statusResourceTypeRead
        description: |
          Retrieve status of resources by criterion.
        responses:
          200:
            body:
              application/xml:
                example: |
                  <resourceStatuses>
                    <resourceStatus>
                      <resource>
                        <objectId>domain-c34</objectId>
                        <objectTypeName>ClusterComputeResource</objectTypeName>
                        <nsxmgrUuid>jfldj</nsxmgrUuid>
                        <revision>2</revision>
                        <type>
                          <typeName>ClusterComputeResource</typeName>
                        </type>
                        <name>c-1</name>
                        <scope>
                          <id>datacenter-2</id>
                          <objectTypeName>Datacenter</objectTypeName>
                          <name>dc-1</name>
                        </scope>
                        <clientHandle></clientHandle>
                        <extendedAttributes></extendedAttributes>
                      </resource>
                      <nwFabricFeatureStatus>
                        <featureId>com.vmware.vshield.nsxmgr.nwfabric.hostPrep</featureId>
                        <featureVersion>5.5</featureVersion>
                        <updateAvailable>false</updateAvailable>
                        <status>RED</status>
                        <message></message>
                        <installed>true</installed>
                      </nwFabricFeatureStatus>
                      <nwFabricFeatureStatus>
                        <featureId>com.vmware.vshield.nsxmgr.vxlan</featureId>
                        <featureVersion>5.5</featureVersion>
                        <updateAvailable>false</updateAvailable>
                        <status>UNKNOWN</status>
                        <installed>false</installed>
                      </nwFabricFeatureStatus>
                      <nwFabricFeatureStatus>
                        <featureId>com.vmware.vshield.nsxmgr.messagingInfra</featureId>
                        <featureVersion>5.5</featureVersion>
                        <updateAvailable>false</updateAvailable>
                        <status>UNKNOWN</status>
                        <installed>false</installed>
                      </nwFabricFeatureStatus>
                      <nwFabricFeatureStatus>
                        <featureId>com.vmware.vshield.firewall</featureId>
                        <featureVersion>5.5</featureVersion>
                        <updateAvailable>false</updateAvailable>
                        <status>UNKNOWN</status>
                        <installed>false</installed>
                      </nwFabricFeatureStatus>
                    </resourceStatus>
                    <resourceStatus>
                      <resource>
                        <objectId>domain-c32</objectId>
                        <objectTypeName>ClusterComputeResource</objectTypeName>
                        <nsxmgrUuid>jfldj</nsxmgrUuid>
                        <revision>1</revision>
                        <type>
                          <typeName>ClusterComputeResource</typeName>
                        </type>
                        <name>c-2</name>
                        <scope>
                          <id>datacenter-12</id>
                          <objectTypeName>Datacenter</objectTypeName>
                          <name>dc-2</name>
                        </scope>
                        <clientHandle></clientHandle>
                        <extendedAttributes></extendedAttributes>
                      </resource>
                      <nwFabricFeatureStatus>
                        <featureId>com.vmware.vshield.nsxmgr.nwfabric.hostPrep</featureId>
                        <updateAvailable>false</updateAvailable>
                        <status>UNKNOWN</status>
                        <installed>false</installed>
                      </nwFabricFeatureStatus>
                      <nwFabricFeatureStatus>
                        <featureId>com.vmware.vshield.nsxmgr.vxlan</featureId>
                        <featureVersion>5.5</featureVersion>
                        <updateAvailable>false</updateAvailable>
                        <status>UNKNOWN</status>
                        <installed>false</installed>
                      </nwFabricFeatureStatus>
                      <nwFabricFeatureStatus>
                        <featureId>com.vmware.vshield.nsxmgr.messagingInfra</featureId>
                        <featureVersion>5.5</featureVersion>
                        <updateAvailable>false</updateAvailable>
                        <status>UNKNOWN</status>
                        <installed>false</installed>
                      </nwFabricFeatureStatus>
                      <nwFabricFeatureStatus>
                        <featureId>com.vmware.vshield.firewall</featureId>
                        <featureVersion>5.5</featureVersion>
                        <updateAvailable>false</updateAvailable>
                        <status>UNKNOWN</status>
                        <installed>false</installed>
                      </nwFabricFeatureStatus>
                    </resourceStatus>
                  </resourceStatuses>
  /clusters/{clusterID}:
    displayName: nwfabricClusters
    description: |
      Working With Locale ID Configuration For Clusters
      ---
    uriParameters:
      clusterID:
        displayName: clusterID
        description: Cluster ID.
    get:
      displayName: nwfabricClustersRead
      description: Retrieve the locale ID for the specified cluster.
    put:
      displayName: nwfabricClustersUpdate
      description: Update the locale ID for the specified cluster.
      body:
        application/xml:
          example: |
            <nwFabricClusterConfig>
              <localeId></localeId>
            </nwFabricClusterConfig>
          schema: nwfabricClustersUpdate
    delete:
      displayName: nwfabricClustersDelete
      description: Delete locale ID for the specified cluster.
  /hosts/{hostID}:
    displayName: nwfabricHosts
    description: |
      Working With Locale ID Configuration for Hosts
      ----
    uriParameters:
      hostID:
        displayName: hostID
        description: Host ID.
    get:
      displayName: nwfabricHostsRead
      description: Retrieve the locale ID for the specified host.
    put:
      displayName: nwfabricHostsUpdate
      description: Update the locale ID for the specified host.
      body:
        application/xml:
          example: |
            <nwFabricHostConfig>
              <localeId></localeId>
            </nwFabricHostConfig>
          schema: nwfabricHostsUpdate
    delete:
      displayName: nwfabricHostsDelete
      description: Delete the locale ID for the specified host.
/2.0/si/deploy:
  displayName: securityFabric
  description: |
    Working with Security Fabric and Security Services
    ======
    The security fabric simplifies and automates deployment of security
    services and provide a platform for configuration of the elements that are
    required to provide security to workloads. These elements include:
    
    Internal components:
    * Guest Introspection Universal Service Virtual Machine
    * Guest Introspection Mux
    * Logical Firewall
    
    External components:
    * Partner OVFs / VIBs
    * Partner vendor policy templates
    
    For partner services, the overall workflow begins with registration of
    services by partner consoles, followed by deployment of the services by
    the administrator.
    
    Subsequent workflow is as follows:
    1. Select the clusters on which to deploy the security fabric (Mux,
    Traffic filter, USVM).
    2. Specify an IP pool to be used with the SVMs (available only if the
    partner registration indicates requirement of static IPs)
    3. Select portgroup (DVPG) to be used for each cluster (a default is
    pre-populated for the user).
    4. Select datastore to be used for each cluster (a default is
    pre-populated for the user).
    5. NSX Manager deploys the components on all hosts of the selected
    clusters.
    
    Once you deploy the security fabric, an agency defines the configuration
    needed to deploy agents (host components and appliances). An agency is
    created per cluster per deployment spec associated with services.  Agents
    are deployed on the selected clusters, and events / hooks for all the
    relevant actions are generated.
    
    **Request parameters**
    
    Parameter | Description 
    -------|---------
    dataStore |Needs to be specified only in POST call. In PUT call, it should be left empty. 
    dvPortGroup |Optional. If not specified, then user will set the Agent using vCenter Server. 
    ipPool |Optional. If not specified, IP address is assigned through DHCP. 
  post:
    displayName: securityFabricCreate
    description: |
      Deploy security fabric.
    queryParameters:
      startTime:
        displayName: startTime
        description: |
          Time to start deployment task. If not specified, deploy immediately.
    body:
      application/xml:
        example: |
          <clusterDeploymentConfigs>
            <clusterDeploymentConfig>
              <clusterId></clusterId>
              <datastore></datastore>
              <services>
                <serviceDeploymentConfig>
                  <serviceId></serviceId>
                  <dvPortGroup></dvPortGroup>
                  <ipPool></ipPool>
                </serviceDeploymentConfig>
              </services>
            </clusterDeploymentConfig>
          </clusterDeploymentConfigs>
        schema: securityFabricCreate
  put:
    displayName: serviceUpgrade
    description: |
      Upgrade service to recent version.
      
      The datastore, dvPortGroup, and ipPool variables should either not be
      specified or have same value as provided at time of deployment.
    queryParameters:
      startTime:
        displayName: startTime
        description: Specify time to start upgrade.
        required: false
    body:
      application/xml:
        example: |
          <clusterDeploymentConfigs>
            <clusterDeploymentConfig>
              <clusterId></clusterId>
              <datastore></datastore>
              <services>
                <serviceDeploymentConfig>
                  <serviceId></serviceId>
                  <serviceInstanceId></serviceInstanceId>
                  <dvPortGroup></dvPortGroup>
                  <ipPool></ipPool>
                </serviceDeploymentConfig>
              </services>
            </clusterDeploymentConfig>
          </clusterDeploymentConfigs>
        schema: serviceUpgrade
  /service/{serviceID}:
    displayName: service
    description: |
      Working With a Specified Service
      ----
    uriParameters:
      serviceID:
        displayName: serviceID
        description: Specified service.
        required: true
    get:
      displayName: serviceRead
      description: Retrieve all clusters on which the service is installed.
    delete:
      displayName: serviceDelete
      description: Uninstall specified service from specified clusters.
      queryParameters:
        clusters:
          displayName: clusters
          description: |
            Comma-separated list of cluster IDs from which to uninstall the
            service.
        startTime:
          displayName: startTime
          description: |
            Time for uninstall to be scheduled. If not specified, uninstall
            immediately.
    /dependsOn:
      displayName: serviceDependency
      description: |
        Working with Service Dependencies
        ----
        Services installed through the security fabric may be dependent on
        other services. When an internal service is registered, a dependencyMap
        is maintained with the service-id and implementation type of the
        internal service.
        
        When partner registers a new service, the security fabric looks up its
        implementation type in the dependencyMap to identify the service it
        depends on, if any. Accordingly, a new field in Service object called
        dependsOn-service-id is populated.
      get:
        displayName: serviceDependencyRead
        description: |
          Retrieve service on which the specified service depends.
  /cluster/{clusterID}:
    displayName: serviceCluster
    description: |
      Working With Installed Services on a Cluster
      ---
    uriParameters:
      clusterID:
        required: true
        displayName: clusterID
        description: Cluster ID
    get:
      displayName: serviceClusterRead # dupfix serviceRead
      description: Retrieve all services deployed along with their status.
      responses:
        200:
          body:
            application/xml:
              example: |
                <deployedServices>
                  <deployedService>
                    <deploymentUnitId>deploymentunit-1</deploymentUnitId>
                    <serviceId>service-3</serviceId>
                    <cluster>
                      <objectId>domain-c41</objectId>
                      <objectTypeName>ClusterComputeResource</objectTypeName>
                      <nsxmgrUuid>42036483-6CF3-4F0F-B356-2EB1E6369C6F</nsxmgrUuid>
                      <revision>2</revision>
                      <type>
                        <typeName>ClusterComputeResource</typeName>
                      </type>
                      <name>Cluster-1</name>
                      <scope>
                        <id>datacenter-21</id>
                        <objectTypeName>Datacenter</objectTypeName>
                        <name>nasingh-dc</name>
                      </scope>
                       <extendedAttributes></extendedAttributes>
                    </cluster>
                    <serviceName>domain-c41_service-3</serviceName>
                    <datastore>
                      <objectId>datastore-29</objectId>
                      <objectTypeName>Datastore</objectTypeName>
                      <nsxmgrUuid>42036483-6CF3-4F0F-B356-2EB1E6369C6F</nsxmgrUuid>
                      <revision>1</revision>
                      <type>
                        <typeName>Datastore</typeName>
                      </type>
                      <name>datastore1</name>
                       <extendedAttributes></extendedAttributes>
                    </datastore>
                    <dvPortGroup>
                      <objectId>dvportgroup-45</objectId>
                      <objectTypeName>DistributedVirtualPortgroup</objectTypeName>
                      <nsxmgrUuid>42036483-6CF3-4F0F-B356-2EB1E6369C6F</nsxmgrUuid>
                      <revision>2</revision>
                      <type>
                        <typeName>DistributedVirtualPortgroup</typeName>
                      </type>
                      <name>dvPortGroup</name>
                      <scope>
                        <id>datacenter-21</id>
                        <objectTypeName>Datacenter</objectTypeName>
                        <name>nasingh-dc</name>
                      </scope>
                       <extendedAttributes></extendedAttributes>
                    </dvPortGroup>
                    <serviceStatus>SUCCEEDED</serviceStatus>
                  </deployedService>
                </deployedServices>
    delete:
      displayName: serviceClusterDelete # dupfix serviceDelete
      description: |
        Uninstall a service. Fails if you try to remove a service that another
        service depends on.
        
        In order to uninstall services in any order, set parameter ignoreDependency to true.
      queryParameters:
        services:
          displayName: services
          description: |
            Comma-separated list of service IDs to specify which services to
            uninstall. If this is not specified then all the services are
            uninstalled.
          required: false
        startTime:
          displayName: startTime
          description: |
            Time for uninstall to be scheduled. If not specified, do
            immediately.
    /service/{serviceID}:
      displayName: serviceDetails
      description: |
        Working with a Specific Service on a Cluster
        -----
      uriParameters:
        serviceID:
          displayName: serviceID
          description: Service ID on cluster
      get:
        displayName: serviceDetailsRead
        description: Retrieve detailed information about the service.
/1.0/eventcontrol:
  displayName: eventControl
  description: |
    Working with Data Collection for Activity Monitoring
    ===========
    Activity Monitoring provides visibility into your virtual network to
    ensure that security policies at your organization are being enforced
    correctly.
    
    A Security policy may mandate who is allowed access to what applications.
    The Cloud administrator can generate Activity Monitoring reports to see if
    the IP based firewall rule that they set is doing the intended work. By
    providing user and application level detail, Activity Monitoring
    translates high level security policies to low level IP address and
    network based implementation.
    
    Once you enable data collection for Activity Monitoring, you can run
    reports to view inbound traffic (such as virtual machines being accessed
    by users) as well as outbound traffic (resource utilization, interaction
    between inventory containers, and AD groups that accessed a server).
    
    You must enable data collection for one or more virtual machines on a
    vCenter Server before running an Activity Monitoring report. Before
    running a report, ensure that the enabled virtual machines are active and
    are generating network traffic.
    
    You should also register NSX Manager with the AD Domain Controller. See
    "Working with Domains".
    
    Note that only active connections are tracked by Activity Monitoring.
    Virtual machine traffic blocked by firewall rules at the vNIC level is not
    reflected in reports.
    
    In case of an emergency such as a network overload, you can turn off data
    collection at a global level. This overrides all other data collection
    settings.
    
    Some API calls may require the VMID, which is the MOID of the guest
    virtual machine. You can retrieve this by queuing the vCenter mob
    structure (https:VC-IP-Address/mob). The VMID is listed under host
    structure.

  /vm/{vmID}/request:
    displayName: dataCollectionVM
    description: |
      Working With Data Collection on a Specific Virtual Machine
      ----
      You must enable data collection at least five minutes before running an
      Activity Monitoring report.
    uriParameters:
      vmID:
        displayName: vmID
        description: MOID of the guest vm
        required: true
    post:
      displayName: dataCollectionVMCreate
      description: |
        Enable or disable data collection on a virtual machine
        
        Set **value** to *enabled* or *disabled*.
      body:
        application/xml:
          example: |
            <perVmConfig>
              <actions>
                <action>
                  <type>per_vm_config</type>
                  <value>enabled</value>
                </action>
              </actions>
            </perVmConfig>
          schema: dataCollectionVMCreate
  /eventcontrol-root/request:
    displayName: dataCollectionKillSwitch
    description: |
      Override Data Collection
      ----
    post:
      displayName: dataCollectionKillSwitchToggle # existing dupfix dataCollectionKillSwitch
      description: |
        Turn data collection on or off at the global level.
        
        In case of an emergency such as a network overload, you can turn off
        data collection at a global level (kill switch). This overrides all
        other data collection settings.
        
        Set **value** to *enabled* or *disabled*.
      body:
        application/xml:
          example: |
            <request>
              <actions>
                <action>
                  <type>global_switch</type>
                  <value>disabled</value>
                </action>
              </actions>
            </request>
          schema: dataCollectionKillSwitchToggle
  /config/vm/{vmID}:
    displayName: dataCollectionVMInfo
    description: |
      Retrieve Data Collection Configuration for a Specific Virtual Machine
      -----
      When reporting per virtual machine configuration, current kill switch
      status is also reported too. The effective configuration of a virtual
      machine is determined by both kill switch config and per virtual machine
      configuration. If kill switch is on, event collection is effectively
      disabled regardless of what its per virtual machine configuration is; if
      kill switch is off, per virtual machine configuration determines whether
      event collection should be performed for this virtual machine.
    uriParameters:
      vmID:
        displayName: vmID
        description: MOID of the guest vm
        required: true
    get:
      displayName: dataCollectionVMInfoRead
      description: |
        Retrieve per VM configuration for data collection.
      responses:
        200:
          body:
            application/xml:
              example: |
                <perVmConfig>
                  <actions>
                    <action>
                      <type>global_switch</type>
                      <value>disabled</value>
                    </action>
                    <action>
                      <type>per_vm_config</type>
                      <value>enabled</value>
                    </action>
                  </actions>
                </perVmConfig>
/3.0/ai:
  displayName: activityMonitoring
  description: |
    Working with Activity Monitoring
    ======

  /records:
    displayName: userActivity
    description: |
      Working With Aggregated User Activity
      --------------
      Get aggregated user activity (action records) using parameters. Requires
      that NSX Guest Introspection is configured, NSX Manager must be
      registered with Active Directory, and data collection is enabled on one
      or more VMs.
    get:
      displayName: userActivityRead
      description: | 
        ### View Outbound Activity
        
        You can view what applications are being run by a security group or
        desktop pool and then drill down into the report to find out which
        client applications are making outbound connections by a particular
        group of users. You can also discover all user groups and users who are
        accessing a particular application, which can help you determine if you
        need to adjust identity firewall in your environment.
        
        * query=*resource*
        * param=&lt;param-name&gt;:&lt;param-type&gt;:&lt;comma-separated-values&gt;:&lt;operator&gt;, where:
          * &lt;param-name&gt; is one of:
            * *src* (required)
            * *dest* (required)
            * *app*
          * &lt;param-type&gt; is one of:
            * for src: *SECURITY_GROUP*, *DIRECTORY_GROUP*, *DESKTOP_POOL*
            * for dest: *VIRTUAL_MACHINE*
            * for app: *SRC_APP*
          * &lt;comma-separated-values&gt; is a comma-separated numbers (optional). If none specified then no filter is applied.
          * &lt;operator&gt; is one of *INCLUDE*, *EXCLUDE* (default is *INCLUDE*).
        
        **Example:** View user activities to VM ID 1 originating from application
        ID 1  
        `GET /api/3.0/ai/records?query=resource&interval=60m&param=src:DIRECTORY_GROUP`  
        `&param=dest:VIRTUAL_MACHINE:1&param=app:SRC_APP:1`
        
        ### View Inbound Activity
        
        You can view all inbound activity to a server by desktop pool, security
        group, or AD group.
        
        * query=*sam*
        * param=&lt;param-name&gt;:&lt;param-type&gt;:&lt;comma-separated-values&gt;:&lt;operator&gt;, where:
          * &lt;param-name&gt; is one of:
            * *src* (required)
            * *dest* (required)
            * *app*
          * &lt;param-type&gt; is one of:
            * for src: *SECURITY_GROUP*, *DIRECTORY_GROUP*, *DESKTOP_POOL*
            * for dest: *VIRTUAL_MACHINE*
            * for app: *DEST_APP*
          * &lt;comma-separated-values&gt; is a comma-separated numbers (optional). If none specified then no filter is applied.
          * &lt;operator&gt; is one of *INCLUDE*, *EXCLUDE*, *NOT* (default is *INCLUDE*).
        
        **Example:** View user activities to VM ID 1 originating from
        application ID 1  
        `GET /api/3.0/ai/records?query=containers&interval=60m&param=dest:SECURITY_GROUP:1:EXCLUDE`  
        `&param=src:SECURITY_GROUP:1`
        
        ### View Interaction between Inventory Containers
        You can view the traffic passing between defined containers such as AD
        groups, security groups and/or desktop pools. This can help you identify
        and configure access to shared services and to resolve misconfigured
        relationships between Inventory container definitions, desktop pools and
        AD groups.
        
        * query=*containers*
        * param=&lt;param-name&gt;:&lt;param-type&gt;:&lt;comma-separated-values&gt;:&lt;operator&gt;, where:
          * &lt;param-name&gt; is one of:
            * *src* (required)
            * *dest* (required)
          * &lt;param-type&gt; is one of:
            * for src: *SECURITY_GROUP*, *DIRECTORY_GROUP*, *DESKTOP_POOL*
            * for dest: *SECURITY_GROUP*, * *DESKTOP_POOL* 
          * &lt;comma-separated-values&gt; is a comma-separated numbers (optional). If none specified then no filter is applied.
          * &lt;operator&gt; is one of *INCLUDE*, *EXCLUDE*, or *NOT* (default * is *INCLUDE*).
        
        **Example:** View interaction between inventory containers  
        `GET /api/3.0/ai/records?query=containers&interval=60m&param=dest:SECURITY_GROUP:1:EXCLUDE`  
        `&param=src:SECURITY_GROUP:1`
        
        ### View Outbound AD Group Activity
        
        You can view the traffic between members of defined Active Directory
        groups and can use this data to fine tune your firewall rules.
        
        * query=*adg*
        * param=&lt;param-name&gt;:&lt;param-type&gt;:&lt;comma-separated-values&gt;:&lt;operator&gt;, where:
          * &lt;param-name&gt; is one of:
            * *src* (required)
            * *adg*
          * &lt;param-type&gt; is one of:
            * for src: *SECURITY_GROUP*, *DESKTOP_POOL*
            * for adg: *USER*
          * &lt;comma-separated-values&gt; is a comma-separated numbers (optional). If none specified then no filter is applied.
          * &lt;operator&gt; is one of *INCLUDE*, *EXCLUDE* (default * is *INCLUDE*).
        
        **Example:** View outbound AD group activity    
        `GET https://NSX-Manager-IP-Address/api/3.0/ai/records?query=adg&interval=24h&param=adg:USER:1:INCLUDE`  
        `&param=src:SECURITY_GROUP:1:EXCLUDE`
      queryParameters:
        query:
          displayName: query
          description: Name of report (resource,adg,containers,sam,vma).
          default: resource
          required: true
        interval:
          displayName: interval
          description: |
            Relative time to current time (number followed by either m,h,d,s).
          example: 60m
          required: true
        stime:
          displayName: stime
          description:
            Start time for query. **interval** is used if **stime** and
            **etime** are not specified.
          example: 2012-02-28T21:00
          required: false
        etime:
          displayName: etime
          description: |
            End time for query. **interval** is used if **stime** and
            **etime** are not specified.  example: 2012-02-29T21:00
          required: false
        param:
          displayName: param
          description: |
            Parameter to be applied to query
            &lt;param-name&gt;:&lt;param-type&gt;:&lt;comma-separated-values&gt;:&lt;operator&gt;
          example: src:SECURITY_GROUP:1:INCLUDE
        pagesize:
          displayName: pagesize
          description: !include documentation/reuse/pagesize-rec-100-2000
          default: 1024
        startindex:
          displayName: startindex
          description: !include documentation/reuse/startindex
          default: 0
  /userdetails:
    displayName: userDetails
    description: |
      Working with User Details
      ---------
    get:
      displayName: userDetailsRead
      description: |
        ### View Outbound Activity
        You can view what applications are being run by a security group or
        desktop pool and then drill down into the report to find out which
        client applications are making outbound connections by a particular
        group of users. You can also discover all user groups and users who
        are accessing a particular application, which can help you determine
        if you need to adjust identity firewall in your environment.
        
        * query=*resource*
        * param=&lt;param-name&gt;&lt;param-type&gt;&lt;comma-separated-values&gt;&lt;operator&gt;, where:
          * &lt;param-name&gt; is one of:
            * *src* (required)
            * *dest* (required)
            * *app*
          * &lt;param-type&gt; is one of:
            * for src: *SECURITY_GROUP*, *DIRECTORY_GROUP*, *DESKTOP_POOL*
            * for dest: *IP* - a valid IP address in dot notation, xx.xx.xx.xx
            * for app: *SRC_APP*
          * &lt;comma-separated-values&gt; is a comma-separated numbers (optional). If none specified then no filter is applied.
          * &lt;operator&gt; is one of *INCLUDE*, *EXCLUDE* (default is *INCLUDE*).
        
        **Example:** View user activities to VM ID 1 originating from application ID 1  
        `GET /api/3.0/ai/userdetails?query=resource&stime=2012-10-15T00:00:00&etime=2012-10-20T00:00:00`  
        `&param=src:DIRECTORY_GROUP:2&param=app:SRC_APP:16&param=dest:IP:172.16.4.52`
        
        ### View Inbound Activity
        
        You can view all inbound activity to a server by desktop pool, security
        group, or AD group.
        
        * query=*sam*
        * param=&lt;param-name&gt;&lt;param-type&gt;&lt;comma-separated-values&gt;&lt;operator&gt;, where:
          * &lt;param-name&gt; is one of:
            * *src* (required)
            * *dest* (required)
            * *app* (required)
          * &lt;param-type&gt; is one of:
            * for src: *SECURITY_GROUP*, *DIRECTORY_GROUP*, *DESKTOP_POOL*
            * for dest: *VIRTUAL_MACHINE*
            * for app: *DEST_APP*
          * &lt;comma-separated-values&gt; is a comma-separated numbers (optional). If none specified then no filter is applied.
          * &lt;operator&gt; is one of *INCLUDE*, *EXCLUDE*, *NOT* (default is *INCLUDE*).
        
        **Example:** View user activities to VM ID 1 originating from
        application ID 1  
        `GET /api/3.0/userdetails?query=sam&interval=60m&param=app:DEST_APP:1:EXCLUDE`  
        `&param=dest:IP:1:EXCLUDE&param=src:SECURITY_GROUP:1:EXCLUDE`
        
        ### View Interaction between Inventory Containers
        You can view the traffic passing between defined containers such as AD
        groups, security groups and/or desktop pools. This can help you identify
        and configure access to shared services and to resolve misconfigured
        relationships between Inventory container definitions, desktop pools and
        AD groups.
        
        * query=*containers*
        * param=&lt;param-name&gt;&lt;param-type&gt;&lt;comma-separated-values&gt;&lt;operator&gt;, where:
          * &lt;param-name&gt; is one of:
            * *src* (required)
            * *dest* (required)
          * &lt;param-type&gt; is one of:
            * for src: *SECURITY_GROUP*, *DIRECTORY_GROUP*, *DESKTOP_POOL*
            * for dest: *SECURITY_GROUP*, * *DESKTOP_POOL* 
          * &lt;comma-separated-values&gt; is a comma-separated numbers (optional). If none specified then no filter is applied.
          * &lt;operator&gt; is one of *INCLUDE*, *EXCLUDE*, or *NOT* (default * is *INCLUDE*).
        
        **Example:** View interaction between inventory containers  
        `GET /api/3.0/ai/userdetails?query=containers&interval=60m&param=dest:SECURITY_GROUP:1:EXCLUDE`  
        `&param=src:SECURITY_GROUP:1`
        
        ### View Outbound AD Group Activity
        
        You can view the traffic between members of defined Active Directory
        groups and can use this data to fine tune your firewall rules.
        
        * query=*adg*
        * param=&lt;param-name&gt;&lt;param-type&gt;&lt;comma-separated-values&gt;&lt;operator&gt;, where:
          * &lt;param-name&gt; is one of:
            * *src* (required)
            * *adg*
          * &lt;param-type&gt; is one of:
            * for src: *SECURITY_GROUP*, *DESKTOP_POOL*
            * for adg: *USER*
          * &lt;comma-separated-values&gt; is a comma-separated numbers (optional). If none specified then no filter is applied.
          * &lt;operator&gt; is one of *INCLUDE*, *EXCLUDE* (default is *INCLUDE*).
        
        **Example:** View outbound AD group activity    
        `GET /api/3.0/ai/userdetails?query=adg&interval=24h&param=adg:USER:1:INCLUDE`  
        `&param=src:SECURITY_GROUP:1:EXCLUDE`
        
        ### View Virtual Machine Activity Report
        
        * query=*vma*
        * param=&lt;param-name&gt;&lt;param-type&gt;&lt;comma-separated-values&gt;&lt;operator&gt;, where:
          * &lt;param-name&gt; is one of:
            * *src*
            * *dst*
            * *app*
            * If no parameters are passed, then this would show all SAM
            activities
          * &lt;param-type&gt; is one of:
            * for src: *SECURITY_GROUP*, *DESKTOP_POOL*
            * for dst: *VIRTUAL_MACHINE*, *VM_UUID*
            * for app - *SRC_APP* or *DEST_APP*
          * &lt;comma-separated-values&gt; is a comma-separated numbers (optional). If none specified then no filter is applied.
          * &lt;operator&gt; is one of *INCLUDE*, *EXCLUDE* (default is *INCLUDE*).
        
        **Example:** View outbound AD group activity    
        `GET /api/3.0/ai/userdetails?query=vma&interval=60m&param=dest:VIRTUAL_MACHINE:1
        &param=app:DEST_APP:16`
      queryParameters:
        query:
          displayName: query
          description: Name of report (resource,adg,containers,sam,vma)
          required: true
          default: resource
        interval:
          displayName: interval
          description: |
            Relative time to current time (number followed by either m,h,d,s)
          example: 60m
          required: true
        stime:
          displayName: stime
          description: Start time for query
          example: 2012-02-28T21:00
        etime:
          displayName: etime
          description: End time for query
          example: 2012-02-29T21:00
        param:
          displayName: param
          description: |
            Parameter to be applied to query 
            &lt;param-name&gt;:&lt;param-type&gt;:&lt;comma-separated-values&gt;:&lt;operator&gt;
          example: src:SECURITY_GROUP:1:INCLUDE
        pagesize:
          displayName: pagesize
          description: !include documentation/reuse/pagesize-rec-100-2000
          default: 1024
        startindex:
          displayName: startindex
          description: !include documentation/reuse/startindex
          default: 0
  /user/{userID}:
    displayName: specificUserDetails
    description: |
      Working With a Specific User
      ----
    uriParameters:
      userID:
        required: true
        displayName: userID
        description: User ID
    get:
      displayName: specificUserDetailsRead
      description: Retrieve details for a specific user.
  /app:
    displayName: appDetails
    description: |
      Working With Applications
      ----
    get:
      displayName: appDetailsRead
      description: Retrieve app details.
    /{appID}:
      displayName: specificAppDetails
      description: |
        Working with a Specific Application
        ----
      uriParameters:
        appID:
          required: true
          displayName: appID
          description: Specified app ID.
      get:
        displayName: specificAppDetailsRead
        description: Retrieve details for specific app.
  /host:
    displayName: hostDetails
    description: |
      Working With Discovered Hosts
      ----
    get:
      displayName: hostDetailsRead
      description: |
        Retrieve list of all discovered hosts (both by agent introspection and
        LDAP Sync) and their detail.
    /{hostID}:
      displayName: specificHostDetails
      description: |
        Working with a Specific Discovered Host
        ----
      uriParameters:
        hostID:
          displayName: hostID
          description: Specified host ID.
          required: true
      get:
        displayName: specificHostDetailsRead
        description: Get host details.
  /desktoppool:
    displayName: desktopPool
    description: |
      Working With Desktop Pools
      -----
    get:
      displayName: desktopPoolRead
      description: |
        Retrieve list of all discovered desktop pools by agent introspection.
    /{desktoppoolID}:
      displayName: specificDesktopPool
      description: |
        Working with a Specific Desktop Pool
        ----
      uriParameters:
        desktoppoolID:
          displayName: desktoppoolID
          description: Specified desktop pool.
          required: true
      get:
        displayName: specificDesktopPoolRead
        description: Retrieve specific desktop pool details.
  /vm:
    displayName: vmDetails
    description: |
      Working with Virtual Machines
      ----
    get:
      displayName: vmDetailsRead
      description: Retrieve list of all discovered VMs.
    /{vmID}:
      displayName: specificVMDetails
      description: |
        Working with a Specific Virtual Machine
        ----
      uriParameters:
        vmID:
          required: true
          displayName: vmID
          description: VM ID
      get:
        displayName: specificVMDetailsRead
        description: Retrieve details about a specific virtual machine.
  /directorygroup:
    displayName: dirGroup
    description: |
      Working with LDAP Directory Groups
      ----
    get:
      displayName: dirGroupRead
      description: |
        Retrieve list of all discovered (and configured) LDAP directory
        groups.
    /{directorygroupID}:
      displayName: specificDirGroup
      description: |
        Working with a Specific LDAP Directory Group
        ----
      uriParameters:
        directorygroupID:
          displayName: directorygroupID
          description: Specified directory group.
          required: true
      get:
        displayName: specificDirGroupRead
        description: Retrieve details about a specific directory group.
    /user/{userID}:
      displayName: userDirGroup
      description: |
        Working with a Specific User's Active Directory Groups
        -----
      uriParameters:
        userID:
          displayName: userID
          required: true
          description: User ID.
      get:
        displayName: userDirGroupRead
        description: Retrieve Active Directory groups that user belongs to.
  /securitygroup:
    displayName: secgroupDetails
    description: |
      Working with Security Groups
      -----
    get:
      displayName: secgroupDetailsRead
      description: |
        Retrieve list of all observed security groups.
        
        Observed entities are the ones that are reported by the agents. For
        example, if a host activity is reported by an agent and if that host
        belongs to a security group then that security group would reported as
        observed in SAM database.
    /{secgroupID}:
      displayName: specificSecgroupDetails
      description: |
        Working with a Specific Security Group
        ----
      uriParameters:
        secgroupID:
          required: true
          displayName: secgroupID
          description: Specified security group.
      get:
        displayName: specificSecgroupDetailsRead
        description: Retrieve details about specific security group.
/1.0/directory:
  displayName: domain
  description: |
    Working with Domains
    ===========
    After you create a domain, you can apply a security policy to it and run
    queries to view the applications and virtual machines being accessed by
    the users of a domain.

  /updateDomain:
    displayName: domainUpdate
    description: |
      Registering Domains
      ---------------
      You can a register one or more Windows domains with an NSX Manager and
      associated vCenter server.  NSX Manager gets group and user information
      as well as the relationship between them from each domain that it is
      registered with. NSX Manager also retrieves Active Directory
      credentials.  You can apply security policies on an Active Directory
      domain and run queries to get information on virtual machines and
      applications accessed by users within an Active Directory domain.
      
      **Parameter Values for Registering or Updating a Domain**
      
      Parameter Name | Description | Mandatory? 
      ----------------|-------------|------------
      ID |  Domain id.  If you want to create a new domain, do not provide this value.  Otherwise, the system will find an existing domain object by this ID and update it. | true if update existing domain 
      name |  Domain name.  This should be domain's full qualified name. In case agent discovered, this will be NetBIOS name, so you need to update it to FQN in order to support LDAP sync and event log reader. | true if creating a new domain. 
      description | Domain description | false 
      type | Domain type. Valid value include: AGENT_DISCOVERED, ActiveDirectory, SPECIAL (Do NOT modify SPECIAL domain). For LDAP sync and event log reader work, this need to be set to ActiveDirectory. | true if creating a new domain 
      netbiosName |  NetBIOS name of domain. This is Domain's NetBIOS name. Check windows domain setting, for value of it. Normally Agent report domain name is NetBIOS name. But confirm from Windows domain setting. | false 
      baseDn | Domain's Base DN (for LDAP sync).  Base DN is REQUIRED for LDAP Sync. If you have a domain like: w2k3.vshield.vmware.com, the base DN is very likely to be: DC=w2k3,DC=vshield,DC=vmware,DC=com. Another example is: domain name is: vs4.net, the base DN should be: DC=vs4,DC=net. You can use a LDAP client and connect to domain controller to find the domain's base DN. |  false 
      rootDn | LDAP Sync root DN.  Specify where should LDAP sync start from LDAP tree. This could be absolute path, for example: OU=Engineer,DC=vs4,DC=net, or relative path (relate to Base DN), for example: OU=Engineer. |  false
      securityId | Domain's Security ID (SID). This should be filled by LDAP sync process, and should not need to be modified. |  false 
      username |  Domain's User name (Used for LDAP Sync and/or Event Log reader) | false 
      password | User password | false
      eventLogUsername | Domain's event log reader username (will use above username if this is NULL) | false
      eventLogPassword | Domain's event log reader password | false
    post:
      displayName: domainCreate
      description: Register or update a domain with NSX Manager
      body:
        application/xml:
          example: |
            <DirectoryDomain>
              <name>example.com</name>
              <netbiosName>Example</netbiosName>
              <username>Administrator</username>
              <password>xxx</password>
            </DirectoryDomain>
          schema: domainCreate
  /listDomains:
    displayName: domainList
    description: |
      Retrieve LDAP Domains
      -----
    get:
      displayName: domainListRead
      description: Retrieve all agent discovered (or configured) LDAP domains.
      responses:
        200:
          body:
            application/xml:
              example: |
                <DirectoryDomains>
                  <DirectoryDomain>
                    <id>2</id>
                    <name>vs4.net</name>
                    <type>ActiveDirectory</type>
                    <netbiosName>VS4</netbiosName>
                    <username>Administrator</username>
                    <baseDn>DC=vs4,DC=net</baseDn>
                  </DirectoryDomain>
                </DirectoryDomains>
  /deleteDomain/{ID}:
    displayName: domainDelete
    description: |
      Delete a Specific Domain
      ----
    uriParameters:
      ID:
        required: true
        displayName: ID
        description: Domain ID.
    delete:
      displayName: domainDeleteDelete # dupfix domainDelete
      description: Delete domain.
  /updateLdapServer:
    displayName: ldapServerCreate
    description: |
      Create LDAP Server
      ------------
    post:
      displayName: ldapServerCreateCreate # dupfix ldapServerCreate
      description: Create LDAP server.
      body:
        application/xml:
          example: |
            <LDAPServer>
              <domainId>4</domainId>
              <hostName>10.142.72.70</hostName>
              <enabled>true</enabled>
            </LDAPServer>
          schema: ldapServerCreate
  /listLdapServersForDomain/{domainID}:
    displayName: ldapServerDomain
    description: |
      Query LDAP Servers for a Domain
      ----
    uriParameters:
      domainID:
        displayName: domainID
        description: Specified domain.
        required: true
    get:
      displayName: ldapServerDomainRead
      description: Query LDAP servers for a domain.
  /fullSync/{domainID}:
    displayName: ldapServerSync
    description: |
      Start LDAP Full Sync
      ----
    uriParameters:
      domainID:
        displayName: domainID
        description: Specified domain.
        required: true
    put:
      displayName: ldapServerSyncExecute # dupfix ldapServerSync
      description: Start LDAP full sync.
  /deltaSync/{domainID}:
    displayName: ldapServerDeltaSync
    description: |
      Start LDAP Delta Sync
      -----
    uriParameters:
      domainID:
        displayName: domainID
        description: Specified domain.
        required: true
    put:
      displayName: ldapServerDeltaSyncExecute # dupfix ldapServerDeltaSync
      description: Start LDAP delta sync.
  /deleteLdapServer/{serverID}:
    displayName: ldapServerDelete
    description: |
      Delete LDAP Server
      ----
    uriParameters:
      serverID:
        required: true
        displayName: serverID
        description: Specified LDAP server.
    delete:
      displayName: ldapServerDeleteDelete # dupfix ldapServerDelete
      description: Delete LDAP server.
  /updateEventLogServer:
    displayName: eLogServerCreate # revert existing dupfix eLogServer eLogServerCreate
    description: |
      EventLog Server
      ------
    post:
      displayName: eLogServerCreateCreate # dupfix eLogServerCreate
      description: Create EventLog server.
      body:
        application/xml:
          example: |
            <EventlogServer>
              <id>1</id>
              <domainId>4</domainId>
              <hostName>10.142.72.70</hostName>
              <enabled>false</enabled>
            </EventlogServer>
          schema: eLogServerCreate
  /listEventLogServersForDomain/{domainID}:
    displayName: eLogServerDomainRead
    description: |
      Working with EventLog Servers for a Domain
      ----
    uriParameters:
      domainID:
        required: true
        displayName: domainID
        description: Specified domain.
    get:
      displayName: eLogServerDomainReadRead # dupfix eLogServerDomainRead
      description: Query EventLog servers for a domain.
  /deleteEventLogServer/{serverID}:
    displayName: eLogServerDelete
    description: |
      Delete EventLog Server
      -----
    uriParameters:
      serverID:
        required: true
        displayName: serverID
        description: Specified EventLog server ID.
    delete:
      displayName: eLogServerDeleteDelete # dupfix eLogServerDelete
      description: Delete EventLog server.
/1.0/identity:
  displayName: mappingLists
  description: |
    Working with Mapping Lists
    =========

  /userIpMapping:
    displayName: userIpMapping
    description: |
      Working With User to IP Mappings
      ---
    get:
      displayName: userIpMappingRead
      description: Query user-to-ip mapping list from database.
  /hostIpMapping:
    displayName: hostIpMapping
    description: |
      Working With Host to IP Mappings
      ---
    get:
      displayName: hostIpMappingRead
      description: Query host-to-ip mapping list from database.
  /ipToUserMapping:
    displayName: ipToUserMapping
    description: |
      Working With IP to User Mappings
      ----
    get:
      displayName: ipToUserMappingRead
      description: |
        Retrieve set of users associated with a given set of IP addresses during
        a specified time period. Since more than one user can be associated
        with a single IP address during the specified time period, each IP
        address can be associated with zero or more (i.e a SET of) users.
  /directoryGroupsForUser:
    displayName: userDirGroups
    description: |
      Working With User Domain Groups
      ----
    get:
      displayName: userDirGroupsRead
      description: |
        Query set of Windows Domain Groups (AD Groups) to which the specified
        user belongs.
  /staticUserMapping/{userID}/{IP}:
    displayName: staticUserMapping
    description: |
      Working with a Specific Static User Mapping
      ----
    uriParameters:
      userID:
        required: true
        displayName: userID
        description: User ID
      IP:
        required: true
        displayName: IP
        description: IP address
    post:
      displayName: staticUserMappingCreate
      description: Create static user IP mapping.
  /staticUserMappings:
    displayName: staticUserMappings
    description: |
      Working with Static User Mappings
      ----
    get:
      displayName: staticUserMappingsRead
      description: Query static user IP mapping list.
  /staticUserMappingsbyUser/{userID}:
    displayName: staticUserMappingsbyUser
    description: |
      Working with Static User IP Mappings for a Specific User
      ----
    uriParameters:
      userID:
        required: true
        displayName: userID
        description: User ID
    get:
      displayName: staticUserMappingsbyUserRead
      description: Query static user IP mapping for specified user.
    delete:
      displayName: staticUserMappingsbyUserDelete
      description: Delete static user IP mapping for specified user.
  /staticUserMappingsbyIP/{IP}:
    displayName: staticUserMappingsbyIP
    description: |
      Working With Static User IP Mappings for a Specific IP
      ----
    uriParameters:
      IP:
        required: true
        displayName: IP
        description: IP address
    get:
      displayName: staticUserMappingsbyIPRead
      description: Query static user IP mapping for specified IP.
    delete:
      displayName: staticUserMappingsbyIPDelete
      description: Delete static user IP mapping for specified IP.
/1.0/sam/syslog:
  displayName: activityMonitoringSyslog
  description: |
    Working with Activity Monitoring Syslog Support
    ==========

  /enable:
    displayName: syslogEnable
    description: |
      Enable Syslog Support
      ----
    post:
      displayName: syslogEnableSet # dupfix syslogEnable
      description: Enable syslog support.
  /disable:
    displayName: syslogDisable
    description: |
      Disable Syslog Support
      ----
    post:
      displayName: syslogDisableSet # dupfix syslogDisable
      description: Disable syslog support.
/2.0/si:
  displayName: solutionIntegration
  description: |
    Working with Solution Integrations
    =========

  /host/{hostID}/agents:
    displayName: hostAgents
    description: |
      Working With Agents on a Specific Host
      ----
    uriParameters:
      hostID:
        required: true
        displayName: hostID
        description: Specified host
    get:
      displayName: hostAgentsRead
      description: |
        Retrieves all agents on the specified host. The response body contains
        agent IDs for each agent, which you can use to retrieve details about
        that agent.
      responses:
        200:
          body:
            application/xml:
              example: |
                <fabricAgents>
                  <agent>
                    <agentId>nsxmgragent-1</agentId>
                    <agentName>agent name</agentName>
                    <serviceId>service-6</serviceId>
                    <serviceName>EndpointService</serviceName>
                    <operationalStatus>ENABLED</operationalStatus>
                    <progressStatus>IN_PROGRESS</progressStatus>
                    <vmId>vm-92</vmId>
                    <host>host-10</host>
                    <allocatedIpAddress>
                      <id>2</id>
                      <ipAddress>10.112.5.182</ipAddress>
                      <gateway>10.112.5.253</gateway>
                      <prefixLength>23</prefixLength>
                      <dnsServer1>10.112.0.1</dnsServer1>
                      <dnsServer2>10.112.0.2</dnsServer2>
                      <dnsSuffix />
                      <subnetId>subnet-1</subnetId>
                    </allocatedIpAddress>
                    <serviceStatus>
                      <status>WARNING</status>
                      <errorId>partner_error</errorId>
                      <errorDescription>partner_error</errorDescription>
                    </serviceStatus>
                    <hostInfo>
                      <objectId>host-10</objectId>
                      <objectTypeName>HostSystem</objectTypeName>
                      <nsxmgrUuid>420369CD-2311-F1F7-D4AA-1158EA688E54</nsxmgrUuid>
                      <revision>1</revision>
                      <type>
                        <typeName>HostSystem</typeName>
                      </type>
                      <name>10.112.5.173</name>
                      <scope>
                        <id>domain-c7</id>
                        <objectTypeName>ClusterComputeResource</objectTypeName>
                        <name>Kaustubh-CL</name>
                      </scope>
                      <clientHandle></clientHandle>
                       <extendedAttributes></extendedAttributes>
                    </hostInfo>
                    <initialData>partner data if present</initialData>
                  </agent>
                </fabricAgents>
  /agent/{agentID}:
    displayName: agentInformation
    description: |
      Working with a Specific Agent
      ----
    uriParameters:
      agentID:
        required: true
        displayName: agentID
        description: Specified agent
    get:
      displayName: agentInformationRead
      description: |
        Retrieve agent (host components and appliances) details.
      responses:
        200:
          body:
            application/xml:
              example: |
                <agent>
                  <agentId>nsxmgragent-1</agentId>
                  <agentName>agent name</agentName>
                  <serviceId>service-6</serviceId>
                  <serviceName>EndpointService</serviceName>
                  <operationalStatus>ENABLED</operationalStatus>
                  <progressStatus>IN_PROGRESS</progressStatus>
                  <vmId>vm-92</vmId>
                  <host>host-10</host>
                  <allocatedIpAddress>
                    <id>2</id>
                    <ipAddress>10.112.5.182</ipAddress>
                    <gateway>10.112.5.253</gateway>
                    <prefixLength>23</prefixLength>
                    <dnsServer1>10.112.0.1</dnsServer1>
                    <dnsServer2>10.112.0.2</dnsServer2>
                    <dnsSuffix></dnsSuffix>
                    <subnetId>subnet-1</subnetId>
                  </allocatedIpAddress>
                  <serviceStatus>
                    <status>WARNING</status>
                    <errorId>partner_error</errorId>
                    <errorDescription>partner_error</errorDescription>
                  </serviceStatus>
                  <hostInfo>
                    <objectId>host-10</objectId>
                    <objectTypeName>HostSystem</objectTypeName>
                    <nsxmgrUuid>420369CD-2311-F1F7-D4AA-1158EA688E54</nsxmgrUuid>
                    <revision>1</revision>
                    <type>
                      <typeName>HostSystem</typeName>
                    </type>
                    <name>10.112.5.173</name>
                    <scope>
                      <id>domain-c7</id>
                      <objectTypeName>ClusterComputeResource</objectTypeName>
                      <name>Kaustubh-CL</name>
                    </scope>
                    <clientHandle></clientHandle>
                     <extendedAttributes></extendedAttributes>
                  </hostInfo>
                  <initialData>partner data if present</initialData>
                </agent>
  /deployment/{deploymentunitID}/agents:
    displayName: deploymentAgents
    description: |
      Working with Agents on a Specific Deployment
      ----
    uriParameters:
      deploymentunitID:
        required: true
        displayName: deploymentunitID
        description: Specified deployment.
    get:
      displayName: deploymentAgentsRead
      description: Retrieve all agents for the specified deployment.
      responses:
        200:
          body:
            application/xml:
              example: |
                <fabricAgents>
                  <agent>
                    <agentId>nsxmgragent-1</agentId>
                    <agentName>agent name</agentName>
                    <serviceId>service-6</serviceId>
                    <serviceName>EndpointService</serviceName>
                    <operationalStatus>ENABLED</operationalStatus>
                    <progressStatus>IN_PROGRESS</progressStatus>
                    <vmId>vm-92</vmId>
                    <host>host-10</host>
                    <allocatedIpAddress>
                      <id>2</id>
                      <ipAddress>10.112.5.182</ipAddress>
                      <gateway>10.112.5.253</gateway>
                      <prefixLength>23</prefixLength>
                      <dnsServer1>10.112.0.1</dnsServer1>
                      <dnsServer2>10.112.0.2</dnsServer2>
                      <dnsSuffix></dnsSuffix>
                      <subnetId>subnet-1</subnetId>
                    </allocatedIpAddress>
                    <serviceStatus>
                      <status>WARNING</status>
                      <errorId>partner_error</errorId>
                      <errorDescription>partner_error</errorDescription>
                    </serviceStatus>
                    <hostInfo>
                      <objectId>host-10</objectId>
                      <objectTypeName>HostSystem</objectTypeName>
                      <nsxmgrUuid>420369CD-2311-F1F7-D4AA-1158EA688E54</nsxmgrUuid>
                      <revision>1</revision>
                      <type>
                        <typeName>HostSystem</typeName>
                      </type>
                      <name>10.112.5.173</name>
                      <scope>
                        <id>domain-c7</id>
                        <objectTypeName>ClusterComputeResource</objectTypeName>
                        <name>Kaustubh-CL</name>
                      </scope>
                      <clientHandle></clientHandle>
                      <extendedAttributes></extendedAttributes>
                    </hostInfo>
                    <initialData>partner data</initialData>
                  </agent>
                </fabricAgents>
  /fabric/sync/conflicts:
    displayName: agentConflicts
    description: |
      Working With Conflicting Agencies
      ----
      When the NSX Manager database backup is restored to an older point in
      time, it is possible that deployment units for some EAM Agencies are
      missing. These methods help the administrator identify such EAM Agencies
      and take appropriate action.
    get:
      displayName: agentConflictsRead
      description: |
        Retrieve conflicting deployment units and EAM agencies, if any, and the
        allowed operations on them.
      responses:
        200:
          body:
            application/xml:
              example: |
                <fabricSyncConflictInfo>
                  <conflictExist>true</conflictExist>
                  <agencies>
                    <agenciesInfo>
                      <agencyConflictInfo>
                        <agencyId>agency-150</agencyId>
                        <agencyName>_VCNS_264_nasingh-cluster1_VMware Endpoint</agencyName>
                      </agencyConflictInfo>
                    </agenciesInfo>
                    <allowedOperations>
                      <conflictResolverOperation>DELETE</conflictResolverOperation>
                      <conflictResolverOperation>RESTORE</conflictResolverOperation>
                    </allowedOperations>
                  </agencies>
                </fabricSyncConflictInfo>
    put:
      displayName: agentConflictsUpdate
      description: |
        Create deployment units for conflicting EAM Agencies, delete
        conflicting EAM agencies, or delete deployment units for conflicting
        EAM agencies.
        
        ### Create deployment units for conflicting EAM agencies
        
        ```
        <conflictResolverInfo>
          <agencyAction>RESTORE</agencyAction>
        </conflictResolverInfo>
        ```
        
        ### Delete conflicting EAM agencies
        
        ```
        <conflictResolverInfo>
          <agencyAction>DELETE</agencyAction>
        </conflictResolverInfo>
        ```
        
        ### Delete deployment units for conflicting EAM agencies
        
        ```
        <conflictResolverInfo>
          <deploymentUnitAction>DELETE</deploymentUnitAction>
        </conflictResolverInfo>
        ```
      body:
        application/xml:
          example: |
            <conflictResolverInfo>
              <agencyAction></agencyAction>
            </conflictResolverInfo>
/2.0/services/macset:
  displayName: macsets
  description: |
    Working with MAC Address Set Grouping Objects
    =============
    You can create a MAC address set on the specified scope. On success, the API
    returns a string identifier for the new MAC address set.

  /{macsetId}:
    displayName: macset
    description: |
      Working With a Specific MAC Address Set
      ---------
    uriParameters:
      macsetId:
        required: true
        displayName: macsetId
        description: |
          Specified MAC address set ID (can be retrieved by listing the MAC
          address set on a scope).
    get:
      displayName: macsetRead
      description: Retrieve details about a MAC address set.
      responses:
        200:
          body:
            application/xml:
              example: |
                <macset>
                  <objectId>macset-1</objectId>
                  <objectTypeName>MACSet</objectTypeName>
                  <vsmUuid>4226CACF-0558-AFF3-5D92-279B201C40E2</vsmUuid>
                  <nodeId>72eee9ab-bb75-49ba-a782-d7dffedd180a</nodeId>
                  <revision>4</revision>
                  <type>
                  <typeName>MACSet</typeName>
                  </type>
                  <name>system-generated-broadcast-macset</name>
                  <scope>
                    <id>globalroot-0</id>
                    <objectTypeName>GlobalRoot</objectTypeName>
                    <name>Global</name>
                  </scope>
                  <clientHandle></clientHandle>
                  <extendedAttributes>
                    <extendedAttribute>
                      <name>isReadOnly</name>
                      <value>true</value>
                    </extendedAttribute>
                    <extendedAttribute>
                      <name>isHidden</name>
                      <value>true</value>
                    </extendedAttribute>
                    <extendedAttribute>
                      <name>facadeHidden</name>
                      <value>true</value>
                    </extendedAttribute>
                  </extendedAttributes>
                  <isUniversal>false</isUniversal>
                  <universalRevision>0</universalRevision>
                  <inheritanceAllowed>false</inheritanceAllowed>
                  <value>FF:FF:FF:FF:FF:FF</value>
                </macset>
    put:
      displayName: macsetUpdate
      description: Modify an existing MAC address set.
      body:
        application/xml:
          example: |
            <macset>
              <objectId></objectId>
              <type>
                <typeName></typeName>
              </type>
              <description></description>
              <name></name>
              <revision></revision>
              <objectTypeName></objectTypeName>
              <value></value>
            </macset>
          schema: macSetCreateUpdate
    delete:
      displayName: macsetDelete
      description: Delete a MAC address set.
      queryParameters:
        force:
          required: false
          displayName: force
          description: |
            Indicates forced or unforced delete. With forced delete, the object
            is deleted even if used in other places such as firewall rules,
            causing invalid referrals. For unforced delete, the object is deleted
            only if it is no used by other configurations; otherwise the delete
            fails.
          type: boolean
  /scope/{scopeId}:
    displayName: macsetScopes
    description: |
      Working with MAC Address Sets on a Specific Scope
      ----
    uriParameters:
      scopeId:
        required: true
        displayName: scopeId
        description: |
          Can be "globalroot-0", "universalroot-0" or datacenterId in upgrade
          use cases. Universal MAC address sets are read-only from secondary
          managers.
    post:
      displayName: macsetScopesCreate
      description: Create a MAC address set on the specified scope.
      body:
        application/xml:
          example: |
            <macset>
              <objectId></objectId>
              <type>
                <typeName></typeName>
              </type>
              <description></description>
              <name></name>
              <revision></revision>
              <objectTypeName></objectTypeName>
              <value></value>
            </macset>
          schema: macSetCreateUpdate
    get:
      displayName: macsetScopesRead
      description: List MAC address sets on the specified scope.
      responses:
        200:
          body:
            application/xml:
              example: |
                <list>
                  <macset>
                    <objectId>macset-1</objectId>
                    <objectTypeName>MACSet</objectTypeName>
                    <vsmUuid>4226CACF-0558-AFF3-5D92-279B201C40E2</vsmUuid>
                    <nodeId>72eee9ab-bb75-49ba-a782-d7dffedd180a</nodeId>
                    <revision>4</revision>
                    <type>
                      <typeName>MACSet</typeName>
                    </type>
                    <name>system-generated-broadcast-macset</name>
                    <scope>
                      <id>globalroot-0</id>
                      <objectTypeName>GlobalRoot</objectTypeName>
                      <name>Global</name>
                    </scope>
                    <clientHandle></clientHandle>
                    <extendedAttributes>
                      <extendedAttribute>
                        <name>isReadOnly</name>
                        <value>true</value>
                      </extendedAttribute>
                      <extendedAttribute>
                        <name>isHidden</name>
                        <value>true</value>
                      </extendedAttribute>
                      <extendedAttribute>
                        <name>facadeHidden</name>
                        <value>true</value>
                      </extendedAttribute>
                    </extendedAttributes>
                    <isUniversal>false</isUniversal>
                    <universalRevision>0</universalRevision>
                    <inheritanceAllowed>false</inheritanceAllowed>
                    <value>FF:FF:FF:FF:FF:FF</value>
                  </macset>
                </list>
/2.0/services/alarms/{sourceId}:
  displayName: servicesAlarmsSource
  description: |
    Working with Alarms from a Specific Source
    =====

    Some system alerts will show up as alarms in the NSX dashboard. You can
    view and resolve alarms from a specific source.
  uriParameters:
    sourceId:
      displayName: sourceId
      description: |
        ID of the object for which you want to manage alarms. *sourceId*
        can be the ID of a cluster, host, resource pool, security group, or
        edge.
  get:
    displayName: servicesAlarmsSourceList
    description: |
      Retrive all alarms from the specified source.
  post:
    displayName: servicesAlarmsSourceUpdate
    description: |
      Resolve all alarms for the specified source.

      Alarms will resolve automatically when the cause of the alarm is
      resolved.  For example, if an NSX Edge appliance is powered off, this
      will trigger an alarm. If you power the NSX Edge appliance back on, the
      alarm will resolve. If however, you delete the NSX Edge appliance, the
      alarm will persist, because the alarm cause was never resolved. In this
      case, you may want to manually resolve the alarm. Resolving the alarms
      will clear them from the NSX dashboard.

      Use `GET /api/2.0/services/alarms/{sourceId}` to retrieve the list of
      alarms for the source. Use this response as the request body for the
      `POST` call.
    queryParameters:
      action:
        displayName: action
        description: | 
          Use *action=resolve* to resolve system alarms.
    body:
      application/xml:
        example: |
          <systemAlarms>
              <systemAlarm>
                  <eventId>79965</eventId>
                  <timestamp>1485556529744</timestamp>
                  <severity>High</severity>
                  <eventSource>edge-3</eventSource>
                  <eventCode>130027</eventCode>
                  <message>NSX Edge VM (vmId : vm-430) is powered off. Please use vsphere client to power on Edge VM</message>
                  <module>NSX Edge Communication Agent</module>
                  <objectId>edge-3</objectId>
                  <reporterName>vShield Manager</reporterName>
                  <reporterType>4</reporterType>
                  <sourceType>4</sourceType>
                  <isResourceUniversal>false</isResourceUniversal>
                  <eventMetadata>
                      <data>
                          <key>edgeVmVcUUId</key>
                          <value>502e05c2-380f-998c-35ec-1f48991fe7e0</value>
                      </data>
                  </eventMetadata>
                  <resolutionAttempted>false</resolutionAttempted>
                  <resolvable>true</resolvable>
                  <alarmId>79965</alarmId>
                  <alarmCode>130027</alarmCode>
                  <alarmSource>edge-3</alarmSource>
                  <target>
                      <objectId>vm-430</objectId>
                      <objectTypeName>VirtualMachine</objectTypeName>
                      <vsmUuid>423A993F-BEE6-1285-58F1-54E48D508D90</vsmUuid>
                      <nodeId>916287b3-761d-430b-8ab2-83878dfe3e7f</nodeId>
                      <revision>18</revision>
                      <type>
                          <typeName>VirtualMachine</typeName>
                      </type>
                      <name>Perimeter-Gateway-01-0</name>
                      <scope>
                          <id>domain-c41</id>
                          <objectTypeName>ClusterComputeResource</objectTypeName>
                          <name>Management &amp; Edge Cluster</name>
                      </scope>
                      <clientHandle></clientHandle>
                      <extendedAttributes/>
                      <isUniversal>false</isUniversal>
                      <universalRevision>0</universalRevision>
                  </target>
                  <alarmBeingResolved>false</alarmBeingResolved>
                  <alarmMetadata>
                      <data>
                          <key>edgeVmVcUUId</key>
                          <value>502e05c2-380f-998c-35ec-1f48991fe7e0</value>
                      </data>
                  </alarmMetadata>
              </systemAlarm>
              <systemAlarm>
                  <eventId>79967</eventId>
                  <timestamp>1485556529774</timestamp>
                  <severity>High</severity>
                  <eventSource>edge-3</eventSource>
                  <eventCode>130033</eventCode>
                  <message>NSX Edge VM (vmId : vm-430) is not responding to NSX manager health check. Please check NSX manager logs for details.</message>
                  <module>NSX Edge Health Check</module>
                  <objectId>edge-3</objectId>
                  <reporterName>vShield Manager</reporterName>
                  <reporterType>4</reporterType>
                  <sourceType>4</sourceType>
                  <isResourceUniversal>false</isResourceUniversal>
                  <eventMetadata>
                      <data>
                          <key>edgeVmVcUUId</key>
                          <value>502e05c2-380f-998c-35ec-1f48991fe7e0</value>
                      </data>
                      <data>
                          <key>edgeId</key>
                          <value>edge-3</value>
                      </data>
                      <data>
                          <key>edgeVmName</key>
                          <value>Perimeter-Gateway-01-0</value>
                      </data>
                      <data>
                          <key>edgeVmId</key>
                          <value>vm-430</value>
                      </data>
                  </eventMetadata>
                  <resolutionAttempted>false</resolutionAttempted>
                  <resolvable>true</resolvable>
                  <alarmId>79967</alarmId>
                  <alarmCode>130033</alarmCode>
                  <alarmSource>edge-3</alarmSource>
                  <target>
                      <objectId>vm-430</objectId>
                      <objectTypeName>VirtualMachine</objectTypeName>
                      <vsmUuid>423A993F-BEE6-1285-58F1-54E48D508D90</vsmUuid>
                      <nodeId>916287b3-761d-430b-8ab2-83878dfe3e7f</nodeId>
                      <revision>18</revision>
                      <type>
                          <typeName>VirtualMachine</typeName>
                      </type>
                      <name>Perimeter-Gateway-01-0</name>
                      <scope>
                          <id>domain-c41</id>
                          <objectTypeName>ClusterComputeResource</objectTypeName>
                          <name>Management &amp; Edge Cluster</name>
                      </scope>
                      <clientHandle></clientHandle>
                      <extendedAttributes/>
                      <isUniversal>false</isUniversal>
                      <universalRevision>0</universalRevision>
                  </target>
                  <alarmBeingResolved>false</alarmBeingResolved>
                  <alarmMetadata>
                      <data>
                          <key>edgeVmVcUUId</key>
                          <value>502e05c2-380f-998c-35ec-1f48991fe7e0</value>
                      </data>
                      <data>
                          <key>edgeId</key>
                          <value>edge-3</value>
                      </data>
                      <data>
                          <key>edgeVmName</key>
                          <value>Perimeter-Gateway-01-0</value>
                      </data>
                      <data>
                          <key>edgeVmId</key>
                          <value>vm-430</value>
                      </data>
                  </alarmMetadata>
              </systemAlarm>
          </systemAlarms>
/2.0/services/systemalarms/{alarmId}:
  displayName: servicesSystemAlarmsId
  description: |
    Working with a Specific Alarm
    -------
    Some system alerts will show up as alarms in the NSX dashboard. You can
    view and resolve alarms by alarm ID.
  uriParameters:
    alarmId:
      displayName: alarmId
      description: |
        The alarm ID you want to manage. Find the alarm ID using the
        `GET /api/2.0/services/alarms/{source-Id}` method.
  get:
    displayName: servicesSystemAlarmsIdRead
    description: |
      Retrieve information about the specified alarm.

      **Method history:**

      Release | Modification
      --------|-------------
      6.3.0 | Method introduced.
    responses:
      200:
        body:
          application/xml:
            example: |
              <systemAlarm>
                <eventId>262</eventId>
                <timestamp>1479121141922</timestamp>
                <severity>High</severity>
                <eventSource>Policy</eventSource>
                <eventCode>300006</eventCode>
                <message>Service Composer is out of sync due to failure on sync on reboot operation</message>
                <module>Policy</module>
                <objectId>servicecomposer</objectId>
                <reporterName>NSX Manager</reporterName>
                <reporterType>1</reporterType>
                <sourceType>1</sourceType>
                <displayName>Service Composer</displayName>
                <isResourceUniversal>false</isResourceUniversal>
                <eventMetadata/>
                <resolutionAttempted>true</resolutionAttempted>
                <resolvable>true</resolvable>
                <alarmId>262</alarmId>
                <alarmCode>300006</alarmCode>
                <alarmSource>Policy</alarmSource>
                <alarmBeingResolved>false</alarmBeingResolved>
                <alarmMetadata/>
              </systemAlarm>
  post:
    displayName: servicesSystemAlarmsIdAction
    description: | 
      Resolve the specified alarm.

      Alarms will resolve automatically when the cause of the alarm is
      resolved.  For example, if an NSX Edge appliance is powered off, this
      will trigger an alarm. If you power the NSX Edge appliance back on, the
      alarm will resolve. If however, you delete the NSX Edge appliance, the
      alarm will persist, because the alarm cause was never resolved. In this
      case, you may want to manually resolve the alarm. Resolving the alarm 
      will clear it from the NSX dashboard.

      **Method history:**

      Release | Modification
      --------|-------------
      6.3.0 | Method introduced.
    queryParameters:
      action:
        displayName: action
        description: |
          Use *action=resolve* to resolve the specified alarm.
/2.0/services/taskservice/job:
  displayName: taskFramework
  description: |
    Working with the Task Framework
    ======
    Working with filtering criteria and paging information for jobs on the task
    framework.
  get:
    displayName: taskFrameworkCriteria
    description: Query job instances by criterion.
    queryParameters:
      startIndex:
        displayName: startIndex
        description: !include documentation/reuse/startindex
        default: 0
        required: false
        type: integer
      pageSize:
        displayName: pageSize
        description: !include documentation/reuse/pagesize
        default: 10
        required: false
        type: integer
      sortBy:
        displayName: sortBy
        description: Always sorted by "startTime"
        required: false
      sortOrderAscending:
        displayName: sortOrderAscending
        description: Sort in ascending order of start time (true/false)
        required: false
        type: boolean
  /{jobId}:
    displayName: taskFrameworkJobs
    description: |
      Working With a Specific Job Instance
      ------
    uriParameters:
      jobId:
        required: true
        displayName: jobId
        description: Specified job ID.
    get:
      displayName: taskFrameworkJobsRead
      description: Retrieve all job instances for the specified job ID.
/2.0/endpointsecurity:
  displayName: guestIntrospection
  description: |
    Working with Guest Introspection and Third-party Endpoint Protection (Anti-virus) Solutions
    ============
    
    About Guest Introspection and Endpoint Protection Solutions
    ----------
    VMware's Guest Introspection Service enables vendors to deliver an
    introspection-based, endpoint protection (anti-virus) solution that uses
    the hypervisor to scan guest virtual machines from the outside, with only
    a thin agent on each guest virtual machine.
    
    Version Compatibility
    -----------
    
    **Note:** The management APIs listed in this section are to be used only
    with partner endpoint protection solutions that were developed with EPSec
    Partner Program 3.0 or earlier (for vShield 5.5 or earlier).  These
    partner solutions are also supported on NSX 6.0 and need the APIs listed
    below.  These APIs should not be used with partner solutions developed
    specifically for NSX 6.0 or later, as these newer solutions automate the
    registration and deployment process by using the new features introduced
    in NSX.  Using these with newer NSX 6.0 based solutions could result in
    loss of features.
    
    Register a Solution
    ----------
    
    To register a third-party solution with Guest Introspection, clients can
    use four REST calls to do the following:
    1. Register the vendor.
    2. Register one or more solutions.
    3. Set the solution IP address and port (for all hosts).
    4. Activate registered solutions per host.
    
    **Note:** Steps 1 through 3 need to be performed once per solution. Step 4
    needs to be performed for each host.
    
    Unregister a Solution
    ----------
    
    To unregister a solution, clients perform these steps in reverse:
    1. Deactivate solutions per host.
    2. Unset a solution’s IP address and port.
    3. Unregister solutions.
    4. Unregister the vendor.
    
    Updating Registration Information
    -----------
    
    To update registration information for a vendor or solution, clients must:
    1. Unregister the vendor or solution.
    2. Reregister the vendor or solution.

  /registration:
    displayName: guestIntrospectionRegistration # existing change vShield
    description: |
      Register a Vendor and Solution with Guest Introspection
      ---
    post:
      displayName: guestIntrospectionVendorCreate # existing change vShieldVendorCreate
      description: |
        Register the vendor of an endpoint protection solution. Specify the
        following parameters in the request.
        
        | Name            | Comments |
        |-----------------|------------|
        |**vendorId**     | VMware-assigned ID for the vendor. |
        |**vendorTitle**  | Vendor-specified title. |
        |**vendorDescription** | Vendor-specified description. |
      body:
        application/xml:
          example: |
            <VendorInfo>
              <id>vendorId</id>
              <title>vendorTitle</title>
              <description>vendorDescription</description>
            </VendorInfo>
          schema: vShieldVendorCreate
    /vendors:
      displayName: guestIntrospectionVendorsInfo # existing change
      description: |
        Working With Registered Guest Introspection Vendors
        ----
      get:
        displayName: guestIntrospectionVendorsInfoList # update for consistency vShieldVendorsInfoList
        description: Retrieve the list of all registered Guest Introspection vendors.
    /{vendorID}:
      displayName: guestIntrospectionSolution # existing change
      description: |
        Working With Guest Introspection Vendors and Endpoint Protection Solutions
        -----
      uriParameters:
        vendorID:
          displayName: vendorID
          description: VMware-assigned ID for the vendor.
          required: true
      post:
        displayName: guestIntrospectionSolutionCreate # existing change
        description: |
          Register an endpoint protection solution. Specify the following parameters in the request.
          
          | Name            | Comments |
          |-----------------|------------|
          |**solutionAltitude**     | VMware-assigned altitude for the solution. *Altitude* is a number that VMware assigns to uniquely identify the solution. The altitude describes the type of solution and the order in which the solution receives events relative to other solutions on the same host. |
          |**solutionTitle**  | Vendor-specified title for the solution. |
          |**solutionDescription** | Vendor-specified description of the solution. |
        body:
          application/xml:
            example: |
              <SolutionInfo>
                <altitude>solutionAltitude</altitude>
                <title>solutionTitle</title>
                <description>solutionDescription</description>
              </SolutionInfo>
            schema: vShieldSolutionCreate
      get:
        displayName: guestIntrospectionVendorInfoRead # existing change
        description: Retrieve registration information for a Guest Introspection vendor.
      delete:
        displayName: guestIntrospectionVendorDelete # existing change
        description: Unregister a Guest Introspection vendor.
      /solutions:
        displayName: guestIntrospectionSolutionsInfo # existing change
        description: |
          Information About Registered Endpoint Protection Solutions
          ----
        get:
          displayName: guestIntrospectionSolutionsInfoRead # existing change
          description: |
            Get registration information for all endpoint protection solutions for a Guest Introspection vendor.
      /{altitude}:
        displayName: guestIntrospectionSolutionInfo # existing change
        description: |
          Endpoint Protection Solution Registration Information
          ----
        uriParameters:
          altitude:
            displayName: altitude
            description: |
              VMware-assigned number that uniquely identifies a solution. Describes
              the type of solution and the order in which the solution receives
              events relative to other solutions on the same host.
        get:
          displayName: guestIntrospectionSolutionInfoRead # existing change
          description: Get registration information for an endpoint protection solution.
        delete:
          displayName: guestIntrospectionSolutionDelete # existing change
          description: Unregister an endpoint protection solution.
        /location:
          displayName: guestIntrospectionSolutionIPPort # existing change
          description: |
            IP Address and Port For an Endpoint Protection Solution
            -----
            To change the location of an endpoint protection solution:
            1. Deactivate all security virtual machines.
            2. Change the location.
            3. Reactivate all security virtual machines.
          post:
            displayName: guestIntrospectionSolutionIPPortUpdate # update existing change guestIntrospectionSolutionIPPortSet
            description: |
              Set the IP address and port on the vNIC host for an endpoint
              protection solution.
            body:
              application/xml:
                example: |
                  <LocationInfo>
                    <ip>solutionIpAddress</ip>
                    <port>solutionIPPort</port>
                  </LocationInfo>
                schema: solutionIPPortSet
          get:
            displayName: guestIntrospectionSolutionIPPortRead # update addition guestIntrospectionSolutionIPPortGet
            description: |
              Get the IP address and port on the vNIC host for an endpoint
              protection solution.
          delete:
            displayName: guestIntrospectionSolutionIPPortDelete # existing change
            description: |
              Unset the IP address and port for an endpoint protection
              solution.
  /activation:
    displayName: guestIntrospectionSolutionActivation # existing change
    description: |
      Activate an Endpoint Protection Solution
      -------
      You can activate a solution that has been registered and located.
    get:
      displayName: guestIntrospectionSolutionActivationRead # existing change
      description: |
        Retrieve activation information for all activated security VMs on the
        specified host.
      queryParameters:
        hostId:
          required: true
          displayName: hostId
          description: Host ID associated with activated security VMs.
      responses:
        200:
          body:
            application/xml:
              example: |
                <ActivatedSVMs>
                  <ActivationInfo>
                    <moid>vm-819</moid>
                    <hostMoid>host-9</hostMoid>
                    <vmName>VMWARE-Solution-Name-XXX.XXX.XXX.XXX</vmName>
                    <hostName>10.24.130.174</hostName>
                    <clusterName>Dev</clusterName>
                    <dcName>dev</dcName>
                    <vendorId>VMWARE</vendorId>
                    <solutionId>6341068275337723904</solutionId>
                  </ActivationInfo>
                  ...
                </ActivatedSVMs>
    /{vendorID}/{solutionID}:
      displayName: guestIntrospectionSolutionActivatedVMs # existing change
      description: |
        Activated Security Virtual Machines
        ---
      uriParameters:
        vendorID:
          displayName: vendorID
          description: VMware-assigned ID for the vendor.
          required: true
        solutionID:
          displayName: solutionID
          description: solution ID for the endpoint protection solution.
          required: true
      get:
        displayName: guestIntrospectionSolutionActivatedVMsRead # existing change
        description: |
          Retrieve a list of activated security VMs for an endpoint protection solution.
        responses:
          200:
            body:
              application/xml:
                example: |
                  <ActivatedSVMs>
                    <ActivationInfo>
                      <moid>vm-819</moid>
                      <hostMoid>host-9</hostMoid>
                      <vmName>VMWARE-Solution-Name-XXX.XXX.XXX.XXX</vmName>
                      <hostName>10.24.130.174</hostName>
                      <clusterName>Dev</clusterName>
                      <dcName>dev</dcName>
                      <vendorId>VMWARE</vendorId>
                      <solutionId>6341068275337723904</solutionId>
                    </ActivationInfo>
                    ...
                  </ActivatedSVMs>
    /{vendorID}/{altitude}:
      displayName: guestIntrospectionSolutionActivate # existing change
      description: |
        Activate a Registered Endpoint Protection Solution
        -----
      uriParameters:
        vendorID:
          displayName: vendorID
          description: VMware-assigned ID for the vendor.
          required: true
        altitude:
          displayName: altitude
          description: |
            VMware-assigned number to uniquely identify a solution. Describes the
            type of solution and the order in which the solution receives events
            relative to other solutions on the same host.
      post:
        displayName: guestIntrospectionSolutionActivateRegistered # dupfix guestIntrospectionSolutionActivate
        description: |
          Activate an endpoint protection solution that has been registered
          and located. Specify the following parameter in the request body.
          
          | Name            | Comments |
          |-----------------|------------|
          |**svmMoid**     | Managed object ID of the virtual machine of the activated endpoint protection solution. |
        body:
          application/xml:
            example: |
              <ActivationInfo>
                <moid>svmMoid</moid>
              </ActivationInfo>
            schema: vShieldSolutionActivate
      /{moid}:
        displayName: guestIntrospectionSolutionStatus
        description: |
          Working with Solution Activation Status
          ----
        uriParameters:
          moid:
            required: true
            displayName: moid
            description: Managed object reference of a VM.
        get:
          displayName: guestIntrospectionSolutionActivationStatusRead
          description: Retrieve the endpoint protection solution activation status, either true (activated) or false (not activated).
        delete:
          displayName: guestIntrospectionSolutionDeactivate
          description: Deactivate an endpoint protection solution on a host.
/4.0/firewall:
  displayName: dfw
  description: |
    Working with Distributed Firewall
    =================================
  /globalroot-0/defaultconfig:
    displayName: dfwConfigDefault
    description: | 
      Default Firewall Configuration
      -----
    get:
      displayName: dfwConfigDefaultRead
      description: | 
        Retrieve the default firewall configuration.
        
        The output of this method can be used to restore the firewall config
        back to default. For example, to replace the layer 2 or layer 3
        default section, use the relevant default section from the `GET
        /api/4.0/firewall/globalroot-0/defaultconfig` response body to create
        the request body of `PUT
        /api/4.0/firewall/globalroot-0/config/layer2sections|layer3sections/{sectionId}`.

        **Method history:**

        Release | Modification
        --------|-------------
        6.3.0 | Method introduced.
  /globalroot-0/config:
    displayName: dfwConfig
    description: |
      Distributed Firewall Rules Configuration
      ---
      The following table lists the elements that can be used in firewall
      rules.
      
      | Element | Keyword for API | Used in |
      |---|---|---|
      | All Edges | ALL_EDGES | appliedTo |
      | application | Application | service |
      | application group | ApplicationGroup | service |
      | cluster | compute resource | ClusterComputeResource<br>appliedTo |
      | datacenter | Datacenter | source/destination<br>appliedTo |
      | distributed firewall | DISTRIBUTED_FIREWALL | appliedTo |
      | distributed virtual port group | DistributedVirtualPortgroup | source/destination<br>appliedTo |
      | Edge ID | Edge | appliedTo |
      | global root | GlobalRoot | source/destination |
      | host | HostSystem | appliedTo |
      | IP set | IPSet | source/destination |
      | IPv4 addresses | Ipv4Address | source/destination |
      | IPv6 addresses | Ipv6Address | source/destination |
      | logical switch | VirtualWire | source/destination<br>appliedTo |
      | MAC address set | MACSet | source/destination |
      | network | Network | for legacy portgroups, network can be used in source or destination instead of appliedTo |
      | profile | ALL_PROFILE_BINDINGS | |
      | resource pool | ResourcePool | source/destination |
      | security group | SecurityGroup | source/destination |
      | virtual app | VirtualApp | source/destination |
      | virtual machine | VirtualMachine | source/destination<br>appliedTo |
      | vNIC | Vnic | source/destination<br>appliedTo |
    get:
      displayName: dfwConfigShow
      description: |
        Retrieve distributed firewall rule configuration.
        
        If no query parameters are used, all rule configuration is retrieved.
        Use the query parameters to filter the rule configuration information.
      responses:
        200:
          body:
            application/xml:
              example: |
                <firewallConfiguration timestamp="1360144793284">
                  <contextId>globalroot-0</contextId>
                  <layer3Sections>
                    <section id="2" name="defaultSectionLayer3" generationNumber="1360144793284" timestamp="1360144793284">
                      <rule id="2" disabled="false" logged="false">
                        <name>Default Rule</name>
                        <action>DENY</action>
                        <appliedToList>
                          <appliedTo>
                            <name>DISTRIBUTED_FIREWALL</name>
                            <value>DISTRIBUTED_FIREWALL</value>
                            <type>DISTRIBUTED_FIREWALL</type>
                            <isValid>true</isValid>
                          </appliedTo>
                        </appliedToList>
                        <sectionId>2</sectionId>
                      </rule>
                    </section>
                  </layer3Sections>
                  <layer2Sections>
                    <section id="1" name="defaultSectionLayer2" generationNumber="1360144793284" timestamp="1360144793284">
                      <rule id="1" disabled="false" logged="false">
                        <name>Default Rule</name>
                        <action>ALLOW</action>
                        <appliedToList>
                          <appliedTo>
                            <name>DISTRIBUTED_FIREWALL</name>
                            <value>DISTRIBUTED_FIREWALL</value>
                            <type>DISTRIBUTED_FIREWALL</type>
                            <isValid>true</isValid>
                          </appliedTo>
                        </appliedToList>
                        <sectionId>1</sectionId>
                      </rule>
                    </section>
                  </layer2Sections>
                </firewallConfiguration>
      queryParameters:
        ruleType:
          required: false
          displayName: ruleType
          description: |
            **ruleType** can be *LAYER3*, *LAYER2*, *L3REDIRECT*. **ruleType**
            is mandatory if other query parameters are sent.
            **Note:** Filtering is not supported for layer 2 rules, so
            specifying *LAYER2* will return all rule types.
        source:
          required: false
          displayName: source
          description: |
            **source** can contain IPv4/v6 address or vm-id.
        destination:
          required: false
          displayName: destination
          description: |
            **destination** can contain IPv4/v6 address or vm-id.
        ruleId:
          required: false
          displayName: ruleId
          description: |
            filter by **ruleId**
        comment:
          required: false
          displayName: comment
          description: |
            **comment** can contain any portion of the comment entered for the
            rules. Search is case insensitive.
        name:
          required: false
          displayName: name
          description: |
            **name** can contain any portion of the rule name entered for the rules.
            Search is case insensitive.
        siProfile:
          required: false
          displayName: siProfile
          description: |
            **siProfile** can contain any portion of the service profile name
            associated with L3 redirect rule. Search is case insensitive.
        edgeId:
          required: false
          displayName: edgeId
          description: |
            Filter for rules applicable to the Edge specified by **edgeId**.
        action:
          required: false
          displayName: action
          description: |
            Filter for specific **action** (*allow*, *deny*)
    put:
      displayName: dfwConfigUpdate
      description: !include documentation/reuse/firewall/dfwConfigUpdate
      headers:
        If-Match:
          required: true
          displayName: If-Match
          description: !include documentation/reuse/firewall/if-match
      body:
        application/xml:
          example: |
            <firewallConfiguration timestamp="1359979620727">
              <contextId>globalroot-0</contextId>
              <layer3Sections>
                <section id="2" name="defaultSectionLayer3" generationNumber="1359979620727" timestamp="1359979620727">
                  <rule disabled="false" logged="true">
                    <name>okn-1</name>
                    <action>ALLOW</action>
                    <sources excluded="false">
                      <source>
                        <value>datacenter-57</value>
                        <type>Datacenter</type>
                      </source>
                      <source>
                        <value>domain-c62</value>
                        <type>ClusterComputeResource</type>
                      </source>
                      <source>
                        <value>10.112.1.1</value>
                        <type>Ipv4Address</type>
                      </source>
                    </sources>
                    <services>
                      <service>
                        <destinationPort>80</destinationPort>
                        <protocol>6</protocol>
                        <subProtocol>6</subProtocol>
                      </service>
                      <service>
                        <value>application-161</value>
                        <type>Application</type>
                      </service>
                    </services>
                    <appliedToList>
                      <appliedTo>
                        <value>5013bcd8-c666-1e28-c7a9-600da945954f.000</value>
                        <type>Vnic</type>
                      </appliedTo>
                      <appliedTo>
                        <value>vm-126</value>
                        <type>VirtualMachine</type>
                      </appliedTo>
                    </appliedToList>
                  </rule>
                  <rule disabled="true" logged="true">
                    <name>Matru-1</name>
                    <action>ALLOW</action>
                    <sectionId>2</sectionId>
                  </rule>
                  <rule disabled="true" logged="true">
                    <name>Matru-2</name>
                    <action>ALLOW</action>
                    <sectionId>2</sectionId>
                  </rule>
                  <rule disabled="true" logged="true">
                    <name>Matru-3</name>
                    <action>ALLOW</action>
                    <sectionId>2</sectionId>
                  </rule>
                  <rule id="2" disabled="true" logged="false">
                    <name>Default Rule</name>
                    <action>DENY</action>
                    <sectionId>2</sectionId>
                  </rule>
                </section>
              </layer3Sections>
              <layer2Sections>
                <section id="1" name="defaultSectionLayer2" generationNumber="1359979620727" timestamp="1359979620727">
                  <rule id="1" disabled="false" logged="false">
                    <name>Default Rule</name>
                    <action>ALLOW</action>
                    <sectionId>1</sectionId>
                  </rule>
                </section>
              </layer2Sections>
            </firewallConfiguration>
    delete:
      displayName: dfwConfigDelete
      description: |
        Restores default configuration, which means one defaultLayer3 section
        with three default allow rules and one defaultLayer2Section with one
        default allow rule.
    /layer3sections:
      displayName: dfwL3Section
      description: !include documentation/reuse/firewall/dfwL3Section
      get:
        displayName: dfwL3SectionRead
        description: |
          Retrieve rules from the layer 3 section specified by section
          **name**.
        queryParameters:
          name:
            required: true
            displayName: name
            description: Name of the section to retrieve.
        responses:
          200:
            body:
              application/xml:
                example: |
                  <section id="4" name="TestSection" generationNumber="1360149234572" timestamp="1360149234572">
                    <rule id="16" disabled="false" logged="true">
                      <name>okn-2</name>
                      <action>ALLOW</action>
                      <appliedToList>
                        <appliedTo>
                          <name>vm1 - Network adapter 1</name>
                          <value>5013bcd8-c666-1e28-c7a9-600da945954f.000</value>
                          <type>Vnic</type>
                          <isValid>true</isValid>
                        </appliedTo>
                        <appliedTo>
                          <name>Small XP-2</name>
                          <value>vm-126</value>
                          <type>VirtualMachine</type>
                          <isValid>true</isValid>
                        </appliedTo>
                      </appliedToList>
                      <sectionId>4</sectionId>
                      <sources excluded="false">
                        <source>
                          <name>5.1 ESX</name>
                          <value>datacenter-57</value>
                          <type>Datacenter</type>
                          <isValid>true</isValid>
                        </source>
                        <source>
                          <name>5.1</name>
                          <value>domain-c62</value>
                          <type>ClusterComputeResource</type>
                          <isValid>true</isValid>
                        </source>
                        <source>
                          <value>10.112.1.1</value>
                          <type>Ipv4Address</type>
                          <isValid>true</isValid>
                        </source>
                      </sources>
                      <services>
                        <service>
                          <destinationPort>80</destinationPort>
                          <protocol>6</protocol>
                          <subProtocol>6</subProtocol>
                        </service>
                        <service>
                          <name>VMware-VDM2.x-Ephemeral</name>
                          <value>application-161</value>
                          <isValid>true</isValid>
                        </service>
                      </services>
                      <appliedToList>
                        <appliedTo>
                          <name>DISTRIBUTED_FIREWALL</name>
                          <value>DISTRIBUTED_FIREWALL</value>
                          <type>DISTRIBUTED_FIREWALL</type>
                          <isValid>true</isValid>
                        </appliedTo>
                      </appliedToList>
                    </rule>
                    <rule id="15" disabled="true" logged="true">
                      <name>Matru-3</name>
                      <action>ALLOW</action>
                      <appliedToList>
                        <appliedTo>
                          <name>DISTRIBUTED_FIREWALL</name>
                          <value>DISTRIBUTED_FIREWALL</value>
                          <type>DISTRIBUTED_FIREWALL</type>
                          <isValid>true</isValid>
                        </appliedTo>
                      </appliedToList>
                      <sectionId>4</sectionId>
                    </rule>
                    <rule id="14" disabled="true" logged="true">
                      <name>test-3</name>
                      <action>ALLOW</action>
                      <appliedToList>
                        <appliedTo>
                          <name>DISTRIBUTED_FIREWALL</name>
                          <value>DISTRIBUTED_FIREWALL</value>
                          <type>DISTRIBUTED_FIREWALL</type>
                          <isValid>true</isValid>
                        </appliedTo>
                      </appliedToList>
                      <sectionId>4</sectionId>
                    </rule>
                    <rule id="13" disabled="true" logged="true">
                      <name>test-2</name>
                      <action>ALLOW</action>
                      <appliedToList>
                        <appliedTo>
                          <name>DISTRIBUTED_FIREWALL</name>
                          <value>DISTRIBUTED_FIREWALL</value>
                          <type>DISTRIBUTED_FIREWALL</type>
                          <isValid>true</isValid>
                        </appliedTo>
                      </appliedToList>
                      <sectionId>4</sectionId>
                    </rule>
                    <rule id="12" disabled="true" logged="false">
                      <name>test-1</name>
                      <action>DENY</action>
                      <appliedToList>
                        <appliedTo>
                          <name>DISTRIBUTED_FIREWALL</name>
                          <value>DISTRIBUTED_FIREWALL</value>
                          <type>DISTRIBUTED_FIREWALL</type>
                          <isValid>true</isValid>
                        </appliedTo>
                      </appliedToList>
                      <sectionId>4</sectionId>
                    </rule>
                  </section>
      post:
        # updated in 6.2.2 to allow positional insertion of section
        # with operation and anchorId query parameters
        displayName: dfwL3SectionCreate
        description: |
          Create a layer 3 distributed firewall section.
          
          By default, the section is created at the top of the firewall table.
          You can specify a location for the section with the **operation**
          and **anchorId** query parameters.
        queryParameters:
          operation: !include documentation/reuse/firewall/operation.raml
          anchorId: !include documentation/reuse/firewall/anchorId.raml
        body:
          application/xml:
            example: |
              <section name="TestSection">
                <rule disabled="false" logged="true">
                  <name>okn-2</name>
                  <action>ALLOW</action>
                  <appliedToList>
                    <appliedTo>
                      <name>vm1 - Network adapter 1</name>
                      <value>5013bcd8-c666-1e28-c7a9-600da945954f.000</value>
                      <type>Vnic</type>
                      <isValid>true</isValid>
                    </appliedTo>
                    <appliedTo>
                      <name>Small XP-2</name>
                      <value>vm-126</value>
                      <type>VirtualMachine</type>
                      <isValid>true</isValid>
                    </appliedTo>
                  </appliedToList>
                  <sources excluded="false">
                    <source>
                      <name>5.1 ESX</name>
                      <value>datacenter-57</value>
                      <type>Datacenter</type>
                      <isValid>true</isValid>
                    </source>
                    <source>
                      <name>5.1</name>
                      <value>domain-c62</value>
                      <type>ClusterComputeResource</type>
                      <isValid>true</isValid>
                    </source>
                    <source>
                      <value>10.112.1.1</value>
                      <type>Ipv4Address</type>
                      <isValid>true</isValid>
                    </source>
                  </sources>
                  <services>
                    <service>
                      <destinationPort>80</destinationPort>
                      <protocol>6</protocol>
                      <subProtocol>6</subProtocol>
                    </service>
                    <service>
                      <name>VMware-VDM2.x-Ephemeral</name>
                      <value>application-161</value>
                      <isValid>true</isValid>
                    </service>
                  </services>
                </rule>
                <rule disabled="true" logged="true">
                  <name>Matru-3</name>
                  <action>ALLOW</action>
                </rule>
                <rule disabled="true" logged="true">
                  <name>test-3</name>
                  <action>ALLOW</action>
                </rule>
                <rule disabled="true" logged="true">
                  <name>test-2</name>
                  <action>ALLOW</action>
                </rule>
                <rule disabled="true" logged="false">
                  <name>test-1</name>
                  <action>DENY</action>
                </rule>
              </section>
            schema: dfwSection
      /{sectionId}:
        displayName: dfwL3SectionId
        description: |
          Working With a Specific Layer 3 Distributed Firewall Section
          ----
        uriParameters:
          sectionId:
            required: true
            displayName: sectionId
            description: The ID of the section to modify.
        get:
          displayName: dfwL3SectionIdRead
          description: Retrieve information about the specified layer 3 section.
          responses:
            200:
              body:
                application/xml:
                  example: |
                    <section id="4" name="TestSection" generationNumber="1360149234572" timestamp="1360149234572">
                      <rule id="16" disabled="false" logged="true">
                        <name>okn-2</name>
                        <action>ALLOW</action>
                        <appliedToList>
                          <appliedTo>
                            <name>vm1 - Network adapter 1</name>
                            <value>5013bcd8-c666-1e28-c7a9-600da945954f.000</value>
                            <type>Vnic</type>
                            <isValid>true</isValid>
                          </appliedTo>
                          <appliedTo>
                            <name>Small XP-2</name>
                            <value>vm-126</value>
                            <type>VirtualMachine</type>
                            <isValid>true</isValid>
                          </appliedTo>
                        </appliedToList>
                        <sectionId>4</sectionId>
                        <sources excluded="false">
                          <source>
                            <name>5.1 ESX</name>
                            <value>datacenter-57</value>
                            <type>Datacenter</type>
                            <isValid>true</isValid>
                          </source>
                          <source>
                            <name>5.1</name>
                            <value>domain-c62</value>
                            <type>ClusterComputeResource</type>
                            <isValid>true</isValid>
                          </source>
                          <source>
                            <value>10.112.1.1</value>
                            <type>Ipv4Address</type>
                            <isValid>true</isValid>
                          </source>
                        </sources>
                        <services>
                          <service>
                            <destinationPort>80</destinationPort>
                            <protocol>6</protocol>
                            <subProtocol>6</subProtocol>
                          </service>
                          <service>
                            <name>VMware-VDM2.x-Ephemeral</name>
                            <value>application-161</value>
                            <isValid>true</isValid>
                          </service>
                        </services>
                        <appliedToList>
                          <appliedTo>
                            <name>DISTRIBUTED_FIREWALL</name>
                            <value>DISTRIBUTED_FIREWALL</value>
                            <type>DISTRIBUTED_FIREWALL</type>
                            <isValid>true</isValid>
                          </appliedTo>
                        </appliedToList>
                      </rule>
                      <rule id="15" disabled="true" logged="true">
                        <name>Matru-3</name>
                        <action>ALLOW</action>
                        <appliedToList>
                          <appliedTo>
                            <name>DISTRIBUTED_FIREWALL</name>
                            <value>DISTRIBUTED_FIREWALL</value>
                            <type>DISTRIBUTED_FIREWALL</type>
                            <isValid>true</isValid>
                          </appliedTo>
                        </appliedToList>
                        <sectionId>4</sectionId>
                      </rule>
                      <rule id="14" disabled="true" logged="true">
                        <name>test-3</name>
                        <action>ALLOW</action>
                        <appliedToList>
                          <appliedTo>
                            <name>DISTRIBUTED_FIREWALL</name>
                            <value>DISTRIBUTED_FIREWALL</value>
                            <type>DISTRIBUTED_FIREWALL</type>
                            <isValid>true</isValid>
                          </appliedTo>
                        </appliedToList>
                        <sectionId>4</sectionId>
                      </rule>
                      <rule id="13" disabled="true" logged="true">
                        <name>test-2</name>
                        <action>ALLOW</action>
                        <appliedToList>
                          <appliedTo>
                            <name>DISTRIBUTED_FIREWALL</name>
                            <value>DISTRIBUTED_FIREWALL</value>
                            <type>DISTRIBUTED_FIREWALL</type>
                            <isValid>true</isValid>
                          </appliedTo>
                        </appliedToList>
                        <sectionId>4</sectionId>
                      </rule>
                      <rule id="12" disabled="true" logged="false">
                        <name>test-1</name>
                        <action>DENY</action>
                        <appliedToList>
                          <appliedTo>
                            <name>DISTRIBUTED_FIREWALL</name>
                            <value>DISTRIBUTED_FIREWALL</value>
                            <type>DISTRIBUTED_FIREWALL</type>
                            <isValid>true</isValid>
                          </appliedTo>
                        </appliedToList>
                        <sectionId>4</sectionId>
                      </rule>
                    </section>
        post:
          displayName: dfwL3SectionIdAction # update existing addtion dfwL3SectionIdRevise
          description: |
            Move the specified layer 3 section.
            
            Use the **action**, **operation**, and optionally **achorId**
            query parameters to specify the destination for the section.
            
            `POST /api/4.0/firewall/globalroot-0/config/layer3sections/1007
            ?action=revise&operation=insert_before&anchorId=1006`
            
            `If-Match: 1477989118875` 
            
            ```
            <section id="1007" name="Web Section" generationNumber="1477989118875" timestamp="1477989118875" type="LAYER3">
              ...
            </section>
            ```
          headers:
            If-Match:
              required: true
              displayName: If-Match
              description: !include documentation/reuse/firewall/if-match
          queryParameters:
            action:
              displayName: action
              required: true
              description: |
                Set **action** to *revise* to change the position of the
                firewall rule section.
            operation: !include documentation/reuse/firewall/operation.raml
            anchorId: !include documentation/reuse/firewall/anchorId.raml
          body:
            application/xml:
              example: |
                <section>
                  <name></name>
                  <action></action>
                  <appliedToList>
                    <appliedTo>
                      <name></name>
                      <value></value>
                      <type></type>
                      <isValid></isValid>
                    </appliedTo>
                  </appliedToList>
                  <sectionId></sectionId>
                </section>
        put:
          displayName: dfwL3SectionIdUpdate
          description: !include documentation/reuse/firewall/dfwL3SectionIdUpdate
          headers:
            If-Match:
              required: true
              displayName: If-Match
              description: !include documentation/reuse/firewall/if-match
          body:
            application/xml:
              example: |
                <section id="4" name="TestSectionRenamed" generationNumber="1336034461743" timestamp="1360149234572">
                  <rule id="16" disabled="false" logged="false">
                    <name>okn-2</name>
                    <action>ALLOW</action>
                    <appliedToList>
                      <appliedTo>
                        <name>vm1 - Network adapter 1</name>
                        <value>5013bcd8-c666-1e28-c7a9-600da945954f.000</value>
                        <type>Vnic</type>
                        <isValid>true</isValid>
                      </appliedTo>
                      <appliedTo>
                        <name>Small XP-2</name>
                        <value>vm-126</value>
                        <type>VirtualMachine</type>
                        <isValid>true</isValid>
                      </appliedTo>
                    </appliedToList>
                    <sectionId>4</sectionId>
                    <sources excluded="false">
                      <source>
                        <name>5.1 ESX</name>
                        <value>datacenter-57</value>
                        <type>Datacenter</type>
                        <isValid>true</isValid>
                      </source>
                      <source>
                        <name>5.1</name>
                        <value>domain-c62</value>
                        <type>ClusterComputeResource</type>
                        <isValid>true</isValid>
                      </source>
                      <source>
                        <value>10.112.1.1</value>
                        <type>Ipv4Address</type>
                        <isValid>true</isValid>
                      </source>
                    </sources>
                    <services>
                      <service>
                        <destinationPort>80</destinationPort>
                        <protocol>6</protocol>
                        <subProtocol>6</subProtocol>
                      </service>
                      <service>
                        <name>VMware-VDM2.x-Ephemeral</name>
                        <value>application-161</value>
                        <isValid>true</isValid>
                      </service>
                    </services>
                  </rule>
                  <rule id="15" disabled="true" logged="true">
                    <name>Matru-3</name>
                    <action>DENY</action>
                    <sectionId>4</sectionId>
                  </rule>
                  <rule id="14" disabled="true" logged="true">
                    <name>test-3</name>
                    <action>ALLOW</action>
                    <sectionId>4</sectionId>
                  </rule>
                  <rule id="13" disabled="true" logged="true">
                    <name>test-2</name>
                    <action>ALLOW</action>
                    <sectionId>4</sectionId>
                  </rule>
                  <rule id="12" disabled="true" logged="false">
                    <name>test-1</name>
                    <action>DENY</action>
                    <sectionId>4</sectionId>
                  </rule>
                </section>
        delete:
          displayName: dfwL3SectionIdDelete
          description: |
            Delete the specified layer 3 distributed firewall section.
            
            If the default layer 3 firewall section is selected, the request is
            rejected. See `GET /api/4.0/firewall/globalroot-0/defaultconfig`
            for information on resetting the default firewall section.
            
            **Method history:**
            
            Release | Modification
            --------|-------------
            6.3.0 | Method updated. When deleting the default firewall rule section, the method previously removed all rules except for the default rule. The method now returns status 400 and the message `Cannot delete default section <sectionId>`.
        /rules:
          displayName: dfwL3Rules
          description: |
            Working With Distributed Firewall Rules in a Layer 3 Section
            ----
          post:
            displayName: dfwL3RulesAdd
            description: !include documentation/reuse/firewall/dfwL2RulesAdd
            headers:
              If-Match:
                required: true
                displayName: If-Match
                description: !include documentation/reuse/firewall/if-match
            body:
              application/xml:
                example: |
                  <rule disabled="false" logged="false">
                    <name>AddRuleTest</name>
                    <action>allow</action>
                    <notes></notes>
                    <appliedToList>
                      <appliedTo>
                        <value>datacenter-26</value>
                        <type>Datacenter</type>
                      </appliedTo>
                    </appliedToList>
                    <sectionId>2</sectionId>
                    <sources excluded="true">
                      <source>
                        <value>datacenter-26</value>
                        <type>Datacenter</type>
                      </source>
                    </sources>
                    <services>
                      <service>
                        <value>application-216</value>
                      </service>
                    </services>
                  </rule>
                schema: dfwRule
          /{ruleId}:
            displayName: dfwL3Rule
            description: |
              Working with a Specific Rule in a Specific Layer 3 Section
              ----
            uriParameters:
              ruleId:
                required: true
                displayName: ruleId
                description: The ID of the rule beeing read, updated or deleted
            get:
              displayName: dfwL3RuleRead
              description: |
                Retrieve information about the specified distributed firewall rule.
            put:
              displayName: dfwL3RuleUpdate
              description: !include documentation/reuse/firewall/dfwL3RuleUpdate
              headers:
                If-Match:
                  required: true
                  displayName: If-Match
                  description: !include documentation/reuse/firewall/if-match
              body:
                application/xml:
                  example: |
                    <rule id="23" disabled="enabled" logged="true">
                      <name>AddRuleTestUpdated</name>
                      <action>allow</action>
                      <notes></notes>
                      <appliedToList>
                        <appliedTo>
                          <value>datacenter-26</value>
                          <type>Datacenter</type>
                        </appliedTo>
                      </appliedToList>
                      <sectionId>2</sectionId>
                      <sources excluded="true">
                        <source>
                          <value>datacenter-26</value>
                          <type>Datacenter</type>
                        </source>
                      </sources>
                      <services>
                        <service>
                          <value>application-216</value>
                        </service>
                      </services>
                    </rule>
            delete:
              displayName: dfwL3RuleDelete
              description: Delete the specified distributed firewall rule.
              headers:
                If-Match:
                  required: true
                  displayName: If-Match
                  description: !include documentation/reuse/firewall/if-match
    /layer2sections:
      displayName: dfwL2Section
      description: !include documentation/reuse/firewall/dfwL2Section
      get:
        displayName: dfwL2SectionRead
        description: |
          Retrieve rules from the layer 2 section specified by section
          **name**.
        queryParameters:
          name:
            required: false
            displayName: name
            description: Name of the Section to read
      post:
        # updated in 6.2.2 to allow positional insertion of section
        # with operation and anchorId query parameters
        displayName: dfwL2SectionCreate
        description: |
          Create a layer 2 distributed firewall section.
          
          By default, the section is created at the top of the firewall table.
          You can specify a location for the section with the **operation**
          and **anchorId** query parameters.
        queryParameters:
          operation: !include documentation/reuse/firewall/operation.raml
          anchorId: !include documentation/reuse/firewall/anchorId.raml
        body:
         application/xml:
           example: |
            <section name="" managedBy="" type="">
              <rule disabled="" logged="">
                <name></name>
                <action></action>
                <appliedToList>
                  <appliedTo>
                    <name></name>
                    <value></value>
                    <type></type>
                    <isValid></isValid>
                  </appliedTo>
                </appliedToList>
                <sources excluded="">
                  <source>
                    <name></name>
                    <value></value>
                    <type></type>
                    <isValid></isValid>
                  </source>
                </sources>
                <destinations excluded="">
                  <destination>
                    <name></name>
                    <value></value>
                    <type></type>
                    <isValid></isValid>
                  </destination>
                </destinations>
                <services>
                  <service>
                    <destinationPort></destinationPort>
                    <protocol></protocol>
                    <subProtocol></subProtocol>
                  </service>
                </services>
              </rule>
            </section>
           schema: dfwSection
      /{sectionId}:
        displayName: dfwL2SectionId
        description: |
          Working With a Specific Layer 2 Distributed Firewall Section
          ----
        uriParameters:
          sectionId:
            required: true
            displayName: sectionId
            description: The ID of the section to modify.
        get:
          displayName: dfwL2SectionIdRead
          description: Retrieve information about the specified layer 2 section.
        post:
          displayName: dfwL2SectionIdAction # update existing addtion dfwL2SectionIdRevise
          description: |
            Move the specified layer 2 section.
            
            Use the **action**, **operation**, and optionally **achorId**
            query parameters to specify the destination for the section.
            
            `POST /api/4.0/firewall/globalroot-0/config/layer2sections/1009
            ?action=revise&operation=insert_before&anchorId=1008`
            
            `If-Match: 1478307787160`
            
            ```
            <section id="1009" name="Test Section" generationNumber="1478307787160" timestamp="1478307787160" type="LAYER2">
              ...
            </section>
            ```
          headers:
            If-Match:
              required: true
              displayName: If-Match
              description: !include documentation/reuse/firewall/if-match
          queryParameters:
            action:
              displayName: action
              required: true
              description: |
                Set **action** to *revise* to change the position of the
                firewall rule section.
            operation: !include documentation/reuse/firewall/operation.raml
            anchorId: !include documentation/reuse/firewall/anchorId.raml
          body:
            application/xml:
              example: |
                <section>
                  <name></name>
                  <action></action>
                  <appliedToList>
                    <appliedTo>
                      <name></name>
                      <value></value>
                      <type></type>
                      <isValid></isValid>
                    </appliedTo>
                  </appliedToList>
                  <sectionId></sectionId>
                </section>
        put:
          displayName: dfwL2SectionIdUpdate
          description: !include documentation/reuse/firewall/dfwL2SectionIdUpdate
          headers:
            If-Match:
              required: true
              displayName: If-Match
              description: !include documentation/reuse/firewall/if-match
          body:
            application/xml:
              example: |
                <section id="" name="" generationNumber="" timestamp="">
                  <rule id="" disabled="" logged="">
                    <name></name>
                    <action></action>
                    <appliedToList>
                      <appliedTo>
                        <name></name>
                        <value></value>
                        <type></type>
                        <isValid></isValid>
                      </appliedTo>
                    </appliedToList>
                    <sectionId></sectionId>
                    <sources excluded="">
                      <source>
                        <name></name>
                        <value></value>
                        <type></type>
                        <isValid></isValid>
                      </source>
                    </sources>
                    <services>
                      <service>
                        <destinationPort></destinationPort>
                        <protocol></protocol>
                        <subProtocol></subProtocol>
                      </service>
                    </services>
                  </rule>
                </section>
        delete:
          displayName: dfwL2SectionIdDelete
          description: |
            Delete the specified layer 2 section and its contents.

            If the default layer 2 firewall section is selected, the request is
            rejected. See `GET /api/4.0/firewall/globalroot-0/defaultconfig`
            for information on resetting the default firewall section.

            **Method history:**

            Release | Modification
            --------|-------------
            6.3.0 | Method updated. When deleting the default firewall rule section, the method previously removed all rules except for the default rule. The method now returns status 400 and the message `Cannot delete default section <sectionId>`.
        /rules:
          displayName: dfwL2Rules
          description: |
            Working With Distributed Firewall Rules in a Layer 2 Section
            ------
          post:
            displayName: dfwL2RulesAdd
            description: !include documentation/reuse/firewall/dfwL2RulesAdd
            headers:
              If-Match:
                required: true
                displayName: If-Match
                description: !include documentation/reuse/firewall/if-match
            body:
              application/xml:
                example: |
                  <rule disabled="" logged="">
                    <name></name>
                    <action></action>
                    <notes></notes>
                    <appliedToList>
                      <appliedTo>
                        <value></value>
                        <type></type>
                      </appliedTo>
                    </appliedToList>
                    <sources excluded="">
                      <source>
                        <name></name>
                        <value></value>
                        <type></type>
                        <isValid></isValid>
                      </source>
                    </sources>
                    <destinations excluded="">
                      <destination>
                        <name></name>
                        <value></value>
                        <type></type>
                        <isValid></isValid>
                      </destination>
                    </destinations>
                    <services>
                      <service>
                        <value></value>
                      </service>
                    </services>
                  </rule>
                schema: dfwRule
          /{ruleId}:
            displayName: dfwL2Rule
            description: |
              Working With a Specific Rule in a Specific Layer 2 Section
              -----
            uriParameters:
              ruleId:
                required: true
                displayName: ruleId
                description: |
                  The ID of the rule.
            get:
              displayName: dfwL2RuleRead
              description: |
                Retrieve the configuration of the specified rule.
            put:
              displayName: dfwL2RuleUpdate
              description: !include documentation/reuse/firewall/dfwL2RuleUpdate
              headers:
                If-Match:
                  required: true
                  displayName: If-Match
                  description: !include documentation/reuse/firewall/if-match
              body:
                application/xml:
                  example: |
                    <rule id="" disabled="" logged="">
                      <name></name>
                      <action></action>
                      <notes></notes>
                      <sources excluded="">
                        <source>
                          <value></value>
                          <type></type>
                          <isValid></isValid>
                        </source>
                      </sources>
                      <destinations excluded="">
                        <destination>
                          <name></name>
                          <value></value>
                          <type></type>
                          <isValid></isValid>
                        </destination>
                      </destinations>
                      <services>
                        <service>
                          <name></name>
                          <value></value>
                          <type></type>
                          <isValid></isValid>
                        </service>
                      </services>
                      <appliedToList>
                        <appliedTo>
                          <name></name>
                          <value></value>
                          <type></type>
                          <isValid></isValid>
                        </appliedTo>
                      </appliedToList>
                    </rule>
            delete:
              displayName: dfwL2RuleDelete
              description: Delete the specified distributed firewall rule.
              headers:
                If-Match:
                  required: true
                  displayName: If-Match
                  description: !include documentation/reuse/firewall/if-match
    /layer3redirectsections:
      displayName: layer3RedirectSections
      description: |
        Layer 3 Redirect Sections and Rules
        ----
      post:
        displayName: layer3RedirectSectionsCreate
        description: Add L3 redirect section
        body:
          application/xml:
            example: |
              <section>
                <name></name>
                <action></action>
                <appliedToList>
                  <appliedTo>
                    <name></name>
                    <value></value>
                    <type></type>
                    <isValid></isValid>
                  </appliedTo>
                </appliedToList>
                <sectionId></sectionId>
              </section>
            schema: layer3RedirectSectionsCreate
      /{section}:
        displayName: section
        description: |
          Layer 3 Redirect Section
          ----
        uriParameters:
          section:
            required: true
            displayName: section
            description: Specify section by ID or name
        get:
          displayName: sectionRead
          description: Get L3 redirect section configuration
        put:
          displayName: sectionUpdate
          description: |
            Modify layer 3 redirect section. You will need to get the Etag
            value out of the GET first. Then pass the modified version of the
            whole redirect section configuration in the GET body.
          headers:
            If-Match:
              required: true
              displayName: If-Match
              description: !include documentation/reuse/firewall/if-match
          body:
            application/xml:
              example: |
                <section id="" name="" generationNumber="" timestamp="">
                  <rule id="" disabled="" logged="">
                    <name></name>
                    <action></action>
                    <appliedToList>
                      <appliedTo>
                        <name></name>
                        <value></value>
                        <type></type>
                        <isValid></isValid>
                      </appliedTo>
                    </appliedToList>
                    <sectionId></sectionId>
                  </rule>
                </section>
              schema: layer3RedirectSectionUpdate
        delete:
          displayName: sectionDelete
          description: Delete specified L3 redirect section
        /rules:
          displayName: rules
          description: |
            Working with Layer 3 Redirect Rules for a Specific Section
            ----
          post:
            displayName: rulesCreate
            description: Add L3 redirect rule
            body:
              application/xml:
                example: |
                  <section id="" name="" generationNumber="" timestamp="">
                    <name></name>
                    <action></action>
                    <appliedToList>
                      <appliedTo>
                        <name></name>
                        <value></value>
                        <type></type>
                        <isValid></isValid>
                      </appliedTo>
                    </appliedToList>
                    <sectionId></sectionId>
                  </section>
                schema: rulesCreate
          /{ruleID}:
            displayName: rule
            description: |
              Working With a Specific Layer 3 Redirect Rule for a Specific Section
              ----
            uriParameters:
              ruleID:
                displayName: ruleID
                required: true
                description: Specified redirect rule
            get:
              displayName: ruleRead
              description: Get L3 redirect rule
            put:
              displayName: ruleUpdate
              description: |
                Modify L3 redirect rule. You will need Etag value from the
                response header of GET call. Then, pass Etag value as the
                if-match header in PUT call
              headers:
                If-Match:
                  required: true
                  displayName: If-Match
                  description: !include documentation/reuse/firewall/if-match
              body:
                application/xml:
                  example: |
                    <rule id="" disabled="" logged="">
                      <name></name>
                      <action></action>
                      <appliedToList>
                        <appliedTo>
                          <name></name>
                          <value></value>
                          <type></type>
                          <isValid></isValid>
                        </appliedTo>
                      </appliedToList>
                    </rule>
                  schema: ruleUpdate
            delete:
              displayName: ruleDelete
              description: Delete specified L3 redirect rule
    /layer3redirect/profiles:
      displayName: serviceInsertionProfiles
      description: |
        Service Insertion Profiles and Layer 3 Redirect Rules
        ----
      get:
        displayName: serviceInsertionProfilesRead
        description: | 
          Retrieve the Service Insertion profiles that can be applied to
          layer3 redirect rules.
  /globalroot-0/state:
    displayName: dfwUpgrade
    description: |
      Enable Distributed Firewall After Upgrade
      -----
      After upgrading NSX Manager, controllers, and network virtualization
      components, check the status of distributed firewall. If it is ready to
      enable, you can enable distributed firewall.
      
      | State | Description |
      |-------|-------------|
      | backwardCompatible | This is the default state after an upgrade from vCloud Networking and Security to NSX, which means that vShield App is being used for protection instead of distributed firewall.|
      | backwardCompatibleReadyForSwitch | Once the clusters are prepared with NSX binaries, this state is enabled. You can enable distributed firewall only after firewall is in this state. |
      | switchingToForward | This is an intermediate state when you change firewall to distributed firewall. |
      | forward | This is the default state for green field deployments or after you have switched from vShield App to distributed firewall. |
      | switchFailed | This state is unlikely, but may be present if NSX Manager failed to switch to distributed firewall. |
    get:
      displayName: dfwUpgradeRead
      description: |
        Retrieve current state of firewall functioning after NSX upgrade.
    put:
      displayName: dfwUpgradeEnable
      description: Enable distributed firewall.
  /globalroot-0/status:
    displayName: dfwStatus
    description: |
      Working with Distributed Firewall Status
      ----
      Retrieve status of last publish action for each cluster in the NSX
      environment.
      
      The status output displays a generation number (**generationNumber**) for
      each rule set, which can be used to verify whether a change in rule sets
      has propagated to a host. In 6.2.4, a generation number for objects
      (**generationNumberObjects**) has been added to the status API. This allows
      you to verify whether a change in objects consumed in firewall rules has
      propagated to a host. Note that the object generation number may change
      frequently and will always be equal to or greater than the ruleset
      generation number.
      
      Starting in NSX 6.2.4, clusters (and hosts inside the cluster) are no
      longer included in the firewall status output if distributed firewall is
      disabled at the cluster level, or if the cluster is not prepared (NSX
      VIBs are not installed). In earlier versions of NSX these clusters and
      hosts are included in the output. However, because they are not
      configured for firewall, after a firewall rule publish their status is
      *inprogress*.
    get:
      displayName: dfwStatusRead
      description: |
        Get firewall configuration status
        
        **Method history:**
        
        Release | Modification
        --------|-------------
        6.2.4 | Method updated. Parameter **generationNumberObjects** added. Clusters not configured for firewall are excluded from the status output.
      responses:
        200:
          body:
            application/xml:
              example: |
                <firewallStatus>
                  <startTime>1478235234617</startTime>
                  <status>published</status>
                  <generationNumber>1478235234617</generationNumber>
                  <generationNumberObjects>1478235234617</generationNumberObjects>
                  <clusterList>
                    <clusterStatus>
                      <clusterId>domain-c33</clusterId>
                      <status>published</status>
                      <generationNumber>1478235234617</generationNumber>
                      <generationNumberObjects>1478235234617</generationNumberObjects>
                      <hostStatusList>
                        <hostStatus>
                          <hostId>host-32</hostId>
                          <hostName>esx-02a.corp.local</hostName>
                          <status>published</status>
                          <errorCode>0</errorCode>
                          <startTime>1478235235421</startTime>
                          <endTime>1478235235429</endTime>
                          <generationNumber>1478235234617</generationNumber>
                          <clusterId>domain-c33</clusterId>
                          <generationNumberObjects>1478235234617</generationNumberObjects>
                        </hostStatus>
                        <hostStatus>
                          <hostId>host-28</hostId>
                          <hostName>esx-01a.corp.local</hostName>
                          <status>published</status>
                          <errorCode>0</errorCode>
                          <startTime>1478235235421</startTime>
                          <endTime>1478235235431</endTime>
                          <generationNumber>1478235234617</generationNumber>
                          <clusterId>domain-c33</clusterId>
                          <generationNumberObjects>1478235234617</generationNumberObjects>
                        </hostStatus>
                      </hostStatusList>
                    </clusterStatus>
                    <clusterStatus>
                      <clusterId>domain-c41</clusterId>
                      <status>published</status>
                      <generationNumber>1478235234617</generationNumber>
                      <generationNumberObjects>1478235234617</generationNumberObjects>
                      <hostStatusList>
                        <hostStatus>
                          <hostId>host-202</hostId>
                          <hostName>esxmgt-01a.corp.local</hostName>
                          <status>published</status>
                          <errorCode>0</errorCode>
                          <startTime>1478235235436</startTime>
                          <endTime>1478235235442</endTime>
                          <generationNumber>1478235234617</generationNumber>
                          <clusterId>domain-c41</clusterId>
                          <generationNumberObjects>1478235234617</generationNumberObjects>
                        </hostStatus>
                        <hostStatus>
                          <hostId>host-203</hostId>
                          <hostName>esxmgt-02a.corp.local</hostName>
                          <status>published</status>
                          <errorCode>0</errorCode>
                          <startTime>1478235235436</startTime>
                          <endTime>1478235235444</endTime>
                          <generationNumber>1478235234617</generationNumber>
                          <clusterId>domain-c41</clusterId>
                          <generationNumberObjects>1478235234617</generationNumberObjects>
                        </hostStatus>
                      </hostStatusList>
                    </clusterStatus>
                  </clusterList>
                </firewallStatus>
    /layer3sections/{sectionID}:
      displayName: L3SectionStatus
      description: |
        Working with a Specific Layer 3 Section Status
        ----
      uriParameters:
        sectionID:
          required: true
          displayName: sectionID
          description: Section ID
      get:
        displayName: L3SectionStatusRead
        description: |
          Retrieve status of the last publish action for the specified layer 3 section.
          
          **Method history:**
          
          Release | Modification
          --------|-------------
          6.2.4 | Method updated. Parameter **generationNumberObjects** added. Clusters not configured for firewall are excluded from the status output.
    /layer2sections/{sectionID}:
      displayName: L2SectionStatus
      description: |
        Working with a Specific Layer 2 Section Status
        ----
      uriParameters:
        sectionID:
          required: true
          displayName: sectionID
          description: Section ID
      get:
        displayName: L2SectionStatusRead
        description: |
          Retrieve status of the last publish action for the specified layer 2 section.
          
          **Method history:**
          
          Release | Modification
          --------|-------------
          6.2.4 | Method updated. Parameter **generationNumberObjects** added. Clusters not configured for firewall are excluded from the status output.
  /globalroot-0/drafts:
    displayName: dfwDrafts
    description: |
      Import and Export Firewall Configurations
      ----
    post:
      displayName: dfwDraftsCreate
      description: Save a firewall configuration.
      body:
        application/xml:
          example: |
            <firewallDraft name="">
              <description></description>
              <preserve></preserve>
              <mode></mode>
              <config>
                <contextId></contextId>
                <layer3Sections>
                  <section name="" >
                    <rule id="" disabled="true|false" logged="true|false">
                      <name></name>
                      <action></action>
                      <precedence></precedence>
                    </rule>
                  </section>
                </layer3Sections>
                <layer2Sections>
                  <section name="">
                    <rule id="" disabled="true|false" logged="true|false">
                      <name></name>
                      <action></action>
                      <precedence></precedence>
                    </rule>
                  </section>
                </layer2Sections>
              </config>
            </firewallDraft>
          schema: dfwDraftsCreate
    get:
      displayName: dfwSaveConfigRead
      description: Displays the draft IDs of all saved configurations.
    /{draftID}:
      displayName: dfwDraft
      description: |
        Working With a Specific Saved Firewall Configuration
        ----
      uriParameters:
        draftID:
          required: true
          displayName: draftID
          description: |
            Specified draft ID. Use `GET /4.0/firewall/globalroot-0/drafts` to
            retrieve all drafts.
      get:
        displayName: dfwDraftRead
        description: Get a saved firewall configuration.
      put:
        displayName: dfwDraftUpdate
        description: Update a saved firewall configuration.
        body:
          application/xml:
            example: |
              <firewallDraft name="">
                <description></description>
                <preserve></preserve>
                <mode></mode>
                <config>
                  <contextId></contextId>
                  <layer3Sections>
                    <section name="" >
                      <rule id="" disabled="true|false" logged="true|false">
                        <name></name>
                        <action></action>
                        <precedence></precedence>
                      </rule>
                    </section>
                  </layer3Sections>
                  <layer2Sections>
                    <section name="">
                      <rule id="" disabled="true|false" logged="true|false">
                        <name></name>
                        <action></action>
                        <precedence></precedence>
                      </rule>
                    </section>
                  </layer2Sections>
                </config>
              </firewallDraft>
            schema: dfwDraftUpdate
      delete:
        displayName: dfwDraftDelete
        description: Delete a configuration.
      /action/export:
        displayName: dfwConfigExport
        description: |
          Export a Firewall Configuration
          ----
        get:
          displayName: dfwConfigExportRead # update existing dupfix dfwConfigExportExecute dfwConfigExport
          description: Export a configuration.
          queryParameters:
              getLatestForUniversal:
                displayName: getLatestForUniversal
                description: |
                  Set to *true* to export the latest universal draft from a
                  secondary NSX manager.
                type: boolean
                required: false
      /action/import:
        displayName: dfwConfigImport
        description: |
          Import a Firewall Configuration
          -----
        post:
          displayName: dfwConfigImportCreate # update existing dupfix dfwConfigImportExecute dfwConfigImport
          description: Import a configuration.
          body:
            application/xml:
              example: |
                <firewallDraft id="" name="" timestamp="">
                  <description></description>
                  <preserve></preserve>
                  <user></user>
                  <mode></mode>
                  <config timestamp="">
                    <contextId></contextId>
                    <layer3Sections>
                      <section name="" timestamp="">
                        <rule id="" disabled="true|false" logged="true|false">
                          <name></name>
                          <action></action>
                          <precedence></precedence>
                        </rule>
                      </section>
                    </layer3Sections>
                    <layer2Sections>
                      <section name="" timestamp="">
                        <rule id="" disabled="true|false" logged="true|false">
                          <name></name>
                          <action></action>
                          <precedence></precedence>
                        </rule>
                      </section>
                    </layer2Sections>
                    <generationNumber></generationNumber>
                  </config>
                </firewallDraft>
              schema: dfwConfigImport
  /globalroot-0/timeouts:
    displayName: dfwTimeouts
    description: |
      Working with Distributed Firewall Session Timers
      -------
      You can configure session timers (session timeouts) for TCP, UDP, and
      ICMP. There is a default configuration, which applies to all VMs protected by
      Distributed Firewall. You can modify the session timers values of the
      default configuration, but not the **appliedTo** values.

      You can add additional session timer configurations with different
      **appliedTo** configurations.

      Parameter | Description | Comments
      -----|-----|-----
      **appliedTo > value** | The ID of the object on which to apply the timeout settings. | Required. For example VM ID *vm-216*.
      **appliedTo > type** | The type of object on which to apply the timeout settings. | Required. Can be *VirtualMachine* or *Vnic*
      **generationNumber** | Generation number for the configuration. | When updating session timers, you must ensure the latest generation number is included in the request body. 
      **tcpFirstPacket** | The timeout value for the connection after the first packet has been sent. This will be the initial timeout for the connection once a SYN has been sent and the flow is created. | Set to *0* to disable. Valid timer values: *1*-*4320000* seconds. Default is *120*. 
      **tcpOpen** | The timeout value for the connection after a second packet has been transferred. |Set to *0* to disable. Valid timer values: *1*-*4320000* seconds. Default is *30*. 
      **tcpEstablished** | The timeout value for the connection once the connection has become fully established. |Set to *0* to disable. Valid timer values: *1*-*4320000* seconds. Default is *43200*. 
      **tcpClosing** | The timeout value for the connection after the first FIN has been sent. |Set to *0* to disable. Valid timer values: *1*-*4320000* seconds. Default is *120*. 
      **tcpFinWait** | The timeout value for the connection after both FINs have been exchanged and the connection is closed. |Set to *0* to disable. Valid timer values: *1*-*4320000* seconds. Default is *45*. 
      **tcpClosed** | The timeout value for the connection after one endpoint sends an RST. |Set to *0* to disable. Valid timer values: *1*-*4320000* seconds. Default is *20*. 
      **udpFirstPacket** | The timeout value for the connection after the first packet. This will be the initial timeout for the new UDP flow. |Set to *0* to disable. Valid timer values: *1*-*4320000* seconds. Default is *60*. 
      **udpSingle** | The timeout value for the connection if the source host sends more than one packet but the destination host has never sent one back. |Set to *0* to disable. Valid timer values: *1*-*4320000* seconds. Default is *30*. 
      **udpMultiple** | The timeout value for the connection if both hosts have sent packets. |Set to *0* to disable. Valid timer values: *1*-*4320000* seconds. Default is *60*. 
      **icmpFirstPacket** | The timeout value for the connection after the first packet. This will be the initial timeout for the new ICMP flow. |Set to *0* to disable. Valid timer values: *1*-*4320000* seconds. Default is *20*. 
      **icmpErrorReply** | The timeout value for the connection after an ICMP error came back in response to an ICMP packet. |Set to *0* to disable. Valid timer values: *1*-*4320000* seconds. Default is *10*. 
    get:
      displayName: dfwTimeoutsList
      description: |
        Retrieve Distributed Firewall session timer configuration.

        **Method history:**

        Release | Modification
        --------|-------------
        6.3.0 | Method introduced.
      responses:
        200:
          body:
            application/xml:
              example: |
                <firewallTimeoutConfigurations>
                  <firewallTimeoutConfiguration id="1001">
                    <name>Default Session Timers</name>
                    <description>Default Session Timers</description>
                    <appliedToList>
                      <appliedTo>
                        <name>DISTRIBUTED_FIREWALL</name>
                        <value>DISTRIBUTED_FIREWALL</value>
                        <type>DISTRIBUTED_FIREWALL</type>
                        <isValid>true</isValid>
                      </appliedTo>
                    </appliedToList>
                    <generationNumber>1489650711521</generationNumber>
                    <isDefault>true</isDefault>
                    <tcpFirstPacket>120</tcpFirstPacket>
                    <tcpOpen>30</tcpOpen>
                    <tcpEstablished>43200</tcpEstablished>
                    <tcpClosing>120</tcpClosing>
                    <tcpFinWait>45</tcpFinWait>
                    <tcpClosed>20</tcpClosed>
                    <udpFirstPacket>60</udpFirstPacket>
                    <udpSingle>30</udpSingle>
                    <udpMultiple>60</udpMultiple>
                    <icmpFirstPacket>20</icmpFirstPacket>
                    <icmpErrorReply>10</icmpErrorReply>
                  </firewallTimeoutConfiguration>
                </firewallTimeoutConfigurations>
    post:
      displayName: dfwTimeoutCreate
      description: |
        Create a Distributed Firewall session timer configuration.

        **Method history:**

        Release | Modification
        --------|-------------
        6.3.0 | Method introduced.
      body:
        application/xml:
          example: |
            <firewallTimeoutConfiguration>
              <name>new VM timeout</name>
              <appliedToList>
                <appliedTo>
                  <value>vm-217</value>
                  <type>VirtualMachine</type>
                </appliedTo>
              </appliedToList>
              <isDefault>false</isDefault>
              <tcpFirstPacket>180</tcpFirstPacket>
              <tcpOpen>30</tcpOpen>
              <tcpEstablished>43200</tcpEstablished>
              <tcpClosing>180</tcpClosing>
              <tcpFinWait>45</tcpFinWait>
              <tcpClosed>40</tcpClosed>
              <udpFirstPacket>60</udpFirstPacket>
              <udpSingle>30</udpSingle>
              <udpMultiple>60</udpMultiple>
              <icmpFirstPacket>30</icmpFirstPacket>
              <icmpErrorReply>15</icmpErrorReply>
            </firewallTimeoutConfiguration>
    /{configId}:
      displayName: dfwTimeoutConfigId
      description: |
        Working With a Specific Distributed Firewall Session Timer Configuration
        ----
      uriParameters:
        configId:
          displayName: configId
          description: | 
            Session timer configuration ID (**firewallTimeoutConfiguration**
            id). For example, *1004*.
          required: true
      get:
        displayName: dfwTimeoutConfigIdRead
        description: |
          Retrieve the specified Distributed Firewall session timer configuration.

          **Method history:**

          Release | Modification
          --------|-------------
          6.3.0 | Method introduced.
      put:
        displayName: dfwTimeoutConfigIdUpdate
        description: |
          Update the specified Distributed Firewall session timer configuration.

          **Method history:**

          Release | Modification
          --------|-------------
          6.3.0 | Method introduced.
        body:
          application/xml:
            example: |
              <firewallTimeoutConfiguration id="1004">
                <name>new VM timeout</name>
                <appliedToList>
                  <appliedTo>
                    <value>vm-217</value>
                    <type>VirtualMachine</type>
                    <isValid>true</isValid>
                  </appliedTo>
                  <appliedTo>
                    <value>vm-218</value>
                    <type>VirtualMachine</type>
                    <isValid>true</isValid>
                  </appliedTo>
                </appliedToList>
                <generationNumber>1490768692562</generationNumber>
                <isDefault>false</isDefault>
                <tcpFirstPacket>180</tcpFirstPacket>
                <tcpOpen>30</tcpOpen>
                <tcpEstablished>43200</tcpEstablished>
                <tcpClosing>180</tcpClosing>
                <tcpFinWait>45</tcpFinWait>
                <tcpClosed>40</tcpClosed>
                <udpFirstPacket>60</udpFirstPacket>
                <udpSingle>30</udpSingle>
                <udpMultiple>60</udpMultiple>
                <icmpFirstPacket>30</icmpFirstPacket>
                <icmpErrorReply>15</icmpErrorReply>
              </firewallTimeoutConfiguration>
      delete:
        displayName: dfwTimeoutConfigIdDelete
        description: |
          Delete the specified Distributed Firewall session timer configuration.

          **Method history:**

          Release | Modification
          --------|-------------
          6.3.0 | Method introduced.
  /stats/eventthresholds:
    displayName: dfwThresholds
    description: |
      Working With Distributed Firewall Thresholds
      ----
      Configure memory, CPU, and connections per second (CPS) thresholds for
      distributed firewall.
      
      The firewall module generates system events when the memory and CPU
      usage crosses these thresholds.
    get:
      displayName: dfwThresholdsRead
      description: |
        Retrieve threshold configuration for distributed firewall.
      responses:
        200:
          body:
            application/xml:
              example: |
                <eventThresholds>
                  <cpu>
                    <percentValue>80</percentValue>
                  </cpu>
                  <memory>
                    <percentValue>90</percentValue>
                  </memory>
                  <connectionsPerSecond>
                    <value>250000</value>
                  </connectionsPerSecond>
                </eventThresholds>
    put:
      displayName: dfwThresholdsUpdate
      description: |
        Update threshold configuration for distributed firewall.
      body:
        application/xml:
          example: |
            <eventThresholds>
              <cpu>
                <percentValue>80</percentValue>
              </cpu>
              <memory>
                <percentValue>90</percentValue>
              </memory>
              <connectionsPerSecond>
                <value>250000</value>
              </connectionsPerSecond>
            </eventThresholds>
          schema: dfwThresholdsUpdate
  /config/globalconfiguration:
    displayName: dfwPerformance
    description: |
      Working with the Distributed Firewall Global Configuration
      ----------------------------------------------------------
      You can use the following parameters to improve firewall performancer:
      
      * **layer3RuleOptimize** and **layer2RuleOptimize** to turn
      on/off rule optimization.
      * **tcpStrictOption** determines whether or not to drop an established
      TCP connection when the firewall does not see the initial three-way
      handshake. If set to true, the connection will be dropped.
      * **autoDraftDisabled** improves performances when making large numbers
      of changes to firewall rules.
      
      You can disable the auto draft feature by setting **autoDraftDisabled** to
      true. Distributed Firewall saves up to 100 configurations, including
      manually saved drafts (**preserve** parameter can be set to true or
      false) and auto saved drafts (**preserve** parameter is set to false).
      Once 100 configurations are saved, older drafts with the **preserve**
      parameter set to false will be deleted in order to save new
      configurations. You might want to disable the auto drafts feature before
      making large numbers of changes to the firewall rules, to improve
      performance, and to prevent previously saved drafts from being
      overwritten.
      
      Note: The **autoDraftDisabled** parameter does not appear in a GET of the global
      configuration.
    get:
      displayName: dfwPerformanceRead
      description: Retrieve performance configuration for distributed firewall.
      responses:
        200:
          body:
            application/xml:
              example: |
                <globalConfiguration>
                  <layer3RuleOptimize>false</layer3RuleOptimize>
                  <layer2RuleOptimize>true</layer2RuleOptimize>
                  <tcpStrictOption>false</tcpStrictOption>
                </globalConfiguration>
    put:
      displayName: dfwPerformanceUpdate
      description: |
        Update the distributed firewall performance configuration.
        
        **Method history:**
        
        Release | Modification
        --------|-------------
        6.2.3 | Method updated. **autoDraftDisabled** parameter added.
      body:
        application/xml:
          example: |
            <globalConfiguration>
              <layer3RuleOptimize>false</layer3RuleOptimize>
              <layer2RuleOptimize>true</layer2RuleOptimize>
              <tcpStrictOption>false</tcpStrictOption>
              <autoDraftDisabled>true</autoDraftDisabled>
            </globalConfiguration>
          schema: dfwPerformanceUpdate
  /forceSync/{ID}:
    displayName: dfwSync
    description: |
      Synchronize Firewall
      ----
      Synchronize hosts and clusters with the last good configuration in NSX
      Manager database.
    uriParameters:
      ID:
        required: true
        displayName: ID
        description: Specified host or cluster to synchronize
    post:
      displayName: dfwSyncExecute # existing dupfix dfwSync
      description: Force sync host or cluster.
  /{domainID}/enable/{truefalse}:
    displayName: dfwEnableDisable # existing dupfix/change dfwEnableDisableAPI
    description: |
      Enable Firewall
      ----
      Enable or disable firewall components on a cluster.
    uriParameters:
      domainID:
        required: true
        displayName: domainID
        description: Specified cluster
      truefalse:
        required: true
        displayName: truefalse
        description: Set parameter to true/false to enable/disable
    post:
      displayName: dfwEnableDisableToggle # existing dupfix/change dfwEnableDisableAPI
      description: Enable or disable firewall components on a cluster
  /{contextId}/config/ipfix:
    displayName: dfwIPFix
    description: |
      Working with IPFIX
      ---
      Configuring IPFIX exports specific flows directly from Distributed
      Firewall to a flow collector.
    uriParameters:
      contextId:
        displayName: contextId
        description: Specified context
    get:
      displayName: dfwIPFixRead
      description: Query IPFIX configuration.
    put:
      displayName: dfwIPFixUpdate
      description: Configure IPFIX.
      body:
        application/xml:
          example: |
            <ipfixConfiguration>
              <contextId></contextId>
              <ipfixEnabled></ipfixEnabled>
              <observationDomainId></observationDomainId>
              <flowTimeout></flowTimeout>
              <collector>
                <ip></ip>
                <port></port>
              </collector>
            </ipfixConfiguration>
          schema: dfwIPFixUpdate
    delete:
      displayName: dfwIPFixDelete
      description: |
        Deleting IPFIX configuration resets the config to default values
/4.0/services/spoofguard:
  displayName: spoofGuard
  description: |
    Working With SpoofGuard
    ==========
    After synchronizing with the vCenter Server, NSX Manager collects the IP
    addresses of all vCenter guest virtual machines. If a virtual machine has
    been compromised, the IP address can be spoofed and malicious
    transmissions can bypass firewall policies.
    
    You create a SpoofGuard policy for specific networks that allows you to
    authorize the reported IP addresses and alter them if necessary to prevent
    spoofing.  SpoofGuard inherently trusts the MAC addresses of virtual
    machines collected from the VMX files and vSphere SDK. Operating
    separately from Firewall rules, you can use SpoofGuard to block traffic
    determined to be spoofed.
# /4.0/services/spoofguard/policies
  /policies:
    displayName: spoofGuardPolicies
    description: |
      Working with SpoofGuard Policies
      ---------
      You can create a SpoofGuard policy to specify the operation mode for
      specific networks. The system generated policy applies to port groups
      and logical switches not covered by existing SpoofGuard policies.
      
      The operationMode for a SpoofGuard policy can be set to one of the
      following:
      
      * **TOFU** - Automatically trust IP assignments on their first use
      * **MANUAL** - Manually inspect and approve all IP assignments before first
      use
      * **DISABLE** - Disable the SpoofGuard policy
    post:
      displayName: spoofGuardPoliciesCreate
      description: |
        Create a SpoofGuard policy to specify the operation mode for networks.
      body:
        application/xml:
          example: |
            <spoofguardPolicy>
              <name></name>
              <description></description>
              <operationMode></operationMode>
              <enforcementPoint>
                <id></id>
                <name></name>
                <type></type>
              </enforcementPoint>
              <allowLocalIPs></allowLocalIPs>
            </spoofguardPolicy>
          schema: spoofGuardPoliciesCreate
    get:
      displayName: spoofGuardPoliciesList # existing change spoofGuardPoliciesRead
      description: Retrieve information about all SpoofGuard policies.
# /4.0/services/spoofguard/policies/{policyID}
    /{policyID}:
      displayName: spoofGuardPolicy
      description: | 
        Working With a Specific SpoofGuard Policy
        ---
      uriParameters:
        policyID:
          displayName: SpoofGuardPolicyID
          description: SpoofGuard policy ID.
      get:
        displayName: spoofGuardPolicyRead
        description: |
          Retrieve information about the specified SpoofGuard policy.
      put:
        displayName: spoofGuardPolicyUpdate
        description: Modify the specified SpoofGuard policy.
        body:
          application/xml:
            example: |
              <spoofguardPolicy>
                <policyId></policyId>
                <name></name>
                <description></description>
                <operationMode></operationMode>
                <enforcementPoint>
                  <id></id>
                  <name></name>
                  <type></type>
                </enforcementPoint>
                <allowLocalIPs></allowLocalIPs>
              </spoofguardPolicy>
            schema: spoofGuardPolicyUpdate
      delete:
        displayName: spoofGuardPolicyDelete
        description: Delete the specified SpoofGuard policy.
  /{policyID}:
    displayName: SpoofGuardPolicyIP
    description: |
      Perform SpoofGuard Operations on IP Addresses in a Specific Policy
      ---
    uriParameters:
      policyID:
        displayName: SpoofGuardPolicyID
        description: SpoofGuard policy ID.
    post:
      displayName: spoofGuardPolicyIPAction # update existing addition spoofGuardPolicyIPOperations
      description: Approve or publish IP addresses.
      queryParameters:
        vnicId:
          displayName: vnicId
          description: | 
            Perform the specified action on IP addresses for the specified
            vNIC ID.
          required: false
        action:
          displayName: action
          description: |
            Set to *approve* along with specified IP addresses in body to
            approve them, or set to *publish* to publish approved IP
            addresses.
          required: true
      body:
        application/xml:
          example: |
            <spoofguardList>
              <spoofguard>
                <id></id>
                <vnicUuid></vnicUuid>
                <approvedIpAddress>
                  <ipAddress></ipAddress>
                </approvedIpAddress>
                <approvedMacAddress></approvedMacAddress>
                <approvedBy></approvedBy>
                <approvedOn></approvedOn>
                <publishedIpAddress>
                  <ipAddress></ipAddress>
                </publishedIpAddress>
                <publishedMacAddress></publishedMacAddress>
                <publishedBy></publishedBy>
                <publishedOn></publishedOn>
              </spoofguard>
            </spoofguardList>
          schema: spoofGuardPolicyApprove
    get:
      displayName: spoofGuardPolicyIPRead
      description: |
        Retrieve IP addresses for the specified state.
      queryParameters:
        list:
          displayName: list
          description: |
            Specify one of the following states: *ACTIVE*, *INACTIVE*,
            *PUBLISHED*, *UNPUBLISHED*, *REVIEW_PENDING*, *DUPLICATE*.
          required: false
/2.1/app/flow:
  displayName: flowMonitoring
  description: |
    Working with Flow Monitoring
    ========

  /flowstats:
    displayName: flowStats
    description: |
      Working With Flow Monitoring Statistics 
      ----
    get:
      displayName: flowStatsRead
      description: |
        Retrieve flow statistics for a datacenter, port group, VM, or vNIC.
        
        Response values for flow statistics:
        * **blocked** - indicates whether traffic is blocked:
          * 0 - flow allowed
          * 1 - flow blocked
          * 2 - flow blocked by SpoofGuard
        * **protocol** - protocol in flow:
          * 0 - TCP
          * 1 - UDP
          * 2 - ICMP
        * **direction** - direction of flow:
          * 0 - to virtual machine
          * 1 - from virtual machine
        * **controlDirection** - control direction for dynamic TCP traffic:
          * 0 - source -> destination
          * 1 - destination -> source
      queryParameters:
        contextId:
          displayName: contextId
          description: |
            vCenter MOB ID of the datacenter, portgroup, vm, or UUID of the
            vNIC for which traffic flow is to be retrieved.
        flowType:
          displayName: flowType
          description: |
            Type of flow to be retrieved. Possible values are:
            * *TCP_UDP*
            * *LAYER2*
            * *LAYER3*
        startTime:
          displayName: startTime
          description: |
            Flows with start time greater than specified time are retrieved.
        endTime:
          displayName: endTime
          description: |
            Flows with start time less than specified time are retrieved.
        startIndex:
          type: integer
          displayName: startIndex
          description: !include documentation/reuse/startindex
          required: false
          default: 0
        pageSize:
          type: integer
          displayName: pageSize
          description: !include documentation/reuse/pagesize-1024
          required: false
          default: 256
      responses:
        200:
          body:
            application/xml:
              example: |
                <FlowStatsPage>
                  <pagingInfo>
                    <contextId>datacenter-2538</contextId>
                    <flowType>TCP_UDP</flowType>
                    <startTime>1327405883000</startTime>
                    <endTime>1327482600000</endTime>
                    <totalCount>817</totalCount>
                    <startIndex>0</startIndex>
                    <pageSize>2</pageSize>
                  </pagingInfo>
                  <flowStatsTcpUdp>
                    <startTime>1327405883000</startTime>
                    <endTime>1327446000000</endTime>
                    <ruleId>1001</ruleId>
                    <blocked>0</blocked>
                    <protocol>5</protocol>
                    <direction>1</direction>
                    <sessions>1449</sessions>
                    <sourcePackets>1449</sourcePackets>
                    <destinationPackets>0</destinationPackets>
                    <sourceBytes>227493</sourceBytes>
                    <destinationBytes>0</destinationBytes>
                    <networkId>network-2553</networkId>
                    <sourceIp>10.112.199.174</sourceIp>
                    <destinationIp>255.255.255.255</destinationIp>
                    <destinationPort>17500</destinationPort>
                    <controlProtocol></controlProtocol>
                    <controlSourceIp>0.0.0.0</controlSourceIp>
                    <controlDestinationIp>0.0.0.0</controlDestinationIp>
                    <controlDestinationPort>0</controlDestinationPort>
                    <controlDirection>0</controlDirection>
                  </flowStatsTcpUdp>
                  <flowStatsTcpUdp>
                    <startTime>1327405883000</startTime>
                    <endTime>1327446000000</endTime>
                    <ruleId>1001</ruleId>
                    <blocked>0</blocked>
                    <protocol>5</protocol>
                    <direction>1</direction>
                    <sessions>69</sessions>
                    <sourcePackets>69</sourcePackets>
                    <destinationPackets>0</destinationPackets>
                    <sourceBytes>17832</sourceBytes>
                    <destinationBytes>0</destinationBytes>
                    <networkId>network-2553</networkId>
                    <sourceIp>10.112.199.13</sourceIp>
                    <destinationIp>10.112.199.255</destinationIp>
                    <destinationPort>138</destinationPort>
                    <controlProtocol></controlProtocol>
                    <controlSourceIp>0.0.0.0</controlSourceIp>
                    <controlDestinationIp>0.0.0.0</controlDestinationIp>
                    <controlDestinationPort>0</controlDestinationPort>
                    <controlDirection>0</controlDirection>
                  </flowStatsTcpUdp>
                </FlowStatsPage>
    /info:
      displayName: flowStatsInfo
      description: |
        Working With Flow Monitoring Meta-Data
        ----
      get:
        displayName: flowStatsInfoRead
        description: |
          Retrieve flow statistics meta-data.
          
          This method retrieves the following information for each flow type:
          * minimum start time
          * maximum end time
          * total flow count
        responses:
          200:
            body:
              application/xml:
                example: |
                  <FlowStatsInfo>
                    <flowStatsInfoTcpUdp>
                      <minimumStartTime>1327405883000</minimumStartTime>
                      <maximumEndTime>1327482600000</maximumEndTime>
                      <totalCount>817</totalCount>
                    </flowStatsInfoTcpUdp>
                    <flowStatsInfoLayer3>
                      <minimumStartTime>1327405883000</minimumStartTime>
                      <maximumEndTime>1327482600000</maximumEndTime>
                      <totalCount>21</totalCount>
                    </flowStatsInfoLayer3>
                    <flowStatsInfoLayer2>
                    <minimumStartTime>1327405883000</minimumStartTime>
                    <maximumEndTime>1327482600000</maximumEndTime>
                    <totalCount>531</totalCount>
                    </flowStatsInfoLayer2>
                  </FlowStatsInfo>
  /config:
    displayName: flowConfig
    description: |
      Working With Flow Monitoring Configuration
      ----
      
      Flow records generated on all hosts are sent to NSX Manager, which
      consumes the records and displays aggregated information.  Hosts can
      generate large numbers of flow records.  You can configure flow
      monitoring to exclude certain records from collection.  The flow
      configuration applies to all hosts.
      
      * **collectFlows** - if true, flow collection is enabled.
      * **ignoreBlockedFlows** - if true, ignore blocked flows.
      * **ignoreLayer2Flows** - if true, ignore layer 2 flows.
      * **sourceIPs** - source IPs to exclude. For example: 10.112.3.14, 10.112.3.15-10.112.3.18,192.168.1.1/24.
      * **sourceContainer** - source containers to exclude. Containers can contain VM, vNic, IP Set, MAC Set.
      * **destinationIPs** - destination IPs to exclude.
      * **destinationContainer** - destination containers to exclude. Containers can contain VM, vNic, IP Set, MAC Set.
      * **destinationPorts** - destination ports to exclude.
      * **serviceContainers** - service containers to exclude. Container can contain application or application group.
      
      Flow exclusion happens at the host. The following flows are discarded by default:
      * Broadcast IP (255.255.255.255)
      * Local multicast group (224.0.0.0/24)
      * Broadcast MAC address (FF:FF:FF:FF:FF:FF)
    get:
      displayName: flowConfigRead
      description: Retrieve flow monitoring configuration.
      responses:
        200:
          body:
            application/xml:
              example: |
                <FlowConfiguration>
                  <collectFlows>true</collectFlows>
                  <ignoreBlockedFlows>false</ignoreBlockedFlows>
                  <ignoreLayer2Flows>false</ignoreLayer2Flows>
                  <sourceIPs>10.112.3.14, 10.112.3.15-10.112.3.18,192.168.1.1/24</sourceIPs>
                  <sourceContainer>
                    <name>vm1 - Network adapter 1</name>
                    <id>5013bcd8-c666-1e28-c7a9-600da945954f.000</id>
                    <type>Vnic</type>
                  </sourceContainer>
                  <sourceContainer>
                    <name>Large XP-1</name>
                    <id>vm-126</id>
                    <type>VirtualMachine</type>
                  </sourceContainer>
                  <destinationIPs>10.112.3.14, 10.112.3.15-10.112.3.18,192.168.1.1/24</destinationIPs>
                  <destinationContainer>
                    <name>vm2 - Network adapter 2</name>
                    <id>5013bcd8-c666-1e28-c7a9-600da945954f.000</id>
                    <type>Vnic</type>
                  </destinationContainer>
                  <destinationContainer>
                    <name>Small XP-2</name>
                    <id>vm-226</id>
                    <type>VirtualMachine</type>
                  </destinationContainer>
                  <destinationPorts>22, 40-50, 60</destinationPorts>
                  <service>
                    <name>VMware-VDM2.x-Ephemeral</name>
                    <id>application-161</id>
                  </service>
                </FlowConfiguration>
    put:
      displayName: flowsConfigCreate
      description: Update flow monitoring configuration.
      body:
        application/xml:
          example: |
            <FlowConfiguration>
              <collectFlows>true</collectFlows>
              <ignoreBlockedFlows>false</ignoreBlockedFlows>
              <ignoreLayer2Flows>false</ignoreLayer2Flows>
              <sourceIPs>10.112.3.14, 10.112.3.15-10.112.3.18,192.168.1.1/24</sourceIPs>
              <sourceContainer>
                <name>vm1 - Network adapter 1</name>
                <id>5013bcd8-c666-1e28-c7a9-600da945954f.000</id>
                <type>Vnic</type>
              </sourceContainer>
              <sourceContainer>
                <name>Large XP-1</name>
                <id>vm-126</id>
                <type>VirtualMachine</type>
              </sourceContainer>
              <destinationIPs>10.112.3.14, 10.112.3.15-10.112.3.18,192.168.1.1/24</destinationIPs>
              <destinationContainer>
                <name>vm2 - Network adapter 2</name>
                <id>5013bcd8-c666-1e28-c7a9-600da945954f.000</id>
                <type>Vnic</type>
              </destinationContainer>
              <destinationContainer>
                <name>Small XP-2</name>
                <id>vm-226</id>
                <type>VirtualMachine</type>
              </destinationContainer>
              <destinationPorts>22, 40-50, 60</destinationPorts>
              <service>
                <name>VMware-VDM2.x-Ephemeral</name>
                <id>application-161</id>
              </service>
            </FlowConfiguration>
          schema: flowsExcludeCreate
  /{contextId}:
    displayName: flowContext
    description: |
      Working with Flow Configuration for a Specific Context
      ----
    uriParameters:
      contextId:
        displayName: contextId
        description: Context ID.
    delete:
      displayName: flowContextDelete
      description: Delete flow records for the specified context.
/2.1/app/excludelist:
  displayName: dfwExclusion
  description: |
    Exclude Virtual Machines from Firewall Protection
    =========
  get:
    displayName: dfwExclusionRead
    description: Retrieve the set of VMs in the exclusion list.
  /{memberID}:
    displayName: dfwExcludeMember
    description: |
      Working with the Exclusion List
      ---
    uriParameters:
      memberID:
        displayName: memberID
        description: vc-moref-id of a virtual machine.
    put:
      displayName: dfwExclusionUpdate
      description: Add a vm to the exclusion list.
    delete:
      displayName: dfwExclusionDelete
      description: Delete a vm from exclusion list.
/4.0/edges:
  displayName: nsxEdges
  description: |
    Working with NSX Edge
    =======
    There are two types of NSX Edge: Edge services gateway and logical
    (distributed) router.
    
    ### Edge Services Gateway
    
    The services gateway gives you access to all NSX Edge services such as
    firewall, NAT, DHCP, VPN, load balancing, and high availability. You can
    install multiple Edge services gateway virtual appliances in a
    datacenter. Each Edge service gateway virtual appliance can have a
    total of ten uplink and internal network interfaces. 
    
    The internal interfaces connect to secured port groups and act as the
    gateway for all protected virtual machines in the port group. The subnet
    assigned to the internal interface can be a publicly routed IP space or
    a NATed/routed RFC 1918 private space. Firewall rules and other NSX Edge
    services are enforced on traffic between network interfaces.
    
    Uplink interfaces of NSX Edge connect to uplink port groups that have
    access to a shared corporate network or a service that provides access
    layer networking. Multiple external IP addresses can be configured for
    load balancer, site-to-site VPN, and NAT services.
    
    ### Logical (Distributed) Router
    
    The logical router provides East-West distributed routing with tenant IP
    address space and data path isolation. Virtual machines or workloads
    that reside on the same host on different subnets can communicate with
    one another without having to traverse a traditional routing interface.
    
    A logical router can have up to 9 uplink interfaces and up to 990
    internal interfaces.
    
  post:
    displayName: nsxEdgesCreate
    description: |
      You can install NSX Edge as a services gateway or as a logical router.
      
      The **type** parameter determines which type of NSX Edge is deployed:
      *distributedRouter* or *gatewayServices*. If no type is specified, the
      type is *gatewayServices*.
      
      Other parameters for this method will differ depending on which type of
      NSX Edge you are deploying. See the examples and parameter tables for
      more information.
      
      ### NSX Edge: Service Gateway
      
      The NSX Edge installation API copies the NSX Edge OVF from the Edge
      Manager to the specified datastore and deploys an NSX Edge on the given
      datacenter. After the NSX Edge is installed, the virtual machine powers
      on and initializes according to the given network configuration. If an
      appliance is added, it is deployed with the specified configuration.
      
      Installing an NSX Edge instance adds a virtual machine to the vCenter
      Server inventory, you must specify an IP address for the management
      interface, and you may name the NSX Edge instance.
      
      The configuration you specify when you install an NSX Edge is stored in
      the database. If an appliance is added, the configuration is applied to
      it and it is deployed.
      
      NOTE: Do not use hidden/system resource pool IDs as they are not
      supported on the UI.
      
      #### Request Body to Create Edge Services Gateway
      
          <edge>
            <datacenterMoid>datacenter-2</datacenterMoid>
            <name>org1-edge</name>
            <description>Description for the edge gateway</description>
            <tenant>org1</tenant>
            <fqdn>org1edge1</fqdn>
            <vseLogLevel>info</vseLogLevel>
            <enableAesni>false</enableAesni>
            <enableFips>true</enableFips>
            <appliances>
              <applianceSize>compact</applianceSize>
              <enableCoreDump>true</enableCoreDump>
              <appliance>
                <resourcePoolId>resgroup-53</resourcePoolId>
                <datastoreId>datastore-29</datastoreId>
                <hostId>host-28</hostId> 
                <vmFolderId>group-v38</vmFolderId> 
                <customField> 
                  <key>system.service.vmware.vsla.main01</key>
                  <value>string</value>
                </customField>
                <cpuReservation> 
                  <limit>2399</limit>
                  <reservation>500</reservation>
                  <shares>500</shares>
                </cpuReservation>
                <memoryReservation> 
                  <limit>5000</limit>
                  <reservation>500</reservation>
                  <shares>20480</shares>
                </memoryReservation>
              </appliance>
            </appliances>
            <vnics>
              <vnic>
                <index>0</index>
                <name>internal0</name>
                <type>internal</type>
                <portgroupId>dvportgroup-114</portgroupId>
                <addressGroups>
                  <addressGroup>
                    <primaryAddress>192.168.3.1</primaryAddress>
                    <secondaryAddresses>
                      <ipAddress>192.168.3.2</ipAddress>
                      <ipAddress>192.168.3.3</ipAddress>
                    </secondaryAddresses>
                    <subnetMask>255.255.255.0</subnetMask>
                  </addressGroup>
                  <addressGroup>
                    <primaryAddress>192.168.4.1</primaryAddress>
                    <secondaryAddresses>
                      <ipAddress>192.168.4.2</ipAddress>
                      <ipAddress>192.168.4.3</ipAddress>
                    </secondaryAddresses>
                    <subnetPrefixLength>24</subnetPrefixLength>
                  </addressGroup>
                  <addressGroup>
                    <primaryAddress>ffff::1</primaryAddress>
                    <secondaryAddresses>
                      <ipAddress>ffff::2</ipAddress>
                    </secondaryAddresses>
                    <subnetPrefixLength>64</subnetPrefixLength>
                  </addressGroup>
                </addressGroups>
                <macAddress>
                  <edgeVmHaIndex>0</edgeVmHaIndex>
                  <value>00:50:56:01:03:23</value>
                </macAddress>
                <fenceParameter>
                  <key>ethernet0.filter1.param1</key>
                  <value>1</value>
                </fenceParameter>
                <mtu>1500</mtu>
                <enableProxyArp>false</enableProxyArp>
                <enableSendRedirects>true</enableSendRedirects>
                <isConnected>true</isConnected>
                <inShapingPolicy>
                  <averageBandwidth>200000000</averageBandwidth>
                  <peakBandwidth>200000000</peakBandwidth>
                  <burstSize>0</burstSize>
                  <enabled>true</enabled>
                  <inherited>false</inherited>
                </inShapingPolicy>
                <outShapingPolicy>
                  <averageBandwidth>400000000</averageBandwidth>
                  <peakBandwidth>400000000</peakBandwidth>
                  <burstSize>0</burstSize>
                  <enabled>true</enabled>
                  <inherited>false</inherited>
                </outShapingPolicy>
              </vnic>
            </vnics>
            <cliSettings>
              <userName>test</userName>
              <password>test123!</password>
              <remoteAccess>false</remoteAccess>
            </cliSettings>
            <autoConfiguration>
              <enabled>true</enabled>
              <rulePriority>high</rulePriority>
            </autoConfiguration>
            <dnsClient>
              <primaryDns>10.117.0.1</primaryDns>
              <secondaryDns>10.117.0.2</secondaryDns>
              <domainName>vmware.com</domainName>
              <domainName>foo.com</domainName>
            </dnsClient>
            <queryDaemon>
              <enabled>true</enabled>
              <port>5666</port>
            </queryDaemon>
          </edge>
      
      ### NSX Edge: Logical (Distributed) Router
      
      Before installing a logical router, you must prepare the hosts on the
      appropriate clusters. 
      
      The user specified configuration is stored in the database
      and Edge identifier is returned to the user. This identifier must be
      used for future configurations on the given Edge.  If any appliance(s)
      are specified and at least one connected interface/vnic is specified,
      then the appliance(s) are deployed and configuration is applied to them.
      
      It is not possible to set the <ecmp>true</ecmp> property upon creation
      of a distributed logicalrouter Edge and a subsequent API call is
      required to enable ECMP.
      
      DHCP relay settings are not able to be used when creating a distributed
      logical router Edge and a subsequent API call is required to configure
      DHCP relay properties.
      
      #### Request Body to Create Logical (Distributed) Router
      
          <edge>
            <datacenterMoid>datacenter-2</datacenterMoid>
            <type>distributedRouter</type>
            <appliances>
              <appliance>
              <resourcePoolId>resgroup-20</resourcePoolId>
              <datastoreId>datastore-23</datastoreId>
              </appliance>
            </appliances>
            <mgmtInterface>
              <connectedToId>dvportgroup-38</connectedToId>
                <addressGroups> 
                  <addressGroup>
                    <primaryAddress>10.112.196.165</primaryAddress>
                    <subnetMask>255.255.252.0</subnetMask>
                  </addressGroup>
                 </addressGroups>
            </mgmtInterface>
            <interfaces>
              <interface>
                <type>uplink</type>
                <mtu>1500</mtu>
                <isConnected>true</isConnected>
                <addressGroups> 
                  <addressGroup>
                    <primaryAddress>192.168.10.1</primaryAddress>
                    <subnetMask>255.255.255.0</subnetMask>
                  </addressGroup>
                </addressGroups>
                <connectedToId>dvportgroup-39</connectedToId>
              </interface>
              <interface>
                <type>internal</type>
                <mtu>1500</mtu>
                <isConnected>true</isConnected>
                <addressGroups> 
                  <addressGroup>
                    <primaryAddress>192.168.20.1</primaryAddress>
                    <subnetMask>255.255.255.0</subnetMask>
                  </addressGroup>
                </addressGroups>
                <connectedToId>dvportgroup-40</connectedToId>
              </interface>
            </interfaces>
          </edge>
      ### Request and Response Body Parameters for NSX Edge
      
      #### General Request Body Parameters: Edge Services Gateway and Logical (Distributed) Router
      
      Parameter |  Description | Comments 
      ---|---|---
      **datacenterMoid** |Specify vCenter Managed Object Identifier of data center on which edge has to be deployed|Required. 
      **type** | Specify which kind of NSX Edge to deploy. Choice of *distributedRouter* or *gatewayServices*. | Optional. Default is *gatewayServices*.
      **name** |Specify a name for the new NSX Edge.|Optional. Default is *NSX-&lt;edgeId&gt;*. Used as a VM name on vCenter appended by *-&lt;haIndex&gt;*. 
      **description** |NSX Edge description.|Optional. 
      **tenant** |Specify the tenant. Used for syslog messages.|Optional. 
      **fqdn** |Fully Qualified Domain Name for the edge.|Optional. Default is *NSX-&lt;edgeId&gt;* Used to set hostname on the VM. Appended by *-&lt;haIndex&gt;*
      **vseLogLevel** |Defines the log level for log messages captured in the log files.|Optional. Choice of: *emergency*, *alert*, *critical*, *error*, *warning*, *notice*, *debug*. Default is *info*.
      **enableAesni** |Enable support for Advanced Encryption Standard New Instructions on the Edge.|Optional. True/False. Default is *true*.
      **enableCoreDump** |Deploys a new NSX Edge for debug/core-dump purpose.|Optional. Default is false. Enabling core-dump will deploy an extra disk for core-dump files.
      
      #### Appliances Configuration: Edge Services Gateway and Logical (Distributed) Router
      
      Parameter |  Description | Comments 
      ---|---|---
      **applianceSize** |Edge form factor, it determines the NSX Edge size and capability. |Required. Choice of: *compact*, *large*, *quadlarge*, *xlarge*. Default is *compact*.
      **deployAppliances** | Determine whether to deploy appliances. | Default is *true*.
      **appliance** |Appliance configuration details.|Required. Can configure a maximum of two appliances. Until one appliance is configured and NSX Edge VM is deployed successfully, none of the configured features will serve the network.
      **resourcePoolId** |Details of resource pool on which to deploy NSX Edge. |Required. Can be resource pool ID, e.g. *resgroup-15* or cluster ID, e.g. *domain-c41*.
      **datastoreId** |Details of datastore on which to deploy NSX Edge.|Required. 
      **hostId** |ID of the host on which to deploy the NSX Edge.|Optional. 
      **vmFolderId** |The folder in which to save the NSX Edge.|Optional. 
      **customField** |Custom key-value attributes. |Optional. Use custom attributes to associate user-specific meta-information with VMs and managed hosts, stored on vCenter Server.
      **customField > key** |Meta information Key.|Required if customField is specified. 
      **customField > value** |Meta information Value.|Required if customField is specified. 
      **cpuReservation > limit** |Maximum CPU capacity the NSX Edge can use, specified in MHz.|Optional. -1 (unlimited), any positive integer
      **cpuReservation > reservation** |CPU capacity reserved for NSX Edge in MHz.|Optional. 
      **cpuReservation > shares** |Higher value implies NSX Edge has priority when accessing resources.|Optional. 
      **memoryReservation > limit** |Maximum memory the NSX Edge can use, specified in MB.|Optional. -1 (unlimited), any positive integer
      **memoryReservation > reservation** |Memory capacity reserved for NSX Edge in MB.|Optional. 
      **memoryReservation > shares** |Higher value implies NSX Edge has priority when accessing resources.|Optional. 
      **cliSettings > userName** |User name.|Required. length 1-33.
      **cliSettings > password** |Password.|Required. The password must be at least 12 characters long. Must contain at-least 1 uppercase, 1 lowercase, 1 special character and 1 digit. In addition, a character cannot be repeated 3 or more times consectively.
      **cliSettings > remoteAccess** |Enables or disables remote access through SSH. |Required. Relevant firewall rules to allow traffic on port 22 must be opened by user/client
      **autoConfiguration > enabled** |Enable/Disable status of autoConfiguration|Optional. True/False. Default is *true*. If autoConfiguration is enabled, firewall rules are automatically created to allow control traffic. Rules to allow data traffic are not created.  For example, if you are using IPsec VPN, and **autoConfiguration** is *true*, firewall rules will automatically be configured to allow IKE traffic. However, you will need to add additional rules to allow the data traffic for the IPsec tunnel. If HA is enabled, firewall rules are always created, even if **autoConfiguration** is *false*, otherwise both HA appliances will become active.
      **autoConfiguration > rulePriority** |Defines the priority of system-defined rules over user-defined rules.|Optional. High, Low.  Default is *high*.
      **queryDaemon > enabled** |Configure the communication between server load balancer and NSX Edge VM.|Default is *false*.
      **queryDaemon > port** |Defines the port through which the communication happens.|Integer 1-65535. Default is *5666*.
      
      #### DNS Client: Edge Services Gateway and Logical (Distributed) Router 
      
      Parameter |  Description | Comments 
      ---|---|---
      **dnsClient** |Configures the DNS settings of the Edge Services Gateway.|Optional. If the primary/secondary are specified and the DNS service is not specified, the primary/secondary will be used as the default of the DNS service.
      **primaryDns** |Primary DNS IP |
      **secondaryDns** |Secondary DNS IP |
      **domainName** |Domain Name of Edge |
      **domainName** |Secondary Domain Name of Edge |
      
      #### vNIC Parameters: Edge Services Gateway Only
      
      Parameter |  Description | Comments
      ---|---|---
      **vnic** |Configure interface (vNic).|Required. Until one connected vNic is configured, none of the configured features will serve the network.
      **index** |Index of vNic to be configured. Value varies from 0-9. 4094 sub-interfaces can be configured in trunk mode.|Required. 
      **name** |Name of the vNic.|Optional. System provides default names: vnic0...vnic9.
      **label** |Label for the vNic.|Optional. System provides default labels: vNic_0...vNic_9.
      **type** |Type of interface connected to vNic.|Optional. Choice of: *Uplink*, *Internal*, *TRUNK*. Default is *Internal*. *TRUNK* should be specified when sub-interfaces are configured.
      **portgroupId** |Connect NSX Edge to the network through this port group.|Required. Choice of: *portgroupId* or *virtualWireId*. *portgroupId* needs to be defined if *isConnected=true*
      **addressGroup** |Address Group assigned to vNic.|Required. More than one addressGroup/subnets can be assigned to the vNic.
      **primaryAddress** |Primary Address of Edge Interface.|Required. IPv4 and IPv6 addresses are supported.
      **secondaryAddresses > ipAddress** |IP assigned to interface.|Optional. One or more **ipAddress** parameters are allowed, to enable assigning multiple IP addresses to a vNic, for example, for load balancing, NAT, VPN. At least one is required if **secondaryAddresses** is specified. 
      **subnetMask** or **subnetPrefixLength** |Subnet mask or prefix value.  |Required. Either **subnetMask** or **subnetPrefixLength** should be provided. When both are provided then **subnetprefixLength** is ignored.
      **macAddress** |Option to manually specify the MAC address. |Optional.  Managed by vCenter if not provided.
      **macAddress > edgeVmHaIndex** |HA index of the Edge VM. |Required. 0 or 1.
      **macAddress > value** |Value of the MAC address.|Optional. Ensure that MAC addresses provided are unique within the given layer 2 domain.
      **vnic > mtu** |The maximum transmission value for the data packets.|Optional.  Default is *1500*.
      **enableProxyArp** |Enables proxy ARP. Do not use this flag unless you want NSX Edge to proxy ARP for all configured subnets.  |Optional.  True/False. Default is *false*.
      **enableSendRedirects** |Enables ICMP redirect. |Optional. True/False.  Default is *true*.
      **isConnected** |Sets if the interface is connected to the port group network. |Optional. True/False. Default is *false*. **portgroupId** needs to be defined if *isConnected=true*.
      **inShapingPolicy** |Configure Incoming Traffic.|Optional. 
      **outShapingPolicy** |Configure Outgoing Traffic.|Optional. 
      **averageBandwidth**<br>(inShapingPolicy or outShapingPolicy) |Sets average bandwidth for traffic.|Optional. 
      **peakBandwidth**<br>(inShapingPolicy or outShapingPolicy) |Sets peak bandwidth for traffic.|Required. 
      **burstSize**<br>(inShapingPolicy or outShapingPolicy) |Sets the burst size of the interface.|Required. 
      **enabled**<br>(inShapingPolicy or outShapingPolicy) |Enable/disable status of this traffic policy.|Required. 
      **inherited**<br>(inShapingPolicy or outShapingPolicy) |Determine whether properties should be inherited to the vNic from the port group.|Required. 
      
      #### HA (Management) Interfaces and Interfaces Configuration: Logical (Distributed) Router Only
      
      Parameter |  Description | Comments 
      ---|---|---
      **mgmtInterface** | High availability interface configuration. Interface index 0 is assigned. | Required.
      **interface** | Interface configuration. 1-9 are reserved for uplinks, 10-999 are used for internal interfaces. | Optional. Can be added after logical router creation.
      **connectedToId**<br>(mgmtInterface or interface) | Managed Object ID of logical switch or port group. | For example, *virtualwire-1* or *dvportgroup-50*. Logical router interfaces do not support legacy port groups. 
      **name**<br>(mgmtInterface or interface) | Name assigned to interface. | Optional.
      **addressGroup**<br>(mgmtInterface or interface) |Address Group assigned to interface. |Required. Only one **addressGroup** can be configured on each logical router **mgmtInterface** or **interface**.
      **primaryAddress**<br>(mgmtInterface or interface) |Primary Address of interface. |Required. Secondary Addresses are not supported on logical routers. Address must be IPv4.
      **subnetMask** or **subnetPrefixLength**<br>(mgmtInterface or interface) |Subnet mask or prefix value.  |Required. Either **subnetMask** or **subnetPrefixLength** should be provided. When both are provided then **subnetprefixLength** is ignored.
      **mtu**<br>(mgmtInterface or interface) |The maximum transmission value for the data packets. |Optional. Default is 1500.
      **type** | Type of interface. | Required. Choice of *uplink* or *internal*. 
    queryParameters:
      isUniversal:
        displayName: isUniversal
        description: |
          Set to "true" when creating a universal logical router. Note the
          **type** in the request body must be *distributedRouter*.
        type: boolean
        required: false
    body:
      application/xml:
        example: |
          <edge>
            <datacenterMoid>datacenter-2</datacenterMoid>
            <name>org1-edge</name>
            <description>Description for the edge gateway</description>
            <tenant>org1</tenant>
            <fqdn>org1edge1</fqdn>
            <vseLogLevel>info</vseLogLevel>
            <enableAesni>false</enableAesni>
            <enableFips>true</enableFips>
            <appliances>
              <applianceSize>compact</applianceSize>
              <enableCoreDump>true</enableCoreDump>
              <appliance>
                <resourcePoolId>resgroup-53</resourcePoolId>
                <datastoreId>datastore-29</datastoreId>
                <hostId>host-28</hostId> 
                <vmFolderId>group-v38</vmFolderId> 
                <customField> 
                  <key>system.service.vmware.vsla.main01</key>
                  <value>string</value>
                </customField>
                <cpuReservation> 
                  <limit>2399</limit>
                  <reservation>500</reservation>
                  <shares>500</shares>
                </cpuReservation>
                <memoryReservation> 
                  <limit>5000</limit>
                  <reservation>500</reservation>
                  <shares>20480</shares>
                </memoryReservation>
              </appliance>
            </appliances>
            <vnics>
              <vnic>
                <index>0</index>
                <name>internal0</name>
                <type>internal</type>
                <portgroupId>dvportgroup-114</portgroupId>
                <addressGroups>
                  <addressGroup>
                    <primaryAddress>192.168.3.1</primaryAddress>
                    <secondaryAddresses>
                      <ipAddress>192.168.3.2</ipAddress>
                      <ipAddress>192.168.3.3</ipAddress>
                    </secondaryAddresses>
                    <subnetMask>255.255.255.0</subnetMask>
                  </addressGroup>
                  <addressGroup>
                    <primaryAddress>192.168.4.1</primaryAddress>
                    <secondaryAddresses>
                      <ipAddress>192.168.4.2</ipAddress>
                      <ipAddress>192.168.4.3</ipAddress>
                    </secondaryAddresses>
                    <subnetPrefixLength>24</subnetPrefixLength>
                  </addressGroup>
                  <addressGroup>
                    <primaryAddress>ffff::1</primaryAddress>
                    <secondaryAddresses>
                      <ipAddress>ffff::2</ipAddress>
                    </secondaryAddresses>
                    <subnetPrefixLength>64</subnetPrefixLength>
                  </addressGroup>
                </addressGroups>
                <macAddress>
                  <edgeVmHaIndex>0</edgeVmHaIndex>
                  <value>00:50:56:01:03:23</value>
                </macAddress>
                <fenceParameter>
                  <key>ethernet0.filter1.param1</key>
                  <value>1</value>
                </fenceParameter>
                <mtu>1500</mtu>
                <enableProxyArp>false</enableProxyArp>
                <enableSendRedirects>true</enableSendRedirects>
                <isConnected>true</isConnected>
                <inShapingPolicy>
                  <averageBandwidth>200000000</averageBandwidth>
                  <peakBandwidth>200000000</peakBandwidth>
                  <burstSize>0</burstSize>
                  <enabled>true</enabled>
                  <inherited>false</inherited>
                </inShapingPolicy>
                <outShapingPolicy>
                  <averageBandwidth>400000000</averageBandwidth>
                  <peakBandwidth>400000000</peakBandwidth>
                  <burstSize>0</burstSize>
                  <enabled>true</enabled>
                  <inherited>false</inherited>
                </outShapingPolicy>
              </vnic>
            </vnics>
            <cliSettings>
              <userName>test</userName>
              <password>test123!</password>
              <remoteAccess>false</remoteAccess>
            </cliSettings>
            <autoConfiguration>
              <enabled>true</enabled>
              <rulePriority>high</rulePriority>
            </autoConfiguration>
            <dnsClient>
              <primaryDns>10.117.0.1</primaryDns>
              <secondaryDns>10.117.0.2</secondaryDns>
              <domainName>vmware.com</domainName>
              <domainName>foo.com</domainName>
            </dnsClient>
            <queryDaemon>
              <enabled>true</enabled>
              <port>5666</port>
            </queryDaemon>
          </edge>
        schema: nsxEdgesCreate
  get:
    displayName: nsxEdgesRead
    description: |
      Retrieve a list of all NSX Edges in your inventory. You can use the query
      parameters to filter results.
    queryParameters:
      datacenter:
        displayName: datacenter
        description: Retrieve Edges by datacenter MoId.
        required: false
      tenant:
        displayName: tenant
        description: Retrieve Edges on specified tenant (by tenant ID).
        required: false
      pg:
        displayName: pg
        description: |
          Retrieve Edges with one interface on specified port group (by port
          group MoId).
        required: false
  /{edgeId}:
    displayName: nsxEdge
    description: |
      Working With a Specific NSX Edge
      ------
    uriParameters:
      edgeId:
        required: true
        displayName: edgeId
        description: Specify the ID of the edge in *edgeId*.
    post:
      displayName: nsxEdgeCreate
      description: Manage NSX Edge.
      queryParameters:
        action:
          displayName: action
          required: true
          description: |
            Options include:
              * *forcesync* - Resync of the edge
              * *redeploy* - Redeply the edge
              * *upgrade* - Upgrade the edge to a newer version
    get:
      displayName: nsxEdgeRead
      description: |
        Retrieve information about the specified NSX Edge.
        
        **Method history:**
        
        Release | Modification
        --------|-------------
        6.2.3 | Method updated. **haAdminState**, **configuredResourcePool**, **configuredDataStore**, **configuredHost**, **configuredVmFolder** parameters added. 
      queryParameters:
        isUniversal:
          displayName: isUniversal
          description: |
            Filter output to display only universal logical routers.
          type: boolean
          required: false
    put:
      displayName: nsxEdgeUpdate
      description: |
        Update the NSX Edge configuration.
        
        **Method history:**
        
        Release | Modification
        --------|-------------
        6.2.3 | Method updated. **haAdminState** parameter added.
        6.3.0 | Method updated. **dnatMatchSourceAddress**, **snatMatchDestinationAddress**, **dnatMatchSourcePort**, **snatMatchDestinationPort** parameters added. <br>**protocol**, **originalPort**, and **translatedPort** now supported in SNAT rules.
      body:
        application/xml:
          example: |
            <edge>
              <id></id>
              <description></description>
              <datacenterMoid></datacenterMoid>
              <name></name>
              <type></type>
              <fqdn></fqdn>
              <enableAesni></enableAesni>
              <enableFips></enableFips>
              <vseLogLevel></vseLogLevel>
              <vnics>
                <vnic>
                  <index></index>
                  <name></name>
                  <type></type>
                  <portgroupId></portgroupId>
                  <addressGroups>
                    <addressGroup>
                      <primaryAddress></primaryAddress>
                      <secondaryAddresses>
                        <ipAddress></ipAddress>
                      </secondaryAddresses>
                      <subnetMask></subnetMask>
                    </addressGroup>
                  </addressGroups>
                  <mtu></mtu>
                  <enableProxyArp></enableProxyArp>
                  <enableSendRedirects></enableSendRedirects>
                  <isConnected></isConnected>
                  <inShapingPolicy>
                    <averageBandwidth></averageBandwidth>
                    <peakBandwidth></peakBandwidth>
                    <burstSize></burstSize>
                    <enabled></enabled>
                    <inherited></inherited>
                  </inShapingPolicy>
                  <outShapingPolicy>
                    <averageBandwidth></averageBandwidth>
                    <peakBandwidth></peakBandwidth>
                    <burstSize></burstSize>
                    <enabled></enabled>
                    <inherited></inherited>
                  </outShapingPolicy>
                </vnic>
              </vnics>
              <appliances>
                <applianceSize></applianceSize>
                <appliance>
                  <haAdminState></haAdminState>
                  <resourcePoolId></resourcePoolId>
                  <datastoreId></datastoreId>
                  <vmFolderId></vmFolderId>
                </appliance>
              </appliances>
              <cliSettings>
                <remoteAccess></remoteAccess>
                <userName></userName>
              </cliSettings>
              <features>
                <firewall>
                  <defaultPolicy>
                    <action></action>
                    <loggingEnabled></loggingEnabled>
                  </defaultPolicy>
                  <firewallRules>
                    <firewallRule>
                      <id></id>
                      <ruleTag></ruleTag>
                      <name></name>
                      <ruleType></ruleType>
                      <source>
                        <exclude></exclude>
                        <groupingObjectId></groupingObjectId>
                      </source>
                      <destination></destination>
                      <application>
                        <applicationId></applicationId>
                      </application>
                      <action></action>
                      <enabled></enabled>
                      <loggingEnabled></loggingEnabled>
                      <matchTranslated></matchTranslated>
                    </firewallRule>
                  </firewallRules>
                </firewall>
                <routing>
                  <staticRouting>
                    <defaultRoute>
                      <vnic></vnic>
                      <gatewayAddress></gatewayAddress>
                      <description></description>
                    </defaultRoute>
                    <staticRoutes>
                      <route>
                        <vnic></vnic>
                        <network></network>
                        <nextHop></nextHop>
                        <type></type>
                      </route>
                    </staticRoutes>
                  </staticRouting>
                  <ospf>
                    <enabled></enabled>
                  </ospf>
                </routing>
                <highAvailability>
                  <enabled></enabled>
                  <declareDeadTime></declareDeadTime>
                  <logging>
                    <enable></enable>
                    <logLevel></logLevel>
                  </logging>
                </highAvailability>
                <syslog>
                  <protocol></protocol>
                  <serverAddresses>
                    <ipAddress></ipAddress>
                  </serverAddresses>
                </syslog>
                <ipsec>
                  <enabled></enabled>
                  <logging>
                    <enable></enable>
                    <logLevel></logLevel>
                  </logging>
                  <sites>
                    <site>
                      <enabled></enabled>
                      <name></name>
                      <localId></localId>
                      <localIp></localIp>
                      <peerId></peerId>
                      <encryptionAlgorithm></encryptionAlgorithm>
                      <mtu></mtu>
                      <enablePfs></enablePfs>
                      <dhGroup></dhGroup>
                      <localSubnets>
                        <subnet></subnet>
                      </localSubnets>
                      <peerSubnets>
                        <subnet></subnet>
                      </peerSubnets>
                      <psk></psk>
                      <authenticationMode></authenticationMode>
                    </site>
                  </sites>
                  <global>
                    <caCertificates/>
                    <crlCertificates/>
                  </global>
                </ipsec>
                <dhcp>
                  <enabled></enabled>
                  <staticBindings>
                    <staticBinding>
                      <autoConfigureDNS></autoConfigureDNS>
                      <bindingId></bindingId>
                      <vmId></vmId>
                      <vnicId></vnicId>
                      <hostname></hostname>
                      <ipAddress></ipAddress>
                      <defaultGateway></defaultGateway>
                      <leaseTime></leaseTime>
                    </staticBinding>
                  </staticBindings>
                  <ipPools>
                    <ipPool>
                      <autoConfigureDNS></autoConfigureDNS>
                      <poolId></poolId>
                      <ipRange></ipRange>
                      <defaultGateway></defaultGateway>
                      <leaseTime></leaseTime>
                    </ipPool>
                  </ipPools>
                  <logging>
                    <enable></enable>
                    <logLevel></logLevel>
                  </logging>
                </dhcp>
                <nat>
                  <natRules>
                    <natRule>
                      <ruleId></ruleId>
                      <ruleTag></ruleTag>
                      <ruleType></ruleType>
                      <action>dnat</action>
                      <vnic></vnic>
                      <originalAddress></originalAddress>
                      <translatedAddress></translatedAddress>
                      <dnatMatchSourceAddress></dnatMatchSourceAddress>
                      <loggingEnabled></loggingEnabled>
                      <enabled></enabled>
                      <protocol></protocol>
                      <originalPort></originalPort>
                      <translatedPort></translatedPort>
                      <dnatMatchSourcePort></dnatMatchSourcePort>
                    </natRule>
                  </natRules>
                </nat>
              </features>
              <autoConfiguration>
                <enabled></enabled>
                <rulePriority></rulePriority>
              </autoConfiguration>
            </edge>
          schema: nsxEdgeUpdate
    delete:
      displayName: nsxEdgeDelete
      description: |
        Delete specified NSX Edge configuration. Associated appliances are
        also deleted.
    /dnsclient:
      displayName: edgeDnsClient # existing dupfix dns
      description: |
        Working with DNS Client Configuration
        ----
      put:
        displayName: edgeDnsClientUpdate # existing reorg/dupfix nsxEdgeDnsUpdate
        description: Update Edge DNS settings.
        body:
          application/xml:
            example: |
              <dnsClient>
                <primaryDns></primaryDns>
                <secondaryDns></secondaryDns>
                <domainName></domainName>
              </dnsClient>
            schema: edgeDnsClientUpdate
    /aesni:
      displayName: aesni
      description: |
        Working with AESNI 
        ----
      post:
        displayName: aesniCreate
        description: Modify AESNI setting.
        queryParameters:
          enable:
            type: boolean
            required: true
            displayName: enable
    /coredump:
      displayName: coreDump
      description: |
        Working With Core Dumps
        -----
        Enabling core-dump feature results in deployment of built-in extra disk
        to save core-dump files. Disabling detaches the disk.
      post:
        displayName: coreDumpCreate
        description: Modify core dump setting.
    /fips:
      displayName: fips
      description: |
        Working with FIPS on NSX Edge
        ----
      post:
        displayName: fipsCreate
        description: Modify FIPS setting.
        queryParameters:
          enable:
            type: boolean
            required: true
            displayName: enable
            description: | 
              Choice of *true* or *false*. Changing the FIPS mode will reboot
              the NSX Edge appliance.
    /logging:
      displayName: logging
      description: |
        Working With NSX Edge Logs
        -----
      post:
        displayName: loggingCreate
        description: Modify log setting.
        queryParameters:
          level:
            displayName: level
            description: Logging level.
    /summary:
      displayName: summary
      description: |
        Working With NSX Edge Summary
        ----
      get:
        displayName: summaryRead
        description: |
          Retrieve details about the specified NSX Edge.

          **Method history:**

          Release | Modification
          --------|-------------
          6.3.0 | Method updated. **enableFips** parameter added to **appliancesSummary**.
        responses:
          200:
            body:
              application/xml:
                example: |
                  <edgeSummary>
                    <objectId>edge-3</objectId>
                    <objectTypeName>Edge</objectTypeName>
                    <vsmUuid>423A993F-BEE6-1285-58F1-54E48D508D90</vsmUuid>
                    <nodeId>916287b3-761d-430b-8ab2-83878dfe3e7f</nodeId>
                    <revision>9</revision>
                    <type>
                      <typeName>Edge</typeName>
                    </type>
                    <name>Perimeter-Gateway-01</name>
                    <clientHandle></clientHandle>
                    <extendedAttributes/>
                    <isUniversal>false</isUniversal>
                    <universalRevision>0</universalRevision>
                    <id>edge-3</id>
                    <state>deployed</state>
                    <edgeType>gatewayServices</edgeType>
                    <datacenterMoid>datacenter-21</datacenterMoid>
                    <datacenterName>Datacenter Site A</datacenterName>
                    <tenantId>default</tenantId>
                    <apiVersion>4.0</apiVersion>
                    <recentJobInfo>
                      <jobId>jobdata-35884</jobId>
                      <status>SUCCESS</status>
                    </recentJobInfo>
                    <edgeStatus>GREEN</edgeStatus>
                    <numberOfConnectedVnics>2</numberOfConnectedVnics>
                    <appliancesSummary>
                      <vmVersion>6.2.4</vmVersion>
                      <vmBuildInfo>6.2.4-4259031</vmBuildInfo>
                      <applianceSize>compact</applianceSize>
                      <fqdn>Perimeter-Gateway-01</fqdn>
                      <numberOfDeployedVms>1</numberOfDeployedVms>
                      <activeVseHaIndex>0</activeVseHaIndex>
                      <vmMoidOfActiveVse>vm-391</vmMoidOfActiveVse>
                      <vmNameOfActiveVse>Perimeter-Gateway-01-0</vmNameOfActiveVse>
                      <hostMoidOfActiveVse>host-203</hostMoidOfActiveVse>
                      <hostNameOfActiveVse>esxmgt-02a.corp.local</hostNameOfActiveVse>
                      <resourcePoolMoidOfActiveVse>resgroup-42</resourcePoolMoidOfActiveVse>
                      <resourcePoolNameOfActiveVse>Resources</resourcePoolNameOfActiveVse>
                      <dataStoreMoidOfActiveVse>datastore-29</dataStoreMoidOfActiveVse>
                      <dataStoreNameOfActiveVse>ds-site-a-nfs01</dataStoreNameOfActiveVse>
                      <statusFromVseUpdatedOn>1487375637539</statusFromVseUpdatedOn>
                      <communicationChannel>msgbus</communicationChannel>
                      <deployAppliances>true</deployAppliances>
                      <enableFips>false</enableFips>
                    </appliancesSummary>
                    <featureCapabilities>
                      <timestamp>1487375669338</timestamp>
                      <featureCapability>
                        <service>dhcp</service>
                        <isSupported>true</isSupported>
                        <permission>
                          <accessPermission>
                            <viewPermission>true</viewPermission>
                            <managePermission>true</managePermission>
                          </accessPermission>
                          <isLicensed>true</isLicensed>
                        </permission>
                        <configurationLimit>
                          <key>MAX_POOL_AND_BINDINGS</key>
                          <value>2048</value>
                        </configurationLimit>
                      </featureCapability>
                      <featureCapability>
                        <service>syslog</service>
                        <isSupported>true</isSupported>
                        <permission>
                          <accessPermission>
                            <viewPermission>true</viewPermission>
                            <managePermission>true</managePermission>
                          </accessPermission>
                          <isLicensed>true</isLicensed>
                        </permission>
                        <configurationLimit>
                          <key>MAX_SERVER_IPS</key>
                          <value>2</value>
                        </configurationLimit>
                      </featureCapability>
                      <featureCapability>
                        <service>bridging</service>
                        <isSupported>true</isSupported>
                        <permission>
                          <accessPermission>
                            <viewPermission>true</viewPermission>
                            <managePermission>true</managePermission>
                          </accessPermission>
                          <isLicensed>true</isLicensed>
                        </permission>
                        <configurationLimit>
                          <key>MAX_BRIDGES</key>
                          <value>500</value>
                        </configurationLimit>
                      </featureCapability>
                      <featureCapability>
                        <service>nat</service>
                        <isSupported>true</isSupported>
                        <permission>
                          <accessPermission>
                            <viewPermission>true</viewPermission>
                            <managePermission>true</managePermission>
                          </accessPermission>
                          <isLicensed>true</isLicensed>
                        </permission>
                        <configurationLimit>
                          <key>MAX_RULES</key>
                          <value>2048</value>
                        </configurationLimit>
                      </featureCapability>
                      <featureCapability>
                        <service>l2vpn</service>
                        <isSupported>false</isSupported>
                        <permission>
                          <accessPermission>
                            <viewPermission>true</viewPermission>
                            <managePermission>true</managePermission>
                          </accessPermission>
                          <isLicensed>false</isLicensed>
                        </permission>
                      </featureCapability>
                      <featureCapability>
                        <service>ipsec</service>
                        <isSupported>true</isSupported>
                        <permission>
                          <accessPermission>
                            <viewPermission>true</viewPermission>
                            <managePermission>true</managePermission>
                          </accessPermission>
                          <isLicensed>true</isLicensed>
                        </permission>
                        <configurationLimit>
                          <key>MAX_TUNNELS</key>
                          <value>64</value>
                        </configurationLimit>
                        <configurationLimit>
                          <key>MAX_TUNNELS_COMPACT</key>
                          <value>512</value>
                        </configurationLimit>
                        <configurationLimit>
                          <key>MAX_TUNNELS_LARGE</key>
                          <value>1600</value>
                        </configurationLimit>
                        <configurationLimit>
                          <key>MAX_TUNNELS_QUADLARGE</key>
                          <value>4096</value>
                        </configurationLimit>
                        <configurationLimit>
                          <key>MAX_TUNNELS_XLARGE</key>
                          <value>6000</value>
                        </configurationLimit>
                      </featureCapability>
                      <featureCapability>
                        <service>systemControl</service>
                        <isSupported>true</isSupported>
                        <permission>
                          <accessPermission>
                            <viewPermission>true</viewPermission>
                            <managePermission>true</managePermission>
                          </accessPermission>
                          <isLicensed>true</isLicensed>
                        </permission>
                      </featureCapability>
                      <featureCapability>
                        <service>gslb</service>
                        <isSupported>true</isSupported>
                        <permission>
                          <accessPermission>
                            <viewPermission>true</viewPermission>
                            <managePermission>true</managePermission>
                          </accessPermission>
                          <isLicensed>true</isLicensed>
                        </permission>
                        <configurationLimit>
                          <key>MAX_GSLB_SITES</key>
                          <value>10</value>
                        </configurationLimit>
                        <configurationLimit>
                          <key>MAX_GSLB_IPS</key>
                          <value>32</value>
                        </configurationLimit>
                        <configurationLimit>
                          <key>MAX_GSLB_POOLs</key>
                          <value>32</value>
                        </configurationLimit>
                        <configurationLimit>
                          <key>MAX_MEMBERS_PER_POOL</key>
                          <value>10</value>
                        </configurationLimit>
                        <configurationLimit>
                          <key>MAX_GSLB_MONITORS</key>
                          <value>128</value>
                        </configurationLimit>
                        <configurationLimit>
                          <key>MAX_MONITOR_INSTANCES</key>
                          <value>320</value>
                        </configurationLimit>
                      </featureCapability>
                      <featureCapability>
                        <service>edge</service>
                        <isSupported>true</isSupported>
                        <permission>
                          <accessPermission>
                            <viewPermission>true</viewPermission>
                            <managePermission>true</managePermission>
                          </accessPermission>
                          <isLicensed>true</isLicensed>
                        </permission>
                        <configurationLimit>
                          <key>MAX_APPLIANCES</key>
                          <value>2</value>
                        </configurationLimit>
                      </featureCapability>
                      <featureCapability>
                        <service>firewall</service>
                        <isSupported>true</isSupported>
                        <permission>
                          <accessPermission>
                            <viewPermission>true</viewPermission>
                            <managePermission>true</managePermission>
                          </accessPermission>
                          <isLicensed>true</isLicensed>
                        </permission>
                        <configurationLimit>
                          <key>MAX_RULES</key>
                          <value>2048</value>
                        </configurationLimit>
                      </featureCapability>
                      <featureCapability>
                        <service>sslvpn</service>
                        <isSupported>true</isSupported>
                        <permission>
                          <accessPermission>
                            <viewPermission>true</viewPermission>
                            <managePermission>true</managePermission>
                          </accessPermission>
                          <isLicensed>true</isLicensed>
                        </permission>
                        <configurationLimit>
                          <key>MAX_SSLVPN_IPPOOLS</key>
                          <value>4</value>
                        </configurationLimit>
                        <configurationLimit>
                          <key>MAX_SSLVPN_PRIVATE_NETWORK</key>
                          <value>16</value>
                        </configurationLimit>
                        <configurationLimit>
                          <key>MAX_SSLVPN_USERS</key>
                          <value>1024</value>
                        </configurationLimit>
                        <configurationLimit>
                          <key>MAX_SSLVPN_AUTH_SERVERS</key>
                          <value>4</value>
                        </configurationLimit>
                        <configurationLimit>
                          <key>MAX_SSLVPN_INSTALLATION_PACKAGES</key>
                          <value>2</value>
                        </configurationLimit>
                        <configurationLimit>
                          <key>MAX_SSLVPN_WEB_RESOURCE</key>
                          <value>16</value>
                        </configurationLimit>
                        <configurationLimit>
                          <key>MAX_SSLVPN_SCRIPTS</key>
                          <value>4</value>
                        </configurationLimit>
                      </featureCapability>
                      <featureCapability>
                        <service>highAvailability</service>
                        <isSupported>true</isSupported>
                        <permission>
                          <accessPermission>
                            <viewPermission>true</viewPermission>
                            <managePermission>true</managePermission>
                          </accessPermission>
                          <isLicensed>true</isLicensed>
                        </permission>
                        <configurationLimit>
                          <key>MAX_MANAGEMENT_IPS</key>
                          <value>2</value>
                        </configurationLimit>
                      </featureCapability>
                      <featureCapability>
                        <service>dns</service>
                        <isSupported>true</isSupported>
                        <permission>
                          <accessPermission>
                            <viewPermission>true</viewPermission>
                            <managePermission>true</managePermission>
                          </accessPermission>
                          <isLicensed>true</isLicensed>
                        </permission>
                        <configurationLimit>
                          <key>MAX_SERVER_IPS</key>
                          <value>2</value>
                        </configurationLimit>
                        <configurationLimit>
                          <key>MAX_CACHE_SIZE</key>
                          <value>8192</value>
                        </configurationLimit>
                        <configurationLimit>
                          <key>MAX_VIEWS</key>
                          <value>100</value>
                        </configurationLimit>
                        <configurationLimit>
                          <key>MAX_ZONES_PER_VIEW</key>
                          <value>1000</value>
                        </configurationLimit>
                        <configurationLimit>
                          <key>MAX_RECORDS_PER_ZONE</key>
                          <value>1000</value>
                        </configurationLimit>
                        <configurationLimit>
                          <key>MAX_VALUES_PER_RECORD</key>
                          <value>100</value>
                        </configurationLimit>
                      </featureCapability>
                      <featureCapability>
                        <service>loadBalancer</service>
                        <isSupported>true</isSupported>
                        <permission>
                          <accessPermission>
                            <viewPermission>true</viewPermission>
                            <managePermission>true</managePermission>
                          </accessPermission>
                          <isLicensed>true</isLicensed>
                        </permission>
                        <configurationLimit>
                          <key>MAX_MEMBERS_IN_POOL</key>
                          <value>32</value>
                        </configurationLimit>
                        <configurationLimit>
                          <key>MAX_MONITOR_INSTANCES</key>
                          <value>320</value>
                        </configurationLimit>
                        <configurationLimit>
                          <key>MAX_POOLS</key>
                          <value>64</value>
                        </configurationLimit>
                        <configurationLimit>
                          <key>MAX_VIRTUAL_SERVERS</key>
                          <value>64</value>
                        </configurationLimit>
                      </featureCapability>
                      <featureCapability>
                        <service>routing</service>
                        <isSupported>true</isSupported>
                        <permission>
                          <accessPermission>
                            <viewPermission>true</viewPermission>
                            <managePermission>true</managePermission>
                          </accessPermission>
                          <isLicensed>true</isLicensed>
                        </permission>
                        <configurationLimit>
                          <key>MAX_ROUTES</key>
                          <value>2048</value>
                        </configurationLimit>
                      </featureCapability>
                      <featureCapability>
                        <service>vnics</service>
                        <isSupported>true</isSupported>
                        <permission>
                          <accessPermission>
                            <viewPermission>true</viewPermission>
                            <managePermission>true</managePermission>
                          </accessPermission>
                          <isLicensed>true</isLicensed>
                        </permission>
                        <configurationLimit>
                          <key>MAX_SUB_INTERFACES</key>
                          <value>200</value>
                        </configurationLimit>
                      </featureCapability>
                    </featureCapabilities>
                    <hypervisorAssist>false</hypervisorAssist>
                    <allowedActions>
                      <string>Change Log Level</string>
                      <string>Add Edge Appliance</string>
                      <string>Delete Edge Appliance</string>
                      <string>Edit Edge Appliance</string>
                      <string>Edit CLI Credentials</string>
                      <string>Change edge appliance size</string>
                      <string>Force Sync</string>
                      <string>Redeploy Edge</string>
                      <string>Change Edge Appliance Core Dump Configuration</string>
                      <string>Enable hypervisorAssist</string>
                      <string>Edit Highavailability</string>
                      <string>Edit Dns</string>
                      <string>Edit Syslog</string>
                      <string>Edit Automatic Rule Generation Settings</string>
                      <string>Disable SSH</string>
                      <string>Download Edge TechSupport Logs</string>
                    </allowedActions>
                    <localEgressEnabled>false</localEgressEnabled>
                  </edgeSummary>
    /status:
      displayName: status
      description: |
        Working With NSX Edge Status
        ----
      get:
        displayName: statusRead
        description: |
          Retrieve the status of the specified Edge.

          The **edgeStatus** has the following possible states:
          * *GREEN*: Health checks are successful, status is good.
          * *YELLOW*: Intermittent health check failure. If health check fails
            for five consecutive times for all appliances, status will turn
            *RED*.
          * *GREY*: unknown status.
          * *RED*: None of the appliances for this NSX Edge are in a serving state.
        queryParameters:
          getlatest:
            type: boolean
            displayName: getlatest
            description: |
              If *true*: retrieve the status live from NSX Edge.  
              If *false*: retrieve the latest available status from database.
            required: false
          detailed:
            type: boolean
            displayName: detailed
            description: |
              If *true*: retrieve detailed status per feature.   
              If *false*: retrieve aggregated summary of status per feature.
            required: false
          preRulesStatus:
            type: boolean
            displayName: preRulesStatus
            description: |
              If *true*: retreive detailed output for pre rules in addition to
              the regular output.
            required: false
        responses:
          200:
            body:
              application/xml:
                example: |
                  <edgeStatus>
                    <timestamp>1343739873000</timestamp>
                    <systemStatus>good</systemStatus>
                    <activeVseHaIndex>0</activeVseHaIndex>
                    <edgeStatus>GREEN</edgeStatus>
                    <publishStatus>APPLIED</publishStatus> 
                    <version>8</version>
                    <edgeVmStatus>
                      <edgeVmStatus>
                        <edgeVMStatus>GREEN</edgeVMStatus>
                        <haState>active</haState>
                        <index>0</index>
                        <id>vm-358</id>
                        <name>test2-0</name>
                      </edgeVmStatus>
                      <edgeVmStatus>
                        <edgeVMStatus>GREEN</edgeVMStatus>
                        <haState>active</haState>
                        <index>1</index>
                        <id>vm-362</id>
                        <name>test2-1</name>
                      </edgeVmStatus>
                    </edgeVmStatus>
                    <featureStatuses>
                      <featureStatus>
                        <service>loadBalancer</service>
                        <configured>false</configured>
                        <serverStatus>down</serverStatus>
                      </featureStatus>
                      <featureStatus>
                        <service>dhcp</service>
                        <configured>true</configured>
                        <publishStatus>Applied</publishStatus>
                        <serverStatus>up</serverStatus>
                      </featureStatus>
                      <featureStatus>
                        <service>sslvpn</service>
                        <configured>false</configured>
                        <serverStatus>down</serverStatus>
                      </featureStatus>
                      <featureStatus>
                        <service>syslog</service>
                        <configured>false</configured>
                        <serverStatus>up</serverStatus>
                      </featureStatus>
                      <featureStatus>
                        <service>nat</service>
                        <configured>false</configured>
                      </featureStatus>
                      <featureStatus>
                        <service>dns</service>
                        <configured>false</configured>
                        <serverStatus>down</serverStatus>
                      </featureStatus>
                      <featureStatus>
                        <service>ipsec</service>
                        <configured>false</configured>
                        <serverStatus>down</serverStatus>
                      </featureStatus>
                      <featureStatus>
                        <service>firewall</service>
                        <configured>true</configured>
                        <publishStatus>Applied</publishStatus>
                      </featureStatus>
                      <featureStatus>
                        <service>staticRouting</service>
                        <configured>false</configured>
                      </featureStatus>
                      <featureStatus>
                        <service>highAvailability</service>
                        <configured>true</configured>
                        <publishStatus>Applied</publishStatus>
                        <serverStatus>up</serverStatus>
                      </featureStatus>
                    </featureStatuses>
                  </edgeStatus>
    /techsupportlogs:
      displayName: techSupportLogs
      description: |
        Working with NSX Edge Tech Support Logs 
        ----
      get:
        displayName: techSupportLogsRead
        description: Retrieve the tech support logs for Edge.
    /clisettings:
      displayName: cliSettings
      description: |
        Working with NSX Edge CLI Settings
        ----
      put:
        displayName: cliSettingsUpdate
        description: Modify CLI credentials and enable/disable SSH for Edge.
        body:
          application/xml:
            example: |
              <cliSettings>
                <userName></userName>
                <password></password>
                <remoteAccess></remoteAccess>
                <passwordExpiry></passwordExpiry>
                <sshLoginBannerText></sshLoginBannerText>
              </cliSettings>
            schema: cliSettingsUpdate
    /cliremoteaccess:
      displayName: cliRemote
      description: |
        Working with NSX Edge Remote Access 
        ----
      post:
        displayName: cliRemoteCreate
        description: Change CLI remote access
        queryParameters:
          enable:
            type: boolean
            required: true
            displayName: enable
    /systemcontrol/config:
      displayName: nsxEdgeSystemControl
      description: |
        Working with NSX Edge System Control Configuration
        -----
      put:
        displayName: nsxEdgeSystemControlUpdate
        description: |
          Update the NSX Edge system control (sysctl) configuration.
        body:
          application/xml:
            example: |
              <systemControl>
                <property></property>
              </systemControl>
      get:
        displayName: nsxEdgeSystemControlRead
        description: |
          Retrieve all NSX Edge system control configuration.

          If no system control parameters are configured, the response is empty.
      delete:
        displayName: nsxEdgeSystemControlDelete
        description: |
          Delete all NSX Edge system control configuration.

          Deleting the system control configuration requires a reboot of the
          NSX Edge appliance.
        queryParameters:
          rebootNow:
            displayName: rebootNow
            description: |
              You must specify the **rebootNow** query parameter to delete the
              system control configuration. The NSX Edge appliace is rebooted.
            required: true
    /firewall/config:
      displayName: nsxEdgeFirewallConfig
      description: |
        Working With NSX Edge Firewall Configuration
        ----
        Configures firewall for an Edge and stores the specified configuration
        in database. If any appliances are associated with this Edge, applies
        the configuration to them. While using this API, you should send the
        globalConfig, defaultPolicy and the rules. If either of them are not
        sent, the previous config if any on those fields will be removed and
        will be changed to the system defaults.  
        
        **ruleId** uniquely identifies a rule and should be specified only for
        rules that are being updated.  If **ruleTag** is specified, the rules
        on Edge are configured using this user input. Otherwise, Edge is
        configured using **ruleIds** generated by NSX Manager.
        
        Parameter | Comments
        ----|----
        **tcpPickOngoingConnections**|Boolean, optional, default: *false*.
        **tcpAllowOutOfWindowPackets**|Boolean, optional, default: *false*.
        **tcpSendResetForClosedVsePorts**|Boolean, optional, default: *true*.
        **dropInvalidTraffic**|Boolean, optional, default: *true*.
        **logInvalidTraffic**|Boolean, optional, default: *false*.
        **tcpTimeoutOpen**|Integer, optional, default: *30*.
        **tcpTimeoutEstablished**|Integer, optional, default: *21600*.
        **tcpTimeoutClose**|Integer, optional, default: *30*.
        **udpTimeout**|Integer, optional, default: *60*.
        **icmpTimeout**|Integer, optional, default: *10*.
        **icmp6Timeout**|Integer, optional, default: *10*.
        **ipGenericTimeout**|Integer, optional, default: *120*.
        **enableSynFloodProtection**|Protect against SYN flood attacks by detecting bogus TCP connections and terminating them without consuming firewall state tracking resources. Boolean, optional, default: *false*.
        **logIcmpErrors** | Boolean, optional, default *false*.
        **dropIcmpReplays** | Boolean, optional, default *false*.
        **defaultPolicy**|Optional. Default is *deny*.
        **action**|String, values: *accept*, *deny*.
        **loggingEnabled**|Boolean, optional, default: *false*.
        **firewallRules**|Optional.
        **action**|String. Valid values: *accept*, *deny*.
        **source  **|Optional.  Default is *any*.
        **destination**|Optional. Default is *any*.
        **exclude**<br>(source or destination)|Boolean. Exclude the specified source or destination.
        **ipAddress**<br>(source or destination)|List of string. Can specify single IP address, range of IP address, or in CIDR format. Can define multiple.
        **groupingObjectId**<br>(source or destination)|List of string, Id of cluster, datacenter, distributedPortGroup, legacyPortGroup, VirtualMachine, vApp, resourcePool, logicalSwitch, IPSet, securityGroup. Can defined multiple.
        **vnicGroupId**<br>(source or destination)|List of string. Possible values are *vnic-index-[1-9]*, *vse*, *external* or *internal*. Can define multiple.
        **application**| optional. When absent its treated as *any*.
        **applicationId**|List of string. Id of service or serviceGroup groupingObject. 
        **service**|List.   
        **protocol**|String.    
        **port**|List of string.    
        **sourcePort**|List of string.    
        **icmpType**|String.    
        **name**|String.    
        **description**|String.   
        **enabled**|Boolean, optional. Default *true*. 
        **loggingEnabled**|Boolean, optional. Default *false*. 
        **matchTranslated**|Boolean.   
        **direction**|String, optional. Possible values *in* or *out*. When absent its treated as *any*.
        **ruleTag**|Long, optional. This can be used to specify user controlled **ruleId**. If not specified, NSX Manager will generate **ruleId**. Valid values: *1-65536*.  
      get:
        displayName: nsxEdgeFirewallConfigRead
        description: |
          Retrieve the NSX Edge firewall configuration.
          
          **Method history:**
          
          Release | Modification
          --------|-------------
          6.2.3 | Method updated. **enableSynFloodProtection** parameter added. 
          6.3.0 | Method updated. **logIcmpErrors** and **dropIcmpReplays** parameters added. 
      put:
        displayName: nsxEdgeFirewallConfigUpdate
        description: |
          Configure NSX Edge firewall.
          
          **Method history:**
          
          Release | Modification
          --------|-------------
          6.2.3 | Method updated. **enableSynFloodProtection** parameter added. Default value of **tcpTimeoutEstablished** increased from 3600 to 21600 seconds (6 hours).
          6.3.0 | Method updated. **logIcmpErrors** and **dropIcmpReplays** parameters added. 
        body:
         application/xml:
          example: |
            <firewall>
              <defaultPolicy> 
                <action>deny</action>
                <loggingEnabled>false</loggingEnabled>  
              </defaultPolicy>
              <globalConfig>  
                <tcpPickOngoingConnections>false</tcpPickOngoingConnections>  
                <tcpAllowOutOfWindowPackets>false</tcpAllowOutOfWindowPackets>  
                <tcpSendResetForClosedVsePorts>true</tcpSendResetForClosedVsePorts>  
                <dropInvalidTraffic>true</dropInvalidTraffic>  
                <logInvalidTraffic>false</logInvalidTraffic>  
                <tcpTimeoutOpen>30</tcpTimeoutOpen>  
                <tcpTimeoutEstablished>21600</tcpTimeoutEstablished>  
                <tcpTimeoutClose>30</tcpTimeoutClose>  
                <udpTimeout>60</udpTimeout>  
                <icmpTimeout>10</icmpTimeout>  
                <icmp6Timeout>10</icmp6Timeout>  
                <ipGenericTimeout>120</ipGenericTimeout>  
                <enableSynFloodProtection>false</enableSynFloodProtection> 
                <logIcmpErrors>false</logIcmpErrors>
                <dropIcmpReplays>false</dropIcmpReplays>
              </globalConfig>
              <firewallRules>
                <firewallRule>
                  <ruleTag>1</ruleTag>  
                  <name>rule1</name>  
                  <source>  
                    <vnicGroupId>vnic-index-5</vnicGroupId>  
                    <groupingObjectId>ipset-128</groupingObjectId>  
                    <ipAddress>1.1.1.1</ipAddress>  
                  </source>
                  <destination>  
                    <groupingObjectId>ipset-126</groupingObjectId>  
                    <vnicGroupId>vnic-index-5</vnicGroupId>  
                    <groupingObjectId>ipset-128</groupingObjectId>  
                    <ipAddress>192.168.10.0/24</ipAddress>  
                  </destination>
                  <application>  
                    <applicationId>application-155</applicationId>  
                    <service>  
                      <protocol>tcp</protocol>
                      <port>80</port>  
                      <sourcePort>1500</sourcePort>  
                    </service>
                  </application>
                  <matchTranslated>true</matchTranslated>  
                  <direction>in</direction>  
                  <action>accept</action>  
                  <enabled>true</enabled>  
                  <loggingEnabled>true</loggingEnabled>  
                  <description>comments</description>  
                </firewallRule>
              </firewallRules>
            </firewall>
          schema: nsxEdgeFirewallConfigUpdate
      delete:
        displayName: nsxEdgeFirewallConfigDelete
        description: Delete NSX Edge firewall configuration.
      /rules:
        displayName: firewallRules
        description: |
          Working With Firewall Rules
          ----
        post:
          displayName: firewallRulesCreate
          description: |
            Add one or more rules. You can add a rule above a specific rule
            using the query parameter, indicating the desired ruleID.
          queryParameters:
            aboveRuleId:
              displayName: aboveRuleId
              description: rule Id.
          body:
            application/xml:
              example: |
                <firewallRules>
                  <firewallRule>
                    <ruleTag></ruleTag>
                    <name></name>
                    <source>
                      <ipAddress></ipAddress>
                      <groupingObjectId></groupingObjectId>
                      <vnicGroupId></vnicGroupId>
                    </source>
                    <destination>
                      <ipAddress></ipAddress>
                      <groupingObjectId></groupingObjectId>
                      <vnicGroupId></vnicGroupId>
                    </destination>
                    <application>
                      <applicationId></applicationId>
                      <service>
                        <protocol></protocol>
                        <port></port>
                        <sourcePort></sourcePort>
                      </service>
                    </application>
                    <matchTranslated></matchTranslated>
                    <direction></direction>
                    <action></action>
                    <enabled></enabled>
                    <loggingEnabled></loggingEnabled>
                    <description></description>
                  </firewallRule>
                </firewallRules>
              schema: firewallRulesCreate
        /{ruleId}:
          displayName: firewallRule
          description: |
            Working With a Specific Firewall Rule
            ----
          uriParameters:
            ruleId:
              required: true
              displayName: ruleId
              description: Rule ID.
          get:
            displayName: firewallRuleRead
            description: Retrieve specific rule.
          put:
            displayName: firewallRuleUpdate
            description: Modify a specific firewall rule.
            body:
              application/xml:
                example: |
                  <firewallRule>
                    <ruleTag></ruleTag>
                    <name></name>
                    <source>
                      <vnicGroupId></vnicGroupId>
                      <groupingObjectId></groupingObjectId>
                      <ipAddress></ipAddress>
                    </source>
                    <destination>
                      <groupingObjectId></groupingObjectId>
                      <vnicGroupId></vnicGroupId>
                      <ipAddress></ipAddress>
                    </destination>
                    <application>
                      <applicationId></applicationId>
                      <service>
                        <protocol></protocol>
                        <port></port>
                        <sourcePort></sourcePort>
                      </service>
                    </application>
                    <matchTranslated></matchTranslated>
                    <direction></direction>
                    <action></action>
                    <enabled></enabled>
                    <loggingEnabled></loggingEnabled>
                    <description></description>
                  </firewallRule>
                schema: firewallRuleUpdate
          delete:
            displayName: firewallRuleDelete
            description: Delete firewall rule
      /global:
        displayName: globalFirewallConfig
        description: |
          Working With the NSX Edge Global Firewall Configuration
          ----
        get:
          displayName: globalFirewallConfigRead
          description: |
            Retrieve the firewall default policy for an Edge.
            
            **Method history:**
            
            Release | Modification
            --------|-------------
            6.2.3 | Method updated. **enableSynFloodProtection** parameter added. 
            6.3.0 | Method updated. **logIcmpErrors** and **dropIcmpReplays** parameters added. 
        put:
          displayName: globalFirewallConfigUpdate
          description: |
            Configure firewall global config for an Edge.
            
            **Method history:**
            
            Release | Modification
            --------|-------------
            6.2.3 | Method updated. **enableSynFloodProtection** parameter added. Default value of **tcpTimeoutEstablished** increased from 3600 to 21600 seconds (6 hours).
            6.3.0 | Method updated. **logIcmpErrors** and **dropIcmpReplays** parameters added. 
          body:
            application/xml:
              example: |
                <globalConfig>
                  <tcpPickOngoingConnections></tcpPickOngoingConnections>
                  <tcpAllowOutOfWindowPackets></tcpAllowOutOfWindowPackets>
                  <tcpSendResetForClosedVsePorts></tcpSendResetForClosedVsePorts>
                  <dropInvalidTraffic></dropInvalidTraffic>
                  <logInvalidTraffic></logInvalidTraffic>
                  <tcpTimeoutOpen></tcpTimeoutOpen>
                  <tcpTimeoutEstablished></tcpTimeoutEstablished>
                  <tcpTimeoutClose></tcpTimeoutClose>
                  <udpTimeout></udpTimeout>
                  <icmpTimeout></icmpTimeout>
                  <icmp6Timeout></icmp6Timeout>
                  <ipGenericTimeout></ipGenericTimeout>
                  <enableSynFloodProtection></enableSynFloodProtection>
                  <logIcmpErrors></logIcmpErrors>
                  <dropIcmpReplays></dropIcmpReplays>
                </globalConfig>
              schema: globalFirewallConfigUpdate
      /defaultpolicy:
        displayName: defaultFirewallPolicy
        description: |
          Working With the Default Firewall Policy for an Edge
          -----
        get:
          displayName: defaultFirewallPolicyRead
          description: Retrieve default firewall policy
        put:
          displayName: defaultFirewallPolicyUpdate
          description: Configure default firewall policy
          body:
            application/xml:
              example: |
                <firewallDefaultPolicy>
                  <action></action>
                  <loggingEnabled></loggingEnabled>
                </firewallDefaultPolicy>
              schema: defaultFirewallPolicyUpdate
    /firewall/statistics/firewall:
      displayName: firewallStatistics
      description: |
        Working With NSX Edge Firewall Statistics
        ----
      get:
        displayName: firewallStatisticsRead
        description: |
          Retrieve number of ongoing connections for the firewall
          configuration.
        queryParameters:
          interval:
            displayName: interval
            description: |
              60 min by default, can be given as 1 -60 min, oneDay | oneWeek |
              oneMonth | oneYear.
    /firewall/statistics/{ruleId}:
      displayName: firewallRuleStatistics
      description: |
        Working with Statistics for a Specific Firewall Rule
        -----
      uriParameters:
        ruleId:
          displayName: ruleId
          required: true
          description: Specified rule.
      get:
        displayName: firewallRuleStatisticsRead
        description: Retrieve stats for firewall rule.
    /nat/config:
      displayName: edgeNat
      description: |
        Working With NAT Configuration
        -----
        NSX Edge provides network address translation (NAT) service to protect
        the IP addresses of internal (private) networks from the public
        network.
        
        You can configure NAT rules to provide access to services running on
        privately addressed virtual machines. There are two types of NAT rules
        that can be configured: SNAT (Source NAT) and DNAT (Destination NAT).
        
        For the data path to work, you need to add firewall rules to allow the
        required traffic for IP addresses and port per the NAT rules.
        
        **NAT Parameter Table**
        
        Parameter |  Description | Other information
        ---|---
        **enabled** |Enable rule. | Boolean. Optional. Default is *true*.
        **loggingEnabled** |Enable logging. | Boolean. Optional. Default is *false*.
        **ruleTag** | Rule tag. | This can be used to specify user-controlled **ruleId**. If not specified, NSX Manager will generate **ruleId**. Optional. Must be between 65537-131072.
        **ruleId** |Identifier for the rule. |Read-only. Long.
        **ruleType** |Rule type. |Read-only.  Values: *user*, *internal_high*.
        **action** |Type of NAT.| Valid values: *snat* or *dnat*.
        **vnic** | Interface on which the translating is applied.|String. Optional.
        **originalAddress** | Original address or address range. This is the source address for SNAT rules, and the destination address for DNAT rules. For DNAT rules, this address must be configured on the NSX Edge.|String. Specify *any*, an IP address (e.g. *192.168.10.10*), an IP range (e.g. *192.168.10.10-192.168.10.19*), or a subnet in CIDR notation (e.g. *192.168.10.1/24*). Default is *any*. 
        **translatedAddress** | Translated address or address range. For SNAT rules, this address must be configured on the NSX Edge. |String. Specify *any*, an IP address (e.g. *192.168.10.10*), an IP range (e.g. *192.168.10.10-192.168.10.19*), or a subnet in CIDR notation (e.g. *192.168.10.1/24*). Default is *any*. 
        **dnatMatchSourceAddress** | Source address to match in DNAT rules. | String. Specify *any*, an IP address (e.g. *192.168.10.10*), an IP range (e.g. *192.168.10.10-192.168.10.19*), or a subnet in CIDR notation (e.g. *192.168.10.1/24*). Default is *any*. Not valid for SNAT rules.
        **snatMatchDestinationAddress** | Destination address to match in SNAT rules. | String. Specify *any*, an IP address (e.g. *192.168.10.10*), an IP range (e.g. *192.168.10.10-192.168.10.19*), or a subnet in CIDR notation (e.g. *192.168.10.1/24*). Default is *any*. Not valid for DNAT rules.
        **protocol** |Protocol. |String. Optional. Default is *any*.
        **icmpType** |ICMP type. |String. Only supported when protocol is *icmp*. Default is *any*.
        **originalPort** |Original port. This is the source port for SNAT rules, and the destination port for DNAT rules. |String. Optional. Specify *any*, a port (e.g. 1234) or port range (1234-1239). Default is *any*. 
        **translatedPort** |Translated port. |String. Optional. Specify *any*, a port (e.g. 1234) or port range (1234-1239). Default is *any*. 
        **dnatMatchSourcePort** | Source port in DNAT rules. | String. Optional. Specify *any*, a port (e.g. 1234) or port range (1234-1239). Default is *any*. Not valid for SNAT rules.
        **snatMatchDestinationPort** | Destination port in SNAT rules. | String. Optional. Specify *any*, a port (e.g. 1234) or port range (1234-1239). Default is *any*. Not valid for DNAT rules.
      put:
        displayName: edgeNatConfig
        description: | 
          Configure SNAT and DNAT rules for an Edge.
          
          If you use this method to add new NAT rules, you must include all
          existing rules in the request body. Any rules that are omitted will
          be deleted.
          
          **Method history:**
          
          Release | Modification
          --------|-------------
          6.3.0 | Method updated. **dnatMatchSourceAddress**, **snatMatchDestinationAddress**, **dnatMatchSourcePort**, **snatMatchDestinationPort** parameters added. <br>**protocol**, **originalPort**, and **translatedPort** now supported in SNAT rules.
        body:
          application/xml:
            example: |
              <nat>
                <natRules>
                  <natRule>
                    <ruleTag>65537</ruleTag>   
                    <action>dnat</action>
                    <vnic>0</vnic> 
                    <originalAddress>10.112.196.116</originalAddress>
                    <translatedAddress>172.16.1.10</translatedAddress>
                    <dnatMatchSourceAddress>any</dnatMatchSourceAddress>
                    <loggingEnabled>true</loggingEnabled>   
                    <enabled>true</enabled>   
                    <description>my comments</description>   
                    <protocol>tcp</protocol>   
                    <originalPort>3389</originalPort>   
                    <translatedPort>3389</translatedPort>   
                    <dnatMatchSourcePort>any</dnatMatchSourcePort>
                  </natRule>
                  <natRule>
                    <ruleTag>65538</ruleTag>   
                    <action>snat</action>
                    <vnic>1</vnic> 
                    <originalAddress>172.16.1.10</originalAddress>
                    <translatedAddress>10.112.196.116</translatedAddress>
                    <snatMatchDestinationAddress>any</snatMatchDestinationAddress>
                    <loggingEnabled>false</loggingEnabled>   
                    <enabled>true</enabled>   
                    <description>no comments</description>   
                    <snatMatchDestinationPort>any</snatMatchDestinationPort>
                  </natRule>
                </natRules>
              </nat>
            schema: edgeNatConfig
      get:
        displayName: edgeNatRead
        description: | 
          Retrieve SNAT and DNAT rules for the specified NSX Edge.
          
          **Method history:**
          
          Release | Modification
          --------|-------------
          6.3.0 | Method updated. **dnatMatchSourceAddress**, **snatMatchDestinationAddress**, **dnatMatchSourcePort**, **snatMatchDestinationPort** parameters added. <br>**protocol**, **originalPort**, and **translatedPort** now supported in SNAT rules.
      delete:
        displayName: edgeNatDelete
        description: Delete all NAT rules for the specified NSX Edge.
      /rules:
        displayName: edgeNatRules
        description: |
          Working With NAT Rules
          ----
        post:
          displayName: edgeNatRulesCreate
          description: |
            Add a NAT rule above a specific rule in the NAT rules table (using
            **aboveRuleId** query parameter) or append NAT rules to the bottom.
            
            **Method history:**
            
            Release | Modification
            --------|-------------
            6.3.0 | Method updated. **dnatMatchSourceAddress**, **snatMatchDestinationAddress**, **dnatMatchSourcePort**, **snatMatchDestinationPort** parameters added. <br>**protocol**, **originalPort**, and **translatedPort** now supported in SNAT rules.
          queryParameters:
            aboveRuleId:
              displayName: aboveRuleId
              description: |
                Specified rule ID. If no NAT rules exist, you can specify rule
                ID *0*.
              required: false
          body:
            application/xml:
              example: |
                <natRule>
                  <action>dnat</action>
                  <vnic>0</vnic>
                  <originalAddress>10.112.196.116</originalAddress>
                  <translatedAddress>172.16.1.10</translatedAddress>
                  <dnatMatchSourceAddress>any</dnatMatchSourceAddress>
                  <loggingEnabled>true</loggingEnabled>
                  <enabled>true</enabled>
                  <description>my comments</description>
                  <protocol>tcp</protocol>
                  <translatedPort>3389</translatedPort>
                  <originalPort>3389</originalPort>
                  <dnatMatchSourcePort>any</dnatMatchSourcePort>
                </natRule>
              schema: edgeNatRulesCreate
        /{ruleID}:
          displayName: edgeNatRule
          description: |
            Working With a Specific NAT Rule
            -----
          uriParameters:
            ruleID:
              required: true
              displayName: ruleID
              description: Specified rule ID.
          put:
            displayName: edgeNatRuleUpdate
            description: |
              Update the specified NAT rule.
              
              **Method history:**

              Release | Modification
              --------|-------------
              6.3.0 | Method updated. **dnatMatchSourceAddress**, **snatMatchDestinationAddress**, **dnatMatchSourcePort**, **snatMatchDestinationPort** parameters added. <br>**protocol**, **originalPort**, and **translatedPort** now supported in SNAT rules.
            body:
              application/xml:
                example: |
                  <natRule>
                    <action>dnat</action>
                    <vnic>0</vnic>
                    <originalAddress>10.112.196.116</originalAddress>
                    <translatedAddress>172.16.1.10</translatedAddress>
                    <dnatMatchSourceAddress>any</dnatMatchSourceAddress>
                    <loggingEnabled>true</loggingEnabled>
                    <enabled>true</enabled>
                    <description>my comments</description>
                    <protocol>tcp</protocol>
                    <translatedPort>3389</translatedPort>
                    <originalPort>3389</originalPort>
                    <dnatMatchSourcePort>any</dnatMatchSourcePort>
                  </natRule>
                schema: edgeNatRuleUpdate
          delete:
            displayName: edgeNatRuleDelete # dupfix edgeNatRuleUpdate
            description: Delete the specified NAT rule.
    /routing/config:
      displayName: routingConfig
      description: |
        Working with the NSX Edge Routing Configuration
        ----
        You can specify static and dynamic routing for each NSX Edge.
        
        Dynamic routing provides the necessary forwarding information between
        layer 2 broadcast domains, thereby allowing you to decrease layer 2
        broadcast domains and improve network efficiency and scale. NSX
        extends this intelligence to where the workloads reside for doing
        East-West routing. This allows more direct virtual machine to virtual
        machine communication without the costly or timely need to extend
        hops. At the same time, NSX also provides North-South connectivity,
        thereby enabling tenants to access public networks.
        
        ### Global Routing Configuration
        
        Parameter  |   Description  | Comments  
        --- | --- | --- 
        **routerId**  | The first uplink IP address of the NSX Edge that pushes routes to the kernel for dynamic routing | Optional. RouterId is set only when configuring the dynamic routing protocols OSPF and BGP.
        **ecmp**  | Enables equal-cost multi-path routing (ECMP) | Optional. Boolean. By default, ecmp is set to false.
        **logging**  | Logging configuration. | Optional. 
        **logging > enable** | Enable/disable status of logging. | Optional. Default is *false*.
        **logging > logLevel**  | Sets the log level.  | Default is *info*.  Valid values: *emergency*, *alert*, *critical*, *error*, *warning*, *notice*, *info*, *debug*.
        **ipPrefix**  | Details for one IP prefix. |  Optional. Required only if you define redistribution rules in dynamic routing protocols like ospf, bgp.
        **ipPrefix > name**  | The name of the IP prefix. | All defined IP prefixes must have unique names.
        **ipPrefix > ipAddress**  | IP addresses for the IP prefix. | Optional. String.
        
        ### Default Route Configuration
        
        Parameter  |   Description  | Comments  
        --- | --- | --- 
        **description**  | A description for the default route. |
        **type**  | Specifies whether the static route was created by the system as an auto-generated route or the default route (internal); or whether it is a local (user) route. |
        **mtu**  | The maximum transmission value for the data packets |Default is 1500. The MTU value cannot be higher than the MTU value set on the NSX Edge interface. By default, mtu is the MTU value of the interface on which the route is configured. 
        **vnic**  | Interface on which the default route is added. |
        **gatewayAddress**  | Default gateway IP used for routing. |
        **adminDistance**  |Admin distance. Used to determine which routing protocol to use if two protocols provide route information for the same destination. | Optional. Default value is *1*.
        
        ### Static Route Configuration
        
        Parameter  |   Description  | Comments  
        --- | --- | --- 
        **vnic**  | Interface on which the route is added. |
        **description** | A description for the static route. |
        **mtu**  | The maximum transmission value for the data packet. |Default is 1500. By default, mtu is the MTU value of the interface on which the route is configured.
        **network**  | The network in CIDR notation. |
        **nextHop**  | Next hop IP address. |The router must be able to directly reach the next hop. When ECMP is enabled, multiple next hops can be displayed.
        **adminDistance**  | Admin distance. Used to determine which routing protocol to use if two protocols provide route information for the same destination. | Optional. Default value is *1*.
        **type**  | Specifies whether the static route was created by the system as an auto-generated route or the default route (internal); or whether it is a local (user) route. |
        
        ### OSPF Configuration
        
        Parameter  |   Description  | Comments  
        --- | --- | --- 
        **enabled**  | OSPF enabled status. |  When not specified, it will be treated as false, When false, it will delete the existing config.
        **gracefulRestart**  | For packet forwarding to be uninterrupted during restart of services. | Optional.
        **defaultOriginate**  | Allows the Edge Services Gateway to advertise itself as a default gateway to its peers. | Optional.  Default is *false*. Not allowed on a logical distributed router.
        **forwardingAddress** | The IP address of one of the uplink interfaces. | Logical (distributed) router only.
        **protocolAddress** | An IP address on the same subnet as the forwarding address. | Logical (distributed) router only.
        **areaId**  | The area ID. The NSX Edge supports an area ID in the form of a decimal number. Valid values are 0-4294967295. | Required. The value for areaId must be a unique number.
        **translateType7ToType5** | Configure whether this NSX Edge should be used for translating Type 7 to Type 5 LSAs for this OSPF area. If not set, the router with highest router ID is used for translating. | Valid values:  *true* or *false*. Optional, default is *false*. Only configurable for OSFP areas of type NSSA.
        **type**  | Gives whether the type is *normal* or *nssa*. | Optional.  Default type is normal. NSSAs (the not-so-stubby areas feature described in RFC 3101) prevents the flooding of AS-external link-state advertisements (LSAs). They rely on default routing to external destinations. Therefore, NSSAs are placed at the edge of an OSPF routing domain. NSSA can import external routes into the OSPF routing domain, thereby providing transit service to small routing domains that are not part of the OSPF routing domain.
        **authentication > type**  | Authentication type. | Choice of *none*, *password*, or *md5*. If authentication information isn't provided, type is *none*. Type *password*: a password is included in the transmitted packet. Type *md5*: an MD5 checksum is included in the transmitted packet.
        **authentication > value**  | The password or MD5 key, respectively |
        **vnic**  | The interface that is mapped to OSPF Area | Required. The interface specifies the external network that both NSX Edges are connected to.
        **areaId**  | An area ID. Can be in the form of an IP address or decimal number. | Required.
        **helloInterval**  | The default interval between hello packets that are sent on the interface | Optional. By default, set to 10 seconds with valid values 1-255.
        **deadInterval**  | The default interval during which at least one hello packet must be received from a neighbor before the router declares that neighbor down. | Optional. By default, set to 40 seconds. Valid values are 1-65535.
        **priority**  | The default priority of the interface. The interface with the highest priority is the designated router. | Optional. By default, set to 128 with valid values 0-255.
        **cost**  | The default overhead required to send packets across that interface | Optional. Integer. The cost of an interface is inversely proportional to the bandwidth of that interface. The larger the bandwidth, the smaller the cost. Valid values are 1-65535.
        **mtuIgnore** | Ignore interface MTU setting | *true* or *false*.
        
        
        ### BGP Configuration
        
        Parameter  |   Description  | Comments  
        --- | --- | --- 
        **enabled**  | BGP routing enable/disable status. | Optional. By default, enabled is set to false.
        **gracefulRestart**  | For packet forwarding to be uninterrupted during restart of services. | Optional.
        **defaultOriginate**  | Allows the Edge Services Gateway to advertise itself as a default gateway to its peers. | Optional.  Default is *false*. Not allowed on a logical distributed router.
        **localAS**  | The 2 byte local Autonomous System number that is assigned to the NSX Edge. The path of autonomous systems that a route traverses is used as one metric when selecting the best path to a destination.| Integer. A value (a globally unique number between 1-65535) for the local AS. This local AS is advertised when the NSX Edge peers with routers in other autonomous systems.  Either **localAS** or **localASNumber** is required. 
        **localASNumber**  | The 2 or 4 byte local Autonomous System number that is assigned to the NSX Edge. The path of autonomous systems that a route traverses is used as one metric when selecting the best path to a destination. | Integer. A value (a globally unique number between 1-4294967295) for the Local AS. This local AS is advertised when the NSX Edge peers with routers in other autonomous systems.  Can be in plain or dotted format (e.g. 2 byte: 65001 or 0.65001, 4 byte: 65545 or 1.9). Either **localAS** or **localASNumber** is required. 
        **bgpNeighbour > ipAddress**  | The IP address of the on-premises border device. | Required.  String. IPv4 only. IPv6 is not supported. Should not be the same as any of the NSX Edge interfaces's IPs, forwardingAddress, protocolAddress.
        **bgpNeighbour > forwardingAddress** | The IP address of one of the uplink interfaces. | Logical (distributed) router only.
        **bgpNeighbour > protocolAddress** | An IP address on the same subnet as the forwarding address. | Logical (distributed) router only.
        **bgpNeighbour > remoteAS**  | The 2 byte remote Autonomous System number that is assigned to the the border device you are creating the connection for. | Integer. A value (a globally unique number between 1-65535) for the remote AS. Either **remoteAS** or **remoteASNumber** is required. 
        **bgpNeighbour > remoteASNumber**  | The 2 or 4 byte remote Autonomous System number that is assigned to the border device you are creating the connection for. | Integer. A value (a globally unique number between 1-4294967295) for the remote AS. Can be in plain or dotted format (e.g. 2 byte: 65001 or 0.65001, 4 byte: 65545 or 1.9). Either **remoteAS** or **remoteASNumber** is required. 
        **bgpNeighbour > weight**  | Weight for the neighbor connection | Optional. Integer. By default, weight is set to 60.
        **bgpNeighbour > holdDownTimer**  | Interval for the hold down timer | Optional. Integer. The NSX Edge uses the standard, default values for the keep alive timer (60 seconds) and the hold down timer. The default value for the hold down timer is 3x keepalive or 180 seconds. Once peering between two neighbors is achieved, the NSX Edge  starts a hold down timer. Every keep alive message it receives from the neighbor resets the hold down timer to 0.  When the NSX Edge fails to receive three consecutive keep alive messages, so that the hold down timer reaches 180 seconds, the NSX Edge considers the neighbor down and deletes the routes from this neighbor.
        **bgpNeighbour > keepAliveTimer**  | Interval for the keep alive timer. | Optional. Integer. Default is *60*. Valid values are 1-65534.
        **bgpNeighbour > password**  | The authentication password. | Optional. String. Each segment sent on the connection between the neighbors is verified. MD5 authentication must be configured with the same password on both BGP neighbors, otherwise, the connection between them will not be made.
        **bgpFilter > direction**  | Indicate whether you are filtering traffic to or from the neighbor | Optional. Choice of *in* or *out*.
        **bgpFilter > action**  | Permit or deny traffic. | Optional. Choice of *permit* or *deny*.
        **bgpFilter > network**  | The network that you want to filter to or from the neighbor. | CIDR format. IPv4 only. IPv6 is not supported.
        **bgpFilter > ipPrefixGe**  | The IP prefixes that are to be filtered.  Filter prefixes greater than or equal to this value.  | Optional. Integer. Specify valid IPv4 prefixes.
        **bgpFilter > ipPrefixLe**  | The IP prefixes that are to be filtered. Filter prefixes less than or equal to this value. | Optional. Integer. Specify valid IPv4 prefixes. 

        **Note:** New parameters **localASNumber** and **remoteASNumber** have
        been added in NSX 6.3.0 to allow configuration of 4 byte AS numbers.
        The previous parameters, **localAS** and **remoteAS** are still valid.

        When you configure BGP, you must provide a local AS number parameter
        (**localAS** or **localASNumber**) and a remote AS number parameter
        (**remoteAS** or **remoteASNumber**). If you provide both forms of
        either local or remote AS number (for example, **localAS** and
        **localASNumber**), the values must be the same.

        You can use any combination of remote and local AS parameters, as long
        as the values are valid. For example, **localAS** of *65501* and
        **remoteASNumber** of *70000*.

        If you configure a 2 byte number, both forms of the AS number
        parameters are returned with a GET request (for example, **localAS**
        and **localASNumber**). If you configure a 4 byte number, only the 4
        byte parameter is returned (**localASNumber**).  

        If both parameters are present (for example **localAS** and
        **localASNumber**), and you update one parameter (**localAS**)
        subsequent GET requests will show both parameters updated.  

        ### Route Redistribution Configuration for OSPF or BGP
        
        Parameter  |   Description  | Comments  
        --- | --- | --- 
        **enabled** | Enabled status of route redistribution for the parent protocol (OSFP or BGP). | Optional. Default is *false*.
        **rule**  | Route redistribution rule. |
        **id**  | The ID for the rule. | Required. Number.
        **prefixName**  | The name for the IP prefix to add for route redistribution | Optional. String. Default is *any*. **prefixName** is set using **routingGlobalConfig > ipPrefixes**. By default, the value of prefixName is set to *any*.
        **from > ospf**  | Whether OSPF is a learner protocol (it learns routes from other protocols). | Optional. By default set to false for ospf.
        **from > bgp**  | Whether BGP is a learner protocol (it learns routes from other protocols). | Optional. By default set to false for bgp.
        **from > static**  | Whether routes can be learned from static networks. | Optional.  By default set to false for static.
        **from > connected**  | Whether routes can be learned from connected networks. | Optional. By default set to false for connected.
        **action**  | Whether to permit or deny redistribution from the selected types of networks. | Required. Choice of *deny* or *permit*.
      get:
        displayName: routingConfigRead
        description: |
          Retrieve routes.
          
          **Method history:**
          
          Release | Modification
          --------|-------------
          6.2.3 | Method updated. **isis** configuration section removed. 
          6.3.0 | Method updated. Parameter **defaultOriginate** removed for logical router NSX Edges.  <br>Parameter **translateType7ToType5** added to OSPF section. <br>Parameters **localASNumber** and **remoteASNumber** added to BGP section.
#          6.3.0 | Method updated. **isis** parameter removed from route redistributions rule sections.
      put:
        displayName: routingConfigUpdate
        description: |
          Configure NSX Edge global routing configuration, static routing, and
          dynamic routing (OSPF and BGP).
          
          **Method history:**
          
          Release | Modification
          --------|-------------
          6.2.3 | Method updated. **isis** configuration section removed. 
          6.3.0 | Method updated. Parameter **defaultOriginate** removed for logical router NSX Edges.  <br>Parameter **translateType7ToType5** added to OSPF section. <br>Parameters **localASNumber** and **remoteASNumber** added to BGP section.
#          6.3.0 | Method updated. **isis** parameter removed from route redistributions rule sections.
        body:
          application/xml:
            example: |
              <routing>
                <routingGlobalConfig>
                  <routerId>1.1.1.1</routerId>   
                  <logging>   
                    <enable>false</enable>
                    <logLevel>info</logLevel>
                  </logging>
                  <ipPrefixes>   
                    <ipPrefix>
                      <name>a</name>
                      <ipAddress>192.168.10.0/24</ipAddress>
                    </ipPrefix>
                  </ipPrefixes>
                </routingGlobalConfig>
                <staticRouting>
                  <staticRoutes>   
                    <route>
                      <description>route1</description>
                      <vnic>0</vnic>
                      <network>3.1.1.0/22</network>
                      <nextHop>172.16.1.14</nextHop>
                      <mtu>1500</mtu>   
                    </route>
                  </staticRoutes>
                  <defaultRoute>   
                  <description>defaultRoute</description>
                  <vnic>0</vnic>
                  <gatewayAddress>172.16.1.12</gatewayAddress>
                  <mtu>1500</mtu>   
                  </defaultRoute>
                </staticRouting>
                <ospf>    
                  <enabled>true</enabled>   
                  <forwardingAddress>192.168.10.2</forwardingAddress> 
                  <protocolAddress>192.168.10.3</protocolAddress>
                  <ospfAreas>
                    <ospfArea>
                      <areaId>100</areaId> 
                      <translateType7ToType5>true</translateType7ToType5>
                      <type>normal</type> 
                      <authentication>    
                        <type>password</type>   
                        <value>vmware123</value>
                      </authentication>
                    </ospfArea>
                  </ospfAreas>
                  <ospfInterfaces>
                    <ospfInterface>
                      <vnic>0</vnic>
                      <areaId>100</areaId>
                      <helloInterval>10</helloInterval> 
                      <deadInterval>40</deadInterval>  
                      <priority>128</priority> 
                      <cost>10</cost> 
                      <mtuIgnore>false</mtuIgnore>
                    </ospfInterface>
                  </ospfInterfaces>
                  <redistribution>
                    <enabled>true</enabled>
                    <rules>
                      <rule>
                        <prefixName>a</prefixName>   
                        <from>
                          <ospf>false</ospf>       
                          <bgp>false</bgp>        
                          <static>false</static> 
                          <connected>true</connected>
                        </from>
                        <action>deny</action> 
                      </rule>
                      <rule>
                        <prefixName>b</prefixName> 
                        <from>
                          <ospf>false</ospf>         
                          <bgp>true</bgp>           
                          <static>false</static>     
                          <connected>false</connected>  
                        </from>
                        <action>permit</action>     
                      </rule>
                    </rules>
                  </redistribution>
                </ospf> 
                <bgp>      
                  <enabled>true</enabled>     
                  <localAS>65535</localAS>          
                  <localASNumber>65535</localASNumber>          
                  <bgpNeighbours>
                    <bgpNeighbour>
                      <ipAddress>192.168.10.10</ipAddress>  
                      <forwardingAddress>192.168.1.10</forwardingAddress>   
                      <protocolAddress>192.168.1.11</protocolAddress>      
                      <remoteAS>65500</remoteAS> 
                      <remoteASNumber>65500</remoteASNumber> 
                      <weight>60</weight>  
                      <holdDownTimer>180</holdDownTimer> 
                      <keepAliveTimer>60</keepAliveTimer>     
                      <password>vmware123</password>   
                      <bgpFilters>              
                        <bgpFilter>
                          <direction>in</direction>  
                          <action>permit</action> 
                          <network>10.0.0.0/8</network> 
                          <ipPrefixGe>17</ipPrefixGe>  
                          <ipPrefixLe>32</ipPrefixLe> 
                        </bgpFilter>
                      </bgpFilters>
                    </bgpNeighbour>
                  </bgpNeighbours>
                  <redistribution>
                    <enabled>true</enabled> 
                    <rules>
                      <rule>
                        <from>
                          <ospf>true</ospf> 
                          <bgp>false</bgp> 
                          <static>true</static>
                          <connected>false</connected> 
                        </from>
                        <action>deny</action> 
                      </rule>
                    </rules>
                  </redistribution>
                </bgp>
              </routing>
            schema: routingConfigUpdate
      delete:
        displayName: routingConfigDelete
        description: |
          Delete the routing config stored in the NSX Manager database and the
          default routes from the specified NSX Edge appliance.
      /global:
        displayName: routingGlobalConfig
        description: |
          Working with the NSX Edge Global Configuration
          ----
        put:
          displayName: routingGlobalConfigUpdate
          description: Configure global route.
          body:
            application/xml:
              example: |
                <routingGlobalConfig>
                  <routerId></routerId>
                  <ecmp></ecmp>
                  <logging>
                    <enable></enable>
                    <logLevel></logLevel>
                  </logging>
                  <ipPrefixes>
                    <ipPrefix>
                      <name></name>
                      <ipAddress></ipAddress>
                    </ipPrefix>
                  </ipPrefixes>
                </routingGlobalConfig>
              schema: routingGlobalConfigUpdate
        get:
          displayName: routingGlobalConfigRead
          description: |
            Retrieve routing info from NSX Manager database (default route
            settings, static route configurations).
      /static:
        displayName: routingConfigStatic
        description: |
          Working with Static and Default Routes
          ----
        get:
          displayName: routingConfigStaticRead
          description: Read static and default routes.
        put:
          displayName: routingConfigStaticUpdate
          description: Configure static and default routes.
          body:
            application/xml:
              example: |
                <staticRouting>
                  <staticRoutes>
                    <route>
                      <description></description>
                      <vnic></vnic>
                      <network></network>
                      <nextHop></nextHop>
                      <mtu></mtu>
                    </route>
                  </staticRoutes>
                  <defaultRoute>
                    <description></description>
                    <vnic></vnic>
                    <gatewayAddress></gatewayAddress>
                    <mtu></mtu>
                  </defaultRoute>
                </staticRouting>
              schema: routingConfigStaticUpdate
        delete:
          displayName: routingConfigStaticDelete
          description: |
            Delete both static and default routing config stored in the NSX
            Manager database.
      /ospf:
        displayName: routingOSPF
        description: |
          Working With OSPF Routing for NSX Edge
          ----
          NSX Edge supports OSPF, an interior gateway protocol that routes IP packets
          only within a single routing domain. It gathers link state information from
          available routers and constructs a topology map of the network.  The topology
          determines the routing table presented to the Internet Layer, which makes
          routing decisions based on the destination IP address found in IP packets.
          
          OSPF routing policies provide a dynamic process of traffic load balancing
          between routes of equal cost. An OSPF network is divided into routing areas to
          optimize traffic. An area is a logical collection of OSPF networks, routers,
          and links that have the same area identification.  
          
          Areas are identified by an Area ID.
        get:
          displayName: routingOSPFRead
          description: |
            Retrieve OSPF configuration.
            
            **Method history:**
            
            Release | Modification
            --------|-------------
            6.2.3 | Method updated. **isis** configuration section removed. 
            6.3.0 | Method updated. Parameter **defaultOriginate** removed for logical router NSX Edges.  <br>Parameter **translateType7ToType5** added to OSPF section. 
#            6.3.0 | Method updated. **isis** parameter removed from route redistribution rules configuration.
        put:
          displayName: routingOSPFUpdate
          description: |
            Configure OSPF.
            
            **Method history:**
            
            Release | Modification
            --------|-------------
            6.2.3 | Method updated. **isis** configuration section removed. 
            6.3.0 | Method updated. Parameter **defaultOriginate** removed for logical router NSX Edges.  <br>Parameter **translateType7ToType5** added to OSPF section. 
#            6.3.0 | Method updated. **isis** parameter removed from route redistribution rules configuration.
          body:
            application/xml:
              example: |
                <ospf>
                  <enabled></enabled>
                  <ospfAreas>
                    <ospfArea>
                      <areaId></areaId>
                      <translateType7ToType5></translateType7ToType5>
                      <type></type>
                      <authentication>
                        <type></type>
                        <value></value>
                      </authentication>
                    </ospfArea>
                  </ospfAreas>
                  <ospfInterfaces>
                    <ospfInterface>
                      <vnic></vnic>
                      <areaId></areaId>
                      <helloInterval></helloInterval>
                      <deadInterval></deadInterval>
                      <priority></priority>
                      <cost></cost>
                    </ospfInterface>
                  </ospfInterfaces>
                  <redistribution>
                    <enabled></enabled>
                    <rules>
                      <rule>
                        <prefixName></prefixName>
                        <from>
                          <ospf></ospf>
                          <bgp></bgp>
                          <static></static>
                          <connected></connected>
                        </from>
                        <action></action>
                      </rule>
                    </rules>
                  </redistribution>
                </ospf>
              schema: routingOSPFUpdate
        delete:
          displayName: routingOSPFDelete
          description: Delete OSPF routing.
      /bgp:
        displayName: routingBGP
        description: |
          Working with BGP Routes for NSX Edge
          ---
          Border Gateway Protocol (BGP) makes core routing decisions. It includes a table
          of IP networks or prefixes which designate network reachability among
          autonomous systems. An underlying connection between two BGP speakers is
          established before any routing information is exchanged. Keep alive messages
          are sent out by the BGP speakers in order to keep this relationship alive. Once
          the connection is established, the BGP speakers exchange routes and synchronize
          their tables.
        get:
          displayName: routingBGPRead
          description: |
            Retrieve BGP configuration.
            
            **Method history:**
            
            Release | Modification
            --------|-------------
            6.2.3 | Method updated. **isis** configuration section removed. 
            6.3.0 | Method updated. Parameter **defaultOriginate** removed for logical router NSX Edges.  <br>Parameters **localASNumber** and **remoteASNumber** added to BGP section.
#            6.3.0 | Method updated. **isis** parameter removed from route redistribution rules configuration.
        put:
          displayName: routingBGPUpdate
          description: |
            Configure BGP.
            
            **Method history:**
            
            Release | Modification
            --------|-------------
            6.2.3 | Method updated. **isis** configuration section removed. 
            6.3.0 | Method updated. Parameter **defaultOriginate** removed for logical router NSX Edges. <br>Parameters **localASNumber** and **remoteASNumber** added to BGP section.
#            6.3.0 | Method updated. **isis** parameter removed from route redistribution rules configuration.
          body:
            application/xml:
              example: |
                <bgp>
                  <enabled></enabled>
                  <localAS></localAS>
                  <localASNumber></localASNumber>
                  <bgpNeighbours>
                    <bgpNeighbour>
                      <ipAddress></ipAddress>
                      <remoteAS></remoteAS>
                      <remoteASNumber></remoteASNumber>
                      <weight></weight>
                      <holdDownTimer></holdDownTimer>
                      <keepAliveTimer></keepAliveTimer>
                      <password></password>
                      <bgpFilters>
                        <bgpFilter>
                          <direction></direction>
                          <action></action>
                          <network></network>
                          <ipPrefixGe></ipPrefixGe>
                          <ipPrefixLe></ipPrefixLe>
                        </bgpFilter>
                      </bgpFilters>
                    </bgpNeighbour>
                  </bgpNeighbours>
                  <redistribution>
                    <enabled></enabled>
                    <rules>
                      <rule>
                        <prefixName></prefixName>
                        <from>
                          <ospf></ospf>
                          <bgp></bgp>
                          <static></static>
                          <connected></connected>
                        </from>
                        <action></action>
                      </rule>
                    </rules>
                  </redistribution>
                </bgp>
              schema: routingBGPUpdate
        delete:
          displayName: routingBGPDelete
          description: Delete BGP Routing
    /bridging/config:
      displayName: bridging
      description: |
        Working With Layer 2 Bridging
        ----
      get:
        displayName: bridgingRead
        description: Retrieve bridge configuration.
      put:
        displayName: bridingUpdate
        description: Configure a bridge.
        body:
          application/xml:
            example: |
              <bridges>
                <version></version>
                <enabled></enabled>
                <bridge>
                  <name></name>
                  <virtualWire></virtualWire>
                  <dvportGroup></dvportGroup>
                </bridge>
              </bridges>
            schema: bridingUpdate
      delete:
        displayName: bridgingDelete
        description: Delete bridges.
    /loadbalancer/config:
      displayName: loadBalancer
      description: |
        Working With NSX Edge Load Balancer
        ----
        
        The NSX Edge load balancer enables network traffic to follow multiple
        paths to a specific destination. It distributes incoming service
        requests evenly among multiple servers in such a way that the load
        distribution is transparent to users. Load balancing thus helps in
        achieving optimal resource utilization, maximizing throughput,
        minimizing response time, and avoiding overload. NSX Edge provides load
        balancing up to Layer 7.
        
        You map an external, or public, IP address to a set of internal servers
        for load balancing. The load balancer accepts TCP, HTTP, or HTTPS
        requests on the external IP address and decides which internal server
        to use.  Port 8090 is the default listening port for TCP, port 80 is
        the default port for HTTP, and port 443 is the default port for HTTPs.
      get:
        displayName: loadBalancerRead
        description: Get load balancer configuration.
      put:
        displayName: loadBalancerConfig
        description: |
          Configure load balancer.
          
          The input contains five parts: application profile, virtual server,
          pool, monitor and application rule.
          
          For the data path to work, you need to add firewall rules to allow
          required traffic as per the load balancer configuration.
        body:
          application/xml:
            example: |
              <loadBalancer>
                <enabled></enabled>
                <enableServiceInsertion></enableServiceInsertion>
                <accelerationEnabled></accelerationEnabled>
                <logging>
                  <enable></enable>
                  <logLevel></logLevel>
                </logging>
                <virtualServer>
                  <virtualServerId></virtualServerId>
                  <name></name>
                  <description></description>
                  <enabled></enabled>
                  <ipAddress></ipAddress>
                  <protocol></protocol>
                  <port></port>
                  <connectionLimit></connectionLimit>
                  <connectionRateLimit></connectionRateLimit>
                  <applicationProfileId></applicationProfileId>
                  <defaultPoolId></defaultPoolId>
                  <enableServiceInsertion></enableServiceInsertion>
                  <accelerationEnabled></accelerationEnabled>
                  <applicationRuleId></applicationRuleId>
                </virtualServer>
                <applicationProfile>
                  <applicationProfileId></applicationProfileId>
                  <name></name>
                  <insertXForwardedFor></insertXForwardedFor>
                  <sslPassthrough></sslPassthrough>
                  <template></template>
                  <persistence>
                    <method></method>
                    <cookieName></cookieName>
                    <cookieMode></cookieMode>
                  </persistence>
                  <serverSslEnabled></serverSslEnabled>
                  <clientSsl>
                    <clientAuth></clientAuth>
                    <serviceCertificate></serviceCertificate>
                  </clientSsl>
                </applicationProfile>
                <pool>
                  <poolId></poolId>
                  <name></name>
                  <description></description>
                  <transparent></transparent>
                  <algorithm></algorithm>
                  <monitorId></monitorId>
                  <member>
                    <memberId></memberId>
                    <ipAddress></ipAddress>
                    <weight></weight>
                    <port></port>
                    <monitorPort></monitorPort>
                    <minConn></minConn>
                    <maxConn></maxConn>
                    <name></name>
                  </member>
                </pool>
                <monitor>
                  <monitorId></monitorId>
                  <type></type>
                  <interval></interval>
                  <timeout></timeout>
                  <maxRetries></maxRetries>
                  <method></method>
                  <url></url>
                  <name></name>
                </monitor>
                <applicationRule>
                  <name></name>
                  <script></script>
                </applicationRule>
              </loadBalancer>
            schema: loadBalancerConfig
      delete:
        displayName: loadBalancerDelete
        description: Delete load balancer configuration.
      /applicationprofiles:
        displayName: applicationProfiles
        description: |
          Working with Application Profiles
          ----
          You create an application profile to define the behavior of a
          particular type of network traffic. After configuring a profile, you
          associate the profile with a virtual server. The virtual server then
          processes traffic according to the values specified in the profile.
          Using profiles enhances your control over managing network traffic,
          and makes traffic-management tasks easier and more efficient.
        post:
          displayName: applicationProfilesCreate
          description: Add an application profile.
          body:
            application/xml:
              example: |
                <applicationProfile>
                  <name></name>
                  <insertXForwardedFor></insertXForwardedFor>
                  <sslPassthrough></sslPassthrough>
                  <persistence>
                    <method></method>
                    <cookieName></cookieName>
                    <cookieMode></cookieMode>
                  </persistence>
                </applicationProfile>
              schema: applicationProfilesCreate
        get:
          displayName: applicationProfilesRead
          description: Retrieve all application profiles on the specified Edge.
        delete:
          displayName: applicationProfilesDelete
          description: Delete all application profiles on the specified Edge.
        /{appProfileID}:
          displayName: applicationProfile
          description: |
            Working With a Specific Application Profile
            ----
          uriParameters:
            appProfileID:
              required: true
              displayName: appProfileID
              description: Specified application profile.
          put:
            displayName: applicationProfileUpdate
            description: Modify an application profile.
            body:
              application/xml:
                example: |
                  <applicationProfile>
                    <name></name>
                    <insertXForwardedFor></insertXForwardedFor>
                    <sslPassthrough></sslPassthrough>
                    <persistence>
                      <method></method>
                      <cookieName></cookieName>
                      <cookieMode></cookieMode>
                    </persistence>
                  </applicationProfile>
                schema: applicationProfileUpdate
          get:
            displayName: applicationProfileRead
            description: Retrieve an application profile.
          delete:
            displayName: applicationProfileDelete
            description: Delete an application profile.
      /applicationrules:
        displayName: appRules
        description: |
          Working With Application Rules
          ----
          You can write an application rule to directly manipulate and manage
          IP application traffic.
        post:
          displayName: appRulesCreate
          description: Add an application rule.
          body:
            application/xml:
              example: |
                <applicationRule>
                  <name></name>
                  <script></script>
                </applicationRule>
              schema: appRulesCreate
        get:
          displayName: appRulesRead
          description: Retrieve all application rules.
        delete:
          displayName: appRulesDelete
          description: Delete all application rules.
        /{appruleID}:
          displayName: appRule
          description: |
            Working with a Specific Application Rule
            ----
          uriParameters:
            appruleID:
              required: true
              displayName: appruleID
              description: Specified application rule.
          get:
            displayName: appRuleRead
            description: Retrieve an application rule.
          put:
            displayName: appRuleUpdate
            description: Modify an application rule.
            body:
              application/xml:
                example: |
                  <applicationRule>
                    <name></name>
                    <script></script>
                  </applicationRule>
                schema: appRuleUpdate
          delete:
            displayName: appRuleDelete
            description: Delete an application rule.
      /monitors:
        displayName: lbMonitors
        description: |
          Working With Load Balancer Monitors
          ----
          You create a service monitor to define health check parameters for a
          particular type of network traffic. When you associate a service
          monitor with a pool, the pool members are monitored according to the
          service monitor parameters.
        post:
          displayName: lbMonitorsCreate
          description: Add a load balancer monitor.
          body:
            application/xml:
              example: |
                <monitor>
                  <type></type>
                  <interval></interval>
                  <timeout></timeout>
                  <maxRetries></maxRetries>
                  <method></method>
                  <url></url>
                  <name></name>
                </monitor>
              schema: lbMonitorsCreate
        get:
          displayName: lbMonitorsRead
          description: Retrieve all load balancer monitors.
        delete:
          displayName: lbMonitorsDelete
          description: Delete all load balancer monitors.
        /{monitorID}:
          displayName: lbMonitor
          description: |
            Working With a Specific Load Balancer Monitor
            ----
          uriParameters:
            monitorID:
              required: true
              displayName: monitorID
              description: Specified monitor.
          get:
            displayName: lbMonitorRead
            description: Retrieve a load balancer monitor.
          put:
            displayName: lbMonitorUpdate
            description: Modify a load balancer monitor.
            body:
              application/xml:
                example: |
                  <monitor>
                    <type></type>
                    <interval></interval>
                    <timeout></timeout>
                    <maxRetries></maxRetries>
                    <method></method>
                    <url></url>
                    <name></name>
                  </monitor>
                schema: lbMonitorUpdate
          delete:
            displayName: lbMonitorDelete
            description: Delete a load balancer monitor.
      /virtualservers:
        displayName: virtualServers
        description: |
          Working With Virtual Servers
          ----
        post:
          displayName: virtualServersCreate
          description: |
            Add a virtual server.
            
            You can add an NSX Edge internal or uplink interface as a virtual
            server.
            
            Parameter |  Description | Comments
            ---|---|---
             **name**      |Name of virtual server.|Required.
             **description**     |Description of virtual server.|Optional.
             **enabled**    |Whether the virtual server is enabled.|Optional. Boolean. Options are *true* or *false*. Default is *true*.
             **ipAddress**      |IP address that the load balancer is listening on. |Required. A valid NSX Edge vNic IP address (IPv4 or IPv6).
             **protocol**      |Virtual server protocol.|Required. Options are: *HTTP*, *HTTPS*, *TCP*, *UDP*.
             **port**      |Port number or port range.|Required. Port number such as *80*, port range such as *80,443* or *1234-1238*, or a combination such as *443,6000-7000*.
             **connectionLimit**      |Maximum concurrent connections.|Optional. Long.
             **connectionRateLimit**      |Maximum incoming new connection requests per second.|Optional. Long.
             **defaultPoolId**      |Default backend server pool identifier.|Optional.
             **applicationProfileId**      |Application profile identifier.|Optional.
             **accelerationEnabled**      |Use the faster L4 load balancer  engine rather than L7 load  balancer engine.|Optional. Boolean. Options are *true* or *false*. If a virtual server configuration such as application rules, HTTP type, or cookie persistence, is using the L7 load balancer engine, then the L7 load balancer engine is used, even if **accelerationEnabled** is not set to true.
             **applicationRuleId**      |Application rule identifier list.|Optional. Each item should be a valid **applicationRuleId**.
          body:
            application/xml:
              example: |
                <virtualServer>
                  <name>http_vip_2</name>
                  <description>http virtualServer 2</description>
                  <enabled>true</enabled>
                  <ipAddress>10.117.35.172</ipAddress>
                  <protocol>http</protocol>
                  <port>443,6000-7000</port>
                  <connectionLimit>123</connectionLimit>
                  <connectionRateLimit>123</connectionRateLimit>
                  <applicationProfileId>applicationProfile-1</applicationProfileId>
                  <defaultPoolId>pool-1</defaultPoolId>
                  <enableServiceInsertion>false</enableServiceInsertion>
                  <accelerationEnabled>true</accelerationEnabled>
                </virtualServer>
              schema: virtualServersCreate
        get:
          displayName: virtualServersRead
          description: Retrieve all virtual servers.
        delete:
          displayName: virtualServersDelete
          description: Delete all virtual servers.
        /{virtualserverID}:
          displayName: virtualServer
          description: Specified virtual server.
          uriParameters:
            virtualserverID:
              required: true
              displayName: virtualserverID
              description: Specified virtual server ID.
          get:
            displayName: virtualServerRead
            description: Retrieve details for the specified virtual server.
          delete:
            displayName: virtualServerDelete
            description: Delete the specified virtual server.
      /pools:
        displayName: pools
        description: |
          Working with Server Pools
          ----
          You can add a server pool to manage and share backend servers
          flexibly and efficiently. A pool manages load balancer distribution
          methods and has a service monitor attached to it for health check
          parameters.
          
          Parameter |  Description | Comments
          ---|---|---
          **pool > name**   |Name of pool.|Required.
          **description**   |Description of pool.|Optional.
          **algorithm**   |Pool member balancing algorithm.|Optional. Options are: *round-robin*, *ip-hash*, *uri*, *leastconn*, *url*, *httpheader*. Default is *round-robin*.
          **algorithmParameters**   |Algorithm parameters for *httpheader* and *url*. |Optional. Required for *httpheader* and *url* algorithm.
          **transparent**   |Whether client IP addresses are  visible to the backend servers.|Optional. Boolean. Options are *True* or *False*. Default is *False*.
          **monitorId**   |Monitor identifier list.|Optional. At the most one monitor is supported.
          **member**   |Pool member list.|Optional.
          **member > name**  |Member name.|Optional. Required, when used in ACL rule.
          **ipAddress**  |Member IP address.|Optional. Required, if **groupingObjectId** is null.
          **groupingObjectId**  |Member grouping object identifier.|Optional. Required, if **ipAddress** is null.
          **groupingObjectName**  |Member grouping object name.|Optional.
          **weight**  |Member weight.|Optional. Default is *1*.
          **monitorPort**  |Monitor port.|Optional. Long. Either  **monitorPort** or **port** must be configured.
          **port**  |Member port.|Optional. Long. Either  **monitorPort** or **port** must be configured. 
          **maxConn**  |Maximum number of concurrent connections the member can handle.|Optional. Default is *0* which means unlimited.
          **minConn**  |Minimum number of concurrent connections a member must always accept.|Optional. Default is *0* which means unlimited.
          **condition**  |Condition of the member.|Optional. Options are: *enabled*, *disabled*, or *drain*. Default is *enabled*.
        post:
          displayName: poolsCreate
          description: |
            Add a load balancer server pool to the Edge.

            **Method history:**

            Release | Modification
            --------|-------------
            6.3.0 | Method updated. Member **condition** can be set to *drain*.
          body:
            application/xml:
              example: |
                <pool>
                  <name></name>
                  <description></description>
                  <transparent></transparent>
                  <algorithm></algorithm>
                  <monitorId></monitorId>
                  <member>
                    <ipAddress></ipAddress>
                    <weight></weight>
                    <port></port>
                    <minConn></minConn>
                    <maxConn></maxConn>
                    <name></name>
                    <monitorPort></monitorPort>
                  </member>
                </pool>
              schema: poolsCreate
        get:
          displayName: poolsRead
          description: Get all server pools on the specified NSX Edge.
        delete:
          displayName: poolsDelete
          description: |
            Delete all server pools configured on the specified NSX Edge.
        /{poolID}:
          displayName: pool
          description: |
            Working With a Specific Server Pool
            ----
          uriParameters:
            poolID:
              required: true
              displayName: poolID
              description: Specified pool ID.
          get:
            displayName: poolRead
            description: Retrieve information about the specified server pool.
          put:
            displayName: poolUpdate
            description: |
              Update the specified server pool.

              **Method history:**

              Release | Modification
              --------|-------------
              6.3.0 | Method updated. Member **condition** can be set to *drain*.
            body:
              application/xml:
                example: |
                  <pool>
                    <name></name>
                    <description></description>
                    <transparent></transparent>
                    <algorithm></algorithm>
                    <monitorId></monitorId>
                    <member>
                      <ipAddress></ipAddress>
                      <weight></weight>
                      <monitorPort></monitorPort>
                      <port></port>
                      <maxConn></maxConn>
                      <minConn></minConn>
                      <condition>enabled</condition>
                      <name></name>
                    </member>
                  </pool>
                schema: poolUpdate
          delete:
            displayName: poolDelete
            description: Delete the specified server pool.
      /members/{memberID}:
        displayName: lbMemberCond
        description: |
          Working With a Specific Load Balancer Member
          ----
        uriParameters:
          memberID:
            required: true
            displayName: memberID
            description: Member ID.
        post:
          displayName: lbMemberCondToggle # dupfix lbMemberCond
          description: Update enabled status of the specified member.
          queryParameters:
            enable:
              required: true
              displayName: enable
              type: boolean
              description: |
                Set to *true* to enable member, *false* to disable member.
    /loadbalancer/statistics:
      displayName: lbStatistics
      description: |
        Working With Load Balancer Statistics
        ----
      get:
        displayName: lbStatisticsRead
        description: Retrieve load balancer statistics.
    /loadbalancer/acceleration:
      displayName: lbAcceleration
      description: |
        Working With Load Balancer Acceleration
        ----
      post:
        queryParameters:
          enable:
            required: true
            displayName: enable
            description: Enable or disable load balancer acceleration mode.
            type: boolean
    /dns/config:
      displayName: edgeDns
      description: |
        Working with NSX Edge DNS Server Configuration
        ----
        You can configure external DNS servers to which NSX Edge can relay
        name resolution requests from clients. NSX Edge will relay client
        application requests to the DNS servers to fully resolve a network
        name and cache the response from the servers.
      get:
        displayName: edgeDnsRead
        description: Retrieve DNS configuration.
      put:
        displayName: edgeDnsUpdate
        description: Configure DNS servers.
        body:
          application/xml:
            example: |
              <dns>
                <version>2</version>
                <enabled>true</enabled>
                <cacheSize>128</cacheSize>
                <listeners>
                  <ipAddress>192.168.100.1</ipAddress>
                  <ipAddress>192.168.100.2</ipAddress>
                </listeners>
                <dnsViews>
                  <dnsView>
                    <viewId>view-0</viewId>
                    <name>vsm-default-view</name>
                    <enabled>true</enabled>
                    <viewMatch>
                      <ipAddress>any</ipAddress>
                      <vnic>any</vnic>
                    </viewMatch>
                    <recursion>false</recursion>
                    <forwarders>
                      <ipAddress>10.117.0.1</ipAddress>
                    </forwarders>
                  </dnsView>
                </dnsViews>
                <logging>
                  <enable>true</enable>
                  <logLevel>info</logLevel>
                </logging>
              </dns>
            schema: edgeDnsUpdate
      delete:
        displayName: edgeDnsDelete
        description: Delete DNS configuration
    /dns/statistics:
      displayName: edgeDnsStats
      description: Get DNS server statistics
      get:
        displayName: edgeDnsStatsRead # dupfix edgeDnsStats
        description: Get DNS server statistics
    /dhcp/config:
      displayName: dhcp
      description: |
        Configure DHCP for NSX Edge
        ----
        NSX Edge provides DHCP service to bind assigned IP addresses to MAC
        addresses, helping to prevent MAC spoofing attacks. All virtual
        machines protected by a NSX Edge can obtain IP addresses dynamically
        from the NSX Edge DHCP service.
        
        NSX Edge supports IP address pooling and one-to-one static IP address
        allocation based on the vCenter managed object ID (vmId) and interface
        ID (interfaceId) of the requesting client.
        
        If either bindings or pools are not included in the PUT call, existing
        bindings or pools are deleted.
        
        NSX Edge DHCP service adheres to the following rules:
        * Listens on the NSX Edge internal interface (non-uplink interface)
        for DHCP discovery.
        * As stated above, vmId specifies the vc-moref-id of the virtual
        machine, and vnicId specifies the index of the
        vNic for the requesting client. The hostname is an identification of
        the binding being created. This hostName is not pushed as the
        specified host name of the virtual machine.
        * By default, all clients use the IP address of the internal interface
        of the NSX Edge as the default gateway address. To override it,
        specify **defaultGateway** per binding or per pool. The client’s broadcast
        and subnetMask values are from the internal interface for the
        container network.
        * **leaseTime** can be infinite, or a number of seconds. If not specified,
        the default lease time is 1 day.
        * Logging is disabled by default.
        * Setting the parameter **enable** to *true* starts the DHCP service
        while setting **enable** to *false* stops the service.  
        * Both **staticBinding** and **ipPools** must be part of the PUT request body.
        Else, they will be deleted if configured earlier.
        
        **DHCP Configuration Paramters**
        
        Parameter Name | Parameter Information 
        ------|-----
        **enabled** | Default is true.
        **staticBinding** | Assign an IP address via DHCP statically rather than dynamically. You can either specify **macAddress** directly, or specify **vmId** and **vnicId**. In case both are specified, only **macAddress** will be used; **vmId** and **vnicId** will be ignored.
        **staticBinding > macAddress** | Optional.
        **staticBinding > vmId** | Optional. The VM must be connected to the specified **vnicId**.
        **staticBinding > vnicId** | Optional. Possible values 0 to 9.
        **staticBinding > hostname** | Optional. Disallow duplicate.
        **staticBinding > ipAddress** | The IP can either belong to a a subnet of one of Edge's vNics or it can be any valid IP address, but the IP must not overlap with any primary/secondary IP addresses associated with any of Edge's vNICs. If the IP does not belong to any Edge vNic subnets, you must ensure that the default gateway and subnetMask are configured via this API call.
        **ipPool > ipRange** |  Required. The IP range can either fall entirely within one of the Edge vNIC subnets, or it can be a valid IP range outside any Edge subnets. The IP range, however, cannot contain an IP that is defined as a vNic primary secondary IP. If the range does not fall entirely within one of the Edge vNIC subnets, you must provide correct **subnetMask** and **defaultGateway**.
        **defaultGateway**<br>(staticBinding and ipPool) | Optional. If the ipRange (for ipPool) or assigned IP (for staticBinding) falls entirely within one of the Edge vNIC subnets, **defaultGateway** is set to the primary IP of the vNIC configured with the matching subnet.  Otherwise, you must provide the correct gateway IP. If an IP is not provided, the client host may not get default gateway IP from the DHCP server.
        **subnetMask**<br>(staticBinding and ipPool) | Optional. If not specified, and the the ipRange (for ipPool) or assigned IP (for staticBinding) belongs to an Edge vNic subnet, it is defaulted to the subnet mask of this vNic subnet. Otherwise, it is defaulted to a minimum subnet mask which is figured out with the IP range itself, e.g. the mask of range 192.168.5.2-192.168.5.20 is 255.255.255.224. You can edit this range, if required.
        **domainName** <br>(staticBinding and ipPool) | Optional.
        **primaryNameServer**<br>**secondaryNameServer**<br>(staticBinding and ipPool)|  Optional. If **autoConfigureDNS** is *true*, the DNS primary/secondary IPs will be generated from DNS service (if configured).
        **leaseTime**<br>(staticBinding and ipPool) | Optional. In seconds, default is *86400*. Valid **leaseTime** is a valid number or *infinite*. 
        **autoConfigureDns**<br>(staticBinding and ipPool) |  Optional. Default is *true*. 
        **nextServer**<br>(staticBinding and ipPool) | Global TFTP server setting. If an IP pool or static binding has a TFTP server configured via **option66** or **option150**, that server will be used instead.
        **dhcpOptions** <br>(staticBinding and ipPool) | Optional.
        **dhcpOptions > option121**<br>(staticBinding and ipPool) | Add a static route.
        **dhcpOptions > option121 > destinationSubnet**<br>(staticBinding and ipPool) | Destination network, for example 1.1.1.4/30.
        **dhcpOptions > option121 > router**<br>(staticBinding and ipPool) | Router IP address.
        **dhcpOptions > option66**<br>(staticBinding and ipPool) | Hostname or IP address of a single TFTP server for this IP pool.
        **dhcpOptions > option67**<br>(staticBinding and ipPool) | Filename to be downloaded from TFTP server.
        **dhcpOptions > option150**<br>(staticBinding and ipPool) | IP address of TFTP server.
        **dhcpOptions > option150 > server**<br>(staticBinding and ipPool) | Use to specify more than one TFTP server by IP address for this IP Pool.
        **dhcpOptions > option26**<br>(staticBinding and ipPool) | MTU.
        **dhcpOptions > other**<br>(staticBinding and ipPool) | Add DHCP options other than 26, 66, 67, 121, 150.
        **dhcpOptions > other > code**<br>(staticBinding and ipPool) | Use the DHCP option number only. For example, to specify dhcp option 80, enter *80*.
        **dhcpOptions > other > value**<br>(staticBinding and ipPool) | The DHCP option value, in hex. For example, *2F766172*.
        **logging** | Optional. Logging is disabled by default.
        **logging > enable** |  Optional, default is *false*.
        **logging > logLevel** | Optional, default is *info*.
      get:
        displayName: dhcpRead
        description: Get DHCP configuration.
      put:
        displayName: dhcpUpdate
        description: |
          Configure DHCP service.
          
          Release | Modification
          --------|-------------
          6.2.3 | Method updated. DHCP options added.
        body:
          application/xml:
            example: |
              <dhcp>
                <enabled>true</enabled>
                <staticBindings>
                  <staticBinding> 
                    <macAddress>12:34:56:78:90:AB</macAddress> 
                    <vmId>vm-111</vmId> 
                    <vnicId>1</vnicId>
                    <hostname>abcd</hostname>
                    <ipAddress>192.168.4.2</ipAddress> 
                    <subnetMask>255.255.255.0</subnetMask> 
                    <defaultGateway>192.168.4.1</defaultGateway> 
                    <domainName>eng.vmware.com</domainName> 
                    <primaryNameServer>192.168.4.1</primaryNameServer> 
                    <secondaryNameServer>4.2.2.4</secondaryNameServer> 
                    <leaseTime>infinite</leaseTime> 
                    <autoConfigureDNS>true</autoConfigureDNS> 
                  </staticBinding>
                </staticBindings>
                <ipPools>
                  <ipPool>
                    <ipRange>192.168.4.192-192.168.4.220</ipRange> 
                    <defaultGateway>192.168.4.1</defaultGateway> 
                    <subnetMask>255.255.255.0</subnetMask> 
                    <domainName>eng.vmware.com</domainName> 
                    <primaryNameServer>192.168.4.1</primaryNameServer> 
                    <secondaryNameServer>4.2.2.4</secondaryNameServer> 
                    <leaseTime>3600</leaseTime> 
                    <autoConfigureDNS>true</autoConfigureDNS> 
                    <nextServer>11.11.18.105</nextServer>  
                    <dhcpOptions> 
                      <option121> 
                        <staticRoute> 
                          <destinationSubnet>1.1.1.4/30</destinationSubnet>  
                          <router>10.10.10.254</router> 
                        </staticRoute>  
                        <staticRoute> 
                          <destinationSubnet>2.2.2.4/30</destinationSubnet>  
                          <router>10.10.10.210</router> 
                        </staticRoute> 
                      </option121>  
                      <option66>boot.tftp.org</option66>  
                      <option67>/opt/tftpServer</option67>  
                      <option150> 
                        <server>10.10.10.1</server>  
                        <server>100.100.100.1</server> 
                      </option150>  
                      <option26>2048</option26>  
                      <other> 
                        <code>80</code>  
                        <value>2F766172</value> 
                      </other>  
                      <other> 
                        <code>85</code>  
                        <value>01010101</value> 
                      </other> 
                    </dhcpOptions> 
                  </ipPool>
                </ipPools>
                <logging> 
                  <enable>false</enable> 
                  <logLevel>info</logLevel> 
                </logging>
              </dhcp>
            schema: dhcpUpdate
      delete:
        displayName: dhcpDelete
        description: |
          Delete the DHCP configuration, restoring it to factory default.
      /ippools:
        displayName: dhcpPool
        description: |
          Working with DHCP IP Pools
          -----
        post:
          displayName: dhcpPoolCreate
          description: |
            Add an IP pool to the DHCP configuration. Returns a pool ID within
            a Location HTTP header.
            
            **Method history:**
            
            Release | Modification
            --------|-------------
            6.2.3 | Method updated. DHCP options added.
          body:
            application/xml:
              example: |
                <ipPool>
                  <ipRange>192.168.5.2-192.168.5.20</ipRange>
                  <defaultGateway>192.168.5.1</defaultGateway>
                  <domainName>eng.vmware.com</domainName>
                  <primaryNameServer>1.2.3.4</primaryNameServer>
                  <secondaryNameServer>4.3.2.1</secondaryNameServer>
                  <leaseTime>3600</leaseTime>
                  <autoConfigureDNS>true</autoConfigureDNS>
                  <nextServer>11.11.18.105</nextServer>  
                  <dhcpOptions> 
                    <option121> 
                      <staticRoute> 
                        <destinationSubnet>1.1.1.4/30</destinationSubnet>  
                        <router>10.10.10.254</router> 
                      </staticRoute>  
                      <staticRoute> 
                        <destinationSubnet>2.2.2.4/30</destinationSubnet>  
                        <router>10.10.10.210</router> 
                      </staticRoute> 
                    </option121>  
                    <option66>boot.tftp.org</option66>  
                    <option67>/opt/tftpServer</option67>  
                    <option150> 
                      <server>10.10.10.1</server>  
                      <server>100.100.100.1</server> 
                    </option150>  
                    <option26>2048</option26>  
                    <other> 
                      <code>80</code>  
                      <value>2F766172</value> 
                    </other>  
                    <other> 
                      <code>85</code>  
                      <value>01010101</value> 
                    </other> 
                  </dhcpOptions> 
                </ipPool>
              schema: dhcpPoolCreate
        /{poolID}:
          displayName: dhcpPoolID
          description: |
            Working with a Specific DHCP IP Pool
            ----
          uriParameters:
            poolID:
              required: true
              displayName: poolID
              description: Specified DHCP IP pool
          delete:
            displayName: dhcpPoolIDDelete
            description: Delete a pool specified by pool ID
      /bindings:
        displayName: dhcpStaticBinding
        description: |
          Working With DHCP Static Bindings
          ----
        post:
          displayName: dhcpStaticBindingCreate
          description: |
            Append a static-binding to DHCP config. A static-binding ID is
            returned within a Location HTTP header.
            
            **Method history:**
            
            Release | Modification
            --------|-------------
            6.2.3 | Method updated. DHCP options added.
          body:
            application/xml:
              example: |
                <staticBinding>
                  <vmId></vmId>
                  <vnicId></vnicId>
                  <hostname></hostname>
                  <ipAddress></ipAddress>
                  <defaultGateway></defaultGateway>
                  <domainName></domainName>
                  <primaryNameServer></primaryNameServer>
                  <secondaryNameServer></secondaryNameServer>
                  <leaseTime></leaseTime>
                  <autoConfigureDNS></autoConfigureDNS>
                  <nextServer>11.11.18.105</nextServer>  
                  <dhcpOptions> 
                    <option121> 
                      <staticRoute> 
                        <destinationSubnet>1.1.1.4/30</destinationSubnet>  
                        <router>10.10.10.254</router> 
                      </staticRoute>  
                      <staticRoute> 
                        <destinationSubnet>2.2.2.4/30</destinationSubnet>  
                        <router>10.10.10.210</router> 
                      </staticRoute> 
                    </option121>  
                    <option66>boot.tftp.org</option66>  
                    <option67>/opt/tftpServer</option67>  
                    <option150> 
                      <server>10.10.10.1</server>  
                      <server>100.100.100.1</server> 
                    </option150>  
                    <option26>2048</option26>  
                    <other> 
                      <code>80</code>  
                      <value>2F766172</value> 
                    </other>  
                    <other> 
                      <code>85</code>  
                      <value>01010101</value> 
                    </other> 
                  </dhcpOptions> 
                </staticBinding>
              schema: dhcpStaticBindingCreate
        /{bindingID}:
          displayName: dhcpStaticBindingID
          description: |
            Working with a Specific DHCP Static Binding
            ----
          uriParameters:
            bindingID:
              required: true
              displayName: bindingID
              description: Specified static-binding ID
          delete:
            displayName: dhcpStaticBindingIDDelete
            description: Delete the static-binding by ID
      /relay:
        displayName: dhcpRelay
        description: |
          Working With DHCP Relays
          ----
        get:
          displayName: dhcpRelayRead
          description: Query DHCP relay
        put:
          displayName: dhcpRelayUpdate
          description: Configure DHCP relay
          body:
            application/xml:
              example: |
                <relay>
                  <relayServer>
                    <groupingObjectId></groupingObjectId>
                    <groupingObjectId></groupingObjectId>
                    <ipAddress></ipAddress>
                    <fqdn></fqdn>
                  </relayServer>
                  <relayAgents>
                    <relayAgent>
                      <vnicIndex></vnicIndex>
                      <giAddress></giAddress>
                    </relayAgent>
                  </relayAgents>
                </relay>
              schema: dhcpRelayUpdate
        delete:
          displayName: dhcpRelayDelete
          description: Delete DHCP relay configuration
    /dhcp/leaseInfo:
      displayName: dhcpLease
      description: |
        Working With DHCP Leases
      get:
        displayName: dhcpLeaseRead
        description: Get DHCP lease information.
    /highavailability/config:
      displayName: highAvailability
      description: |
        Working with NSX Edge High Availability
        ----
      get:
        displayName: highAvailabilityRead
        description: Get high availability configuration.
      put:
        displayName: highAvailabilityCreate
        description: Configure high availability.
        body:
          application/xml:
            example: |
              <highAvailability>
                <vnic></vnic>
                <ipAddresses>
                  <ipAddress></ipAddress>
                </ipAddresses>
                <declareDeadTime></declareDeadTime>
                <enabled></enabled>
              </highAvailability>
            schema: highAvailabilityCreate
      delete:
        displayName: highAvailabilityDelete
        description: Delete high availability configuration.
    /syslog/config:
      displayName: syslog
      description: |
        Working With Remote Syslog Server on NSX Edge
        -----
        You can configure one or two remote syslog servers. Edge events and logs
        related to firewall events that flow from Edge appliances are sent to
        the syslog servers
      get:
        displayName: syslogRead
        description: |
          Retrieve syslog servers information.
      put:
        displayName: syslogUpdate
        description: |
          Configure syslog servers.
        body:
          application/xml:
            example: |
              <syslog>
                <protocol></protocol>
                <serverAddresses>
                  <ipAddress></ipAddress>
                </serverAddresses>
              </syslog>
            schema: syslogUpdate
      delete:
        displayName: syslogDelete
        description: Delete syslog servers.
    /sslvpn/config:
      displayName: sslVPN
      description: | 
        Working With SSL VPN
        ----
        With SSL VPN-Plus, remote users can connect securely to private
        networks behind a NSX Edge gateway. Remote users can access servers and
        applications in the private networks.
      post:
        displayName: sslVPNCreate
        description: |
          Enable or disable SSL VPN on the NSX Edge appliance.
        queryParameters:
          enableService:
            displayName: enableService
            required: true
            description: Set to *true* to enable, *false* to disable.
            type: boolean
      get:
        displayName: sslVPNRead
        description: Retrieve SSL VPN details.
      put:
        displayName: sslVPNUpdate
        description: |
          Update the entire SSL VPN configuration to the specified NSX Edge in a single call.
      delete:
        displayName: sslVPNDelete
        description: Delete the SSL VPN configurations on the Edge.
      /server:
        displayName: serverSettings
        description: |
          Working With SSL VPN Server
          ----
        get:
          displayName: serverSettingsRead
          description: Retrieve server settings.
        put:
          displayName: serverSettingsUpdate
          description: Update server settings.
          body:
            application/xml:
              example: |
                <serverSettings>
                  <serverAddresses>
                    <ipAddress>10.112.243.109</ipAddress>
                  </serverAddresses>
                  <port>443</port>
                  <certificateId>certificate-1</certificateId>
                  <cipherList>
                    <cipher>AES128-SHA</cipher>
                    <cipher>AES256-SHA</cipher>
                  </cipherList>
                </serverSettings>
              schema: serverSettingsUpdate
      /client/networkextension/privatenetworks:
        displayName: privateNetworks
        description: |
          Working With Private Networks
          ---
          You can use a private network to expose to remote users over SSL VPN
          tunnel.
        post:
          displayName: privateNetworksCreate
          description: Configure a private network.
          body:
            application/xml:
              example: |
                <privateNetwork>
                  <description></description>
                  <network></network>
                  <sendOverTunnel>
                    <ports></ports>
                    <optimize></optimize>
                  </sendOverTunnel>
                  <enabled></enabled>
                </privateNetwork>
              schema: privateNetworksCreate
        get:
          displayName: privateNetworksRead
          description: | 
            Retrieve all private network profiles in the SSL VPN instance.
        put:
          displayName: privateNetworksUpdate
          description: |
            Update all private network configs of NSX Edge with the given list
            of private network configs. If the config is present, it is
            updated; otherwise, a new private network config is created.
            Existing configs not included in the call body are deleted.
        delete:
          displayName: privateNetworksDelete
          description: Delete all private networks from the SSL VPN instance.
        /{networkID}:
          displayName: privateNetwork
          description: |
            Working With a Specific Private Network
            ----
          uriParameters:
            networkID:
              required: true
              displayName: networkID
              description: Specified private network
          get:
            displayName: privateNetworkRead
            description: |
              Retrieve the specified private network in the SSL VPN service.
          put:
            displayName: privateNetworkUpdate
            description: |
              Update the specified private network in the SSL VPN service.
            body:
              application/xml:
                example: |
                  <privateNetwork>
                    <description></description>
                    <network></network>
                    <sendOverTunnel>
                      <ports></ports>
                      <optimize></optimize>
                    </sendOverTunnel>
                    <enabled></enabled>
                  </privateNetwork>
                schema: privateNetworkUpdate
          delete:
            displayName: privateNetworkDelete
            description: Delete private network
      /client/networkextension/ippools:
        displayName: netExtIpPools
        description: |
          Working With IP Pools for SSL VPN
          ----
        post:
          displayName: netExtipPoolsCreate
          description: Create an IP pool.
          body:
            application/xml:
              example: |
                <ipAddressPool>
                  <description></description>
                  <ipRange></ipRange>
                  <netmask></netmask>
                  <gateway></gateway>
                  <primaryDns></primaryDns>
                  <secondaryDns></secondaryDns>
                  <dnsSuffix></dnsSuffix>
                  <winsServer></winsServer>
                  <enabled></enabled>
                </ipAddressPool>
              schema: netExtipPoolsCreate
        get:
          displayName: netExtipPoolsRead
          description: Retrieve all IP pools configured on SSL VPN.
        put:
          displayName: netExtipPoolsUpdate
          description: |
            Update all IP pools with the given list of pools. If the pool is
            present, it is updated; otherwise, a new pool is created. Existing
            pools not in the body are deleted.
          body:
            application/xml:
              example: |
                <ipAddressPool>
                  <description></description>
                  <ipRange></ipRange>
                  <netmask></netmask>
                  <gateway></gateway>
                  <primaryDns></primaryDns>
                  <secondaryDns></secondaryDns>
                  <dnsSuffix></dnsSuffix>
                  <winsServer></winsServer>
                  <enabled></enabled>
                </ipAddressPool>
              schema: netExtipPoolsUpdate
        delete:
          displayName: netExtipPoolsDelete
          description: Delete all IP pools configured on SSL VPN
        /{ippoolID}:
          displayName: netExtipPool
          description: |
            Working With a Specific IP Pool for SSL VPN
            ----
          uriParameters:
            ippoolID:
              required: true
              displayName: ipPoolID
              description: Specified IP pool ID.
          get:
            displayName: netExtipPoolRead
            description: Retrieve details of specified IP pool.
          put:
            displayName: netExtipPoolUpdate
            description: Update specified IP pool.
            body:
              application/xml:
                example: |
                  <ipAddressPool>
                    <description>description</description>
                    <ipRange>10.112.243.11-10.112.243.57</ipRange>
                    <netmask>255.0.0.0</netmask>
                    <gateway>192.168.1.1</gateway>
                    <primaryDns>192.168.10.1</primaryDns>
                    <secondaryDns>4.2.2.2</secondaryDns>
                    <dnsSuffix></dnsSuffix>
                    <winsServer>10.112.243.201</winsServer>
                    <enabled>true</enabled>
                  </ipAddressPool>
          delete:
            displayName: netExtipPoolDelete
            description: Delete the specified IP pool.
      /client/networkextension/clientconfig:
        displayName: clientConfig
        description: |
          Working With Network Extension Client Parameters 
          -----
        put:
          displayName: clientConfigUpdate
          description: |
            Set advanced parameters for full access client configurations,
            such as whether client should auto-reconnect in case of network
            failures or network unavailability, or whether the client should be
            uninstalled after logout.
          body:
            application/xml:
              example: |
                <clientConfiguration>
                  <autoReconnect>true</autoReconnect>
                  <fullTunnel>
                    <excludeLocalSubnets>false</excludeLocalSubnets>
                    <gatewayIp>10.112.243.11</gatewayIp>
                  </fullTunnel>
                  <upgradeNotification>false</upgradeNotification>
                </clientConfiguration>
              schema: clientConfigUpdate
        get:
          displayName: clientConfigRead
          description: Retrieve client configuration.
      /client/networkextension/installpackages:
        displayName: installPackages
        description: |
          Working With SSL VPN Client Installation Packages
          ---
        post:
          displayName: installPackagesCreate
          description: |
            Creates setup executables (installers) for full access network
            clients. These setup binaries are later downloaded by remote
            clients and installed on their systems. The primary parameters
            needed to configure this setup are hostname of the gateway, and
            its port and a profile name which is shown to the user to identify
            this connection. Administrator can also set few other parameters
            such as whether to automatically start the application on windows
            login, hide the system tray icon etc.
          body:
            application/xml:
              example: |
                <clientInstallPackage>
                  <profileName></profileName>
                  <gatewayList>
                    <gateway>
                      <hostName></hostName>
                      <port></port>
                    </gateway>
                  </gatewayList>
                  <startClientOnLogon></startClientOnLogon>
                  <hideSystrayIcon></hideSystrayIcon>
                  <rememberPassword></rememberPassword>
                  <silentModeOperation></silentModeOperation>
                  <silentModeInstallation></silentModeInstallation>
                  <hideNetworkAdaptor></hideNetworkAdaptor>
                  <createDesktopIcon></createDesktopIcon>
                  <enforceServerSecurityCertValidation></enforceServerSecurityCertValidation>
                  <createLinuxClient></createLinuxClient>
                  <createMacClient></createMacClient>
                  <description></description>
                  <enabled></enabled>
                </clientInstallPackage>
              schema: installPackagesCreate
        get:
          displayName: installPackagesRead
          description: Retrieve information about all installation packages.
        put:
          displayName: installPackagesUpdate
          description: |
            Update all installation packages with the given list. If the
            package is present, it is updated; otherwise a new installation
            package is created. Existing packages not included in the body are
            deleted.
        delete:
          displayName: installPackagesDelete
          description: Delete all client installation packages.
        /{packageID}:
          displayName: installPackage
          description: |
            Working With a Specific SSL VPN Client Installation Package
            ---
          uriParameters:
            packageID:
              required: true
              displayName: packageID
              description: Specified installation package ID.
          get:
            displayName: installPackageRead
            description: |
              Get information about the specified installation package.
          put:
            displayName: installPackageUpdate
            description: Modify the specified installation package.
            body:
              application/xml:
                example: |
                  <clientInstallPackage>
                    <profileName></profileName>
                    <gatewayList>
                      <gateway>
                        <hostName></hostName>
                        <port></port>
                      </gateway>
                    </gatewayList>
                    <startClientOnLogon></startClientOnLogon>
                    <hideSystrayIcon></hideSystrayIcon>
                    <rememberPassword></rememberPassword>
                    <silentModeOperation></silentModeOperation>
                    <silentModeInstallation></silentModeInstallation>
                    <hideNetworkAdaptor></hideNetworkAdaptor>
                    <createDesktopIcon></createDesktopIcon>
                    <enforceServerSecurityCertValidation></enforceServerSecurityCertValidation>
                    <createLinuxClient></createLinuxClient>
                    <createMacClient></createMacClient>
                    <description></description>
                    <enabled></enabled>
                  </clientInstallPackage>
                schema: installPackageUpdate
          delete:
            displayName: installPackageDelete
            description: Delete the specified installation package.
      /layout:
        displayName: layout
        description: |
          Working With Portal Layout
          ---
        get:
          displayName: layoutRead
          description: Retrieve layout configuration.
        put:
          displayName: layoutUpdate
          description: Update the portal layout.
          body:
            application/xml:
              example: |
                <layout>
                  <portalTitle></portalTitle>
                  <companyName></companyName>
                  <logoBackgroundColor></logoBackgroundColor>
                  <titleColor></titleColor>
                  <topFrameColor></topFrameColor>
                  <menuBarColor></menuBarColor>
                  <rowAlternativeColor></rowAlternativeColor>
                  <bodyColor></bodyColor>
                  <rowColor></rowColor>
                </layout>
              schema: layoutUpdate
        /images/{imageType}:
          displayName: layoutIcons
          description: |
            Working With Image Files for SSL VPN
            ---
          uriParameters:
            imageType:
              displayName: imageType
              description: |
                Type of image to upload. Choice of *portallogo*, *phatbanner*,
                *connecticon*, *disconnecticon*, *desktopicon*, or *erroricon*.
              required: true
          post:
            displayName: layoutIconsUpload
            description: |
              Upload images for use with SSL VPN portal and client.
              
              You can upload a logo to use in the SSL VPN portal, and a banner
              and icons to use in the SSL VPN client.
              
              You must upload the image files using the form-data content-type.
              Consult the documentation for your REST client for instructions. 
              
              Do not set other Content-type headers in your request, for
              example, *Content-type: application/xml*.
              
              When you upload a file as form-data, you must provide a **key**
              and a **value** for the file. See the table below for the
              form-data **key** to use for each image type. The **value** is the
              path to the image file.
              
              Image Type | form-data key | Image format requirements
              ----|------|----
              portallogo | layoutFile | n/a
              phatbanner | banner | bmp
              connecticon | icon | ico
              disconnecticon | icon | ico
              erroricon | icon | ico
              desktopicon | icon | ico
              
              **Example using curl**
              
              ```
              /usr/bin/curl -v -k -i -F layoutFile=@/tmp/portalLogo.jpg -H 'Authorization: Basic YWRtaW46ZGXXXXXXXX==' 
              https://192.168.110.42/api/4.0/edges/edge-3/sslvpn/config/layout/images/portallogo
              ```
      /auth/localserver/users:
        displayName: sslVPNUsers
        description: |
          Working With Portal Users
          ----
        post:
          displayName: usersCreate
          description: Add a new portal user.
          body:
            application/xml:
              example: |
                <user>
                  <userId></userId>
                  <password></password>
                  <firstName></firstName>
                  <lastName></lastName>
                  <description></description>
                  <disableUserAccount></disableUserAccount>
                  <passwordNeverExpires></passwordNeverExpires>
                  <allowChangePassword>
                    <changePasswordOnNextLogin></changePasswordOnNextLogin>
                  </allowChangePassword>
                </user>
              schema: usersCreate
        put:
          displayName: usersUpdate
          description: Modify the portal user specified in the request body.
          body:
            application/xml:
              example: |
                <user>
                  <userId></userId>
                  <password></password>
                  <firstName></firstName>
                  <lastName></lastName>
                  <description></description>
                  <disableUserAccount></disableUserAccount>
                  <passwordNeverExpires></passwordNeverExpires>
                  <allowChangePassword>
                    <changePasswordOnNextLogin></changePasswordOnNextLogin>
                  </allowChangePassword>
                </user>
              schema: usersUpdate
        delete:
          displayName: usersDelete
          description: Delete all users on the specifed SSL VPN instance
        /{userID}:
          displayName: user
          description: |
            Working With a Specific Portal User
            ----
          uriParameters:
            userID:
              displayName: userID
              description: User ID.
          get:
            displayName: userRead
            description: Get information about the specified user.
          delete:
            displayName: userDelete
            description: Delete the specified user.
      /auth/settings:
        displayName: authSettings
        description: |
          Working With Authentication Settings
          --
        get:
          displayName: authSettingsRead
          description: Retrieve information about authentication settings.
        put:
          displayName: authSettingsUpdate
          description: |
            Update authentication settings for remote users. Specify
            username/password authentication, active directory, ldap, radius,
            client certificate based authentication.
          body:
            application/xml:
              example: |
                <authenticationConfig>
                  <passwordAuthentication>
                  <authenticationTimeout></authenticationTimeout>
                    <primaryAuthServers>
                      <com.vmware.vshield.edge.sslvpn.dto.LdapAuthServerDto>
                        <ip></ip>
                        <port></port>
                        <timeOut></timeOut>
                        <enableSsl></enableSsl>
                        <searchBase></searchBase>
                        <bindDomainName></bindDomainName>
                        <bindPassword></bindPassword>
                        <loginAttributeName></loginAttributeName>
                        <searchFilter></searchFilter>
                        <enabled></enabled>
                      </com.vmware.vshield.edge.sslvpn.dto.LdapAuthServerDto>
                      <com.vmware.vshield.edge.sslvpn.dto.RadiusAuthServerDto>
                        <ip></ip>
                        <port></port>
                        <timeOut></timeOut>
                        <secret></secret>
                        <nasIp></nasIp>
                        <retryCount></retryCount>
                      </com.vmware.vshield.edge.sslvpn.dto.RadiusAuthServerDto>
                      <com.vmware.vshield.edge.sslvpn.dto.LocalAuthServerDto>
                        <enabled></enabled>
                        <passwordPolicy>
                          <minLength></minLength>
                          <maxLength></maxLength>
                          <minAlphabets></minAlphabets>
                          <minDigits></minDigits>
                          <minSpecialChar></minSpecialChar>
                          <allowUserIdWithinPassword></allowUserIdWithinPassword>
                          <passwordLifeTime></passwordLifeTime>
                          <expiryNotification></expiryNotification>
                        </passwordPolicy>
                        <accountLockoutPolicy>
                          <retryCount></retryCount>
                          <retryDuration></retryDuration>
                          <lockoutDuration></lockoutDuration>
                        </accountLockoutPolicy>
                      </com.vmware.vshield.edge.sslvpn.dto.LocalAuthServerDto>
                      <com.vmware.vshield.edge.sslvpn.dto.RsaAuthServerDto>
                        <timeOut></timeOut>
                        <sourceIp></sourceIp>
                      </com.vmware.vshield.edge.sslvpn.dto.RsaAuthServerDto>
                    </primaryAuthServers>
                    <secondaryAuthServer>
                      <com.vmware.vshield.edge.sslvpn.dto.AdAuthServerDto>
                        <ip>1.1.1.1</ip>
                        <port>90</port>
                        <timeOut>20</timeOut>
                        <enableSsl>false</enableSsl>
                        <searchBase>searchbasevalue</searchBase>
                        <bindDomainName>binddnvalue</bindDomainName>
                        <bindPassword>password</bindPassword>
                        <loginAttributeName>cain</loginAttributeName>
                        <searchFilter>found</searchFilter>
                        <terminateSessionOnAuthFails>false</terminateSessionOnAuthFails>
                        <enabled>true</enabled>
                      </com.vmware.vshield.edge.sslvpn.dto.AdAuthServerDto>
                    </secondaryAuthServer>
                  </passwordAuthentication>
                </authenticationConfig>
              schema: authSettingsUpdate
        /rsaconfigfile:
          displayName: rsaConfig
          description: |
            Working With the RSA Config File 
            ----
          post:
            displayName: rsaConfigCreate
            description: |
              Upload RSA config file (See "Generate the Authentication Manager
              Configuration File" section of the RSA Authentication Manager
              Administrator's guide for instructions on how to configure and
              download the RSA config file from RSA Authentication Manager).
      /advancedconfig:
        displayName: advancedConfig
        description: |
          SSL VPN Advanced Configuration
          -----
        get:
          displayName: advancedConfigRead
          description: Retrieve SSL VPN advanced configuration.
        put:
          displayName: advancedConfigUpdate
          description: Update SSL VPN advanced configuration.
          body:
            application/xml:
              example: |
                <advancedConfig>
                  <enableCompression></enableCompression>
                  <forceVirtualKeyboard></forceVirtualKeyboard>
                  <preventMultipleLogon></preventMultipleLogon>
                  <randomizeVirtualkeys></randomizeVirtualkeys>
                  <timeout>
                    <forcedTimeout></forcedTimeout>
                    <sessionIdleTimeout></sessionIdleTimeout>
                  </timeout>
                  <clientNotification></clientNotification>
                  <enableLogging></enableLogging>
                </advancedConfig>
              schema: advancedConfigUpdate
      /script:
        displayName: script
        description: |
          Working with Logon and Logoff Scripts for SSL VPN
          ----
        post:
          displayName: scriptCreate
          description: |
            Configure parameters associated with the uploaded script file.
          body:
            application/xml:
              example: |
                <logonLogoffScript>
                  <scriptFileId></scriptFileId>
                  <type></type>
                  <description></description>
                  <enabled></enabled>
                </logonLogoffScript>
              schema: scriptCreate
        get:
          displayName: scriptRead
          description: Retrieve all script configurations.
        put:
          displayName: scriptUpdate
          description: |
            Update all script configurations with the given list of
            configurations. If the config is present, its is updated;
            otherwise, a new config is created. Existing configs not included
            in the body are deleted.
          body:
            application/xml:
              example: |
                <logonLogoffScript>
                  <scriptFileId></scriptFileId>
                  <type></type>
                  <description></description>
                  <enabled></enabled>
                </logonLogoffScript>
              schema: scriptUpdate
        delete:
          displayName: scriptDelete
          description: Delete all script configurations
        /{fileID}:
          displayName: scriptFileID
          description: |
            Working With Uploaded Script Files
            ----
          uriParameters:
            fileID:
              required: true
              displayName: fileID
              description: Specified script file.
          get:
            displayName: scriptFileIDRead
            description: |
              Retrieve parameters associated with the specified script file.
          put:
            displayName: scriptFileIDUpdate
            description: |
              Update parameters associated with the specified script file.
            body:
              application/xml:
                example: |
                  <logonLogoffScript>
                    <scriptFileId></scriptFileId>
                    <type></type>
                    <description></description>
                    <enabled></enabled>
                  </logonLogoffScript>
                schema: scriptFileIDUpdate
          delete:
            displayName: scriptFileIDDelete
            description: Delete script parameters.
        /file/: 
          displayName: scriptFile
          description: |
            Uploading Script Files for SSL VPN
            ----
          post:
            displayName: scriptFileCreate
            description: |
              You can add multiple login or logoff scripts. For example, you can
              bind a login script for starting Internet Explorer with gmail.com.
              When the remote user logs in to the SSL client, Internet Explorer
              opens up gmail.com. This method returns a *scriptFileId* which
              can be used to update parameters associated with the script file.
              
              You must upload the script files using the form-data content-type.
              Consult the documentation for your REST client for instructions.
              
              Do not set other Content-type headers in your request, for
              example, *Content-type: application/xml*.
              
              When you upload a file as form-data, you must provide a **key**
              and a **value** for the file. The **key** is *file*, and the
              **value** is the location of the script file.
              
              **Example using curl**
              ```
              /usr/bin/curl -v -k -i -F file=@/tmp/script.sh -H 'Authorization: Basic YWRtaW46ZGXXXXXXXX=='
              https://192.168.110.42/api/4.0/edges/edge-3/sslvpn/config/script/file/
              ```
    /sslvpn/auth/localusers/users:
      displayName: allUsers
      description: |
        Working with SSL VPN Users
        ---
      put:
        displayName: allUsersUpdate
        description: |
          Update all users with the given list of users. If the user is
          present, it is updated. Otherwise, and new user is created. Existing
          users not included in the body are deleted.
        body:
          application/xml:
            example: |
              <users>
                <user>
                  <userId></userId>
                  <password></password>
                  <firstName></firstName>
                  <lastName></lastName>
                  <description></description>
                  <disableUserAccount></disableUserAccount>
                  <passwordNeverExpires></passwordNeverExpires>
                  <allowChangePassword>
                    <changePasswordOnNextLogin></changePasswordOnNextLogin>
                  </allowChangePassword>
                </user>
              </users>
            schema: allUsersUpdate
    /sslvpn/activesessions:
      displayName: sslVPNActiveClients
      description: |
        Working With Active Client Sessions
        ----
      get:
        displayName: sslVPNActiveClientsRead
        description: Retrieve a list of active clients for the SSL VPN session.
      /{sessionID}:
        displayName: session
        description: |
          Working With a Specific Active Client Session
          ----
        uriParameters:
          sessionID:
            required: true
            displayName: sessionID
            description: Specified client session.
        delete:
          displayName: sessionDelete
          description: Disconnect an active client.
    /statistics/dashboard/sslvpn:
      displayName: sslVPNStats
      description: |
        Working With SSL VPN Dashboard Statistics
        ---
      get:
        displayName: sslVPNStatsRead
        description: Retrieve SSL VPN statistics on the specified NSX Edge.
        queryParameters:
          interval:
            displayName: interval
            description: |
              Specify a range; can be *1* - *60* minutes, or *oneDay*, *oneWeek*,
              *oneMonth*, or *oneYear*. Default is *60* minutes.
    /statistics/dashboard/ipsec:
      displayName: ipsecTrafficStats
      description: |
        Working With Tunnel Traffic Dashboard Statistics
        ----
      get:
        displayName: ipsecTrafficStatsRead
        description: |
          Retrieve tunnel traffic statistics for specified time interval.
        queryParameters:
          interval:
            displayName: interval
            description: |
              Specify a range; can be *1* - *60* minutes, or *oneDay*, *oneWeek*,
              *oneMonth*, or *oneYear*. Default is *60* minutes.
    /statistics/dashboard/interface:
      displayName: vnicDashStats
      description: |
        Working With Interface Dashboard Statistics
        ----
      get:
        displayName: vnicDashStatsRead
        description: |
          Retrieves dashboard statistics between the specified start and end
          times. When start and end time are not specified, all statistics
          since the Edge deployed are displayed. When no end time is specified,
          the current Edge Manager time is set as endTime. Each record has the
          stats of 5 minutes granularity.
        queryParameters:
          interval:
            required: true
            displayName: interval
            description: Specify a start and end time range in seconds.
    /statistics/interfaces:
      displayName: vnicStats
      description: |
        Working With Interface Statistics
        ----
      get:
        displayName: vnicStatsRead
        description: Retrieve interface statistics.
      /uplink:
        displayName: uplinkVNICStats
        description: |
          Working With Uplink Interface Statistics
          ----
        get:
          displayName: uplinkVNICStatsRead
          description: Retrieve uplink interface statistics.
      /internal:
        displayName: internalVNICStats
        description: |
          Working With Internal Interface Statistics
          -----
        get:
          displayName: internalVNICStatsRead
          description: Retrieve internal interface statistics.
    /l2vpn/config:
      displayName: l2VPN
      description: |
        Working with L2 VPN
        ----
        L2 VPN allows you to configure a tunnel between two sites. 
        VMs can move between the sites and stay on the same subnet,
        enabling you to extend your datacenter. An NSX Edge at one site can
        provide all services to VMs on the other site.
      post:
        displayName: l2VPNCreate
        description: |
          Enable or disable L2 VPN service.
        queryParameters:
          enableService:
            required: true
            displayName: enableService
            description: Enable (*true*) or disable (*false*) L2 VPN.
            type: boolean
      get:
        displayName: l2VPNRead
        description: Retrieve the current L2VPN configuration for NSX Edge.
      put:
        displayName: l2VPNUpdate
        description: |
          Configure L2VPN for server or client.
          
          You first enable the L2 VPN service on the NSX Edge instance and then
          configure a server and a client.
        body:
          application/xml:
            example: |
              <l2Vpn>
                <enabled>true</enabled>
                <logging>
                  <enable>false</enable>
                  <logLevel>info</logLevel>
                  </logging>
                  <l2VpnSites>
                  <l2VpnSite>
                    <server>
                      <configuration>
                        <listenerIp></listenerIp>
                        <listenerPort></listenerPort>
                        <encryptionAlgorithm></encryptionAlgorithm>
                        <serverCertificate></serverCertificate>
                        <peerSites>
                          <peerSite>
                            <name></name>
                            <description></description>
                            <l2VpnUser>
                              <userId></userId>
                              <password></password>
                            </l2VpnUser>
                            <vnics>
                              <index></index>
                            </vnics>
                            <egressOptimization>
                              <gatewayIpAddress></gatewayIpAddress>
                            </egressOptimization>
                            <enabled></enabled>
                          </peerSite>
                        </peerSites>
                      </configuration>
                    </server>
                  </l2VpnSite>
                </l2VpnSites>
              </l2Vpn>
      delete:
        displayName: l2VPNDelete
        description: Delete the L2 VPN configuration.
      /statistics:
        displayName: statistics
        description: |
          Working With L2 VPN Statistics
          ---
        get:
          displayName: statisticsRead
          description: |
            Retrieve L2 VPN statistics, which has information such as tunnel status,
            sent bytes, received bytes for the specified Edge.
    /ipsec/config:
      displayName: ipsecConfig
      description: |
        Working With IPsec VPN
        -----
        NSX Edge supports site-to-site IPsec VPN between an NSX Edge instance
        and remote sites. NSX Edge supports certificate authentication,
        preshared key mode, IP unicast traffic, and no dynamic routing protocol
        between the NSX Edge instance and remote VPN routers. Behind each
        remote VPN router, you can configure multiple subnets to connect to the
        internal network behind an NSX Edge through IPsec tunnels. These
        subnets and the internal network behind a NSX Edge must have address
        ranges that do not overlap.  
        
        You can deploy an NSX Edge agent behind a NAT device. In this
        deployment, the NAT device translates the VPN address of an NSX Edge
        instance to a publicly accessible address facing the Internet. Remote
        VPN routers use this public address to access the NSX Edge instance.  
        
        You can place remote VPN routers behind a NAT device as well. You must
        provide the VPN native address and the VPN Gateway ID to set up the
        tunnel. On both ends, static one-to-one NAT is required for the VPN
        address.
        
        You can have a maximum of 64 tunnels across a maximum of 10 sites.
      get:
        displayName: ipsecConfigRead
        description: Retrieve IPsec configuration.
      put:
        displayName: ipsecConfigUpdate
        description: Update IPsec VPN configuration.
        body:
          application/xml:
            example: |
              <ipsec>
                <enabled></enabled>
                <logLevel></logLevel>
                <enable></enable>
                <global>
                  <psk></psk>
                  <serviceCertificate></serviceCertificate>
                  <caCertificates>
                    <caCertificate></caCertificate>
                  </caCertificates>
                  <crlCertificates>
                    <crlCertificate></crlCertificate>
                  </crlCertificates>
                </global>
                <sites>
                  <site>
                    <enabled></enabled>
                    <name></name>
                    <description></description>
                    <localId></localId>
                    <localIp></localIp>
                    <peerId></peerId>
                    <peerIp></peerIp>
                    <encryptionAlgorithm></encryptionAlgorithm>
                    <authenticationMode>psk</authenticationMode>
                    <psk></psk>
                    <enablePfs></enablePfs>
                    <dhGroup></dhGroup>
                    <localSubnets>
                      <subnet></subnet>
                    </localSubnets>
                    <peerSubnets>
                      <subnet></subnet>
                    </peerSubnets>
                  </site>
                </sites>
              </ipsec>
      delete:
        displayName: ipsecConfigDelete
        description: Delete the IPsec configuration.
    /ipsec/statistics:
      displayName: ipsecStats
      description: |
        Working With IPsec Statistics
        ---
      get:
        displayName: ipsecStatsRead
        description: Retrieve IPsec statistics.
    /autoconfiguration:
      displayName: autoConfig
      description: |
        Automatic Configuration of Firewall Rules
        ----
        If autoConfiguration is enabled, firewall rules are automatically
        created to allow control traffic. Rules to allow data traffic are not
        created.  For example, if you are using IPsec VPN, and
        **autoConfiguration** is *true*, firewall rules will automatically be
        configured to allow IKE traffic. However, you will need to add
        additional rules to allow the data traffic for the IPsec tunnel. If HA
        is enabled, firewall rules are always created, even if
        **autoConfiguration** is *false*, otherwise both HA appliances will
        become active.
      get:
        displayName: autoConfigRead
        description: |
          Retrieve the auto configuration settings for the NSX Edge.
      put:
        displayName: autoConfigUpdate
        description: |
          Update the auto configuration settings for the NSX Edge.
        body:
          application/xml:
            example: |
              <autoConfiguration>
                <enabled></enabled>
                <rulePriority></rulePriority>
              </autoConfiguration>
            schema: autoConfigUpdate
    /appliances:
      displayName: appliances
      description: |
        Working With NSX Edge Appliance Configuration
        -----
        See *Working with NSX Edge* for additional parameters used to configure appliances.
        
        When you create an NSX Edge, you define parameters that determine how
        the appliance is deployed, including resourcePoolId, dataStoreId,
        hostId, and VmFolderId. After the appliance is deployed, these
        deployment details may change, and the appliance parameters are updated
        to reflect the current, live location.
        
        You can view the originally configured paramters by using the
        configuredResourcePool, configuredDataStore, configuredHost, and
        configuredVmFolder parameters.
        
        You can trigger a high availability failover on the active NSX Edge
        appliance by changing the haAdminState value to *down* as part of
        appliance configuration for an NSX Edge. The haAdminState parameter
        determines whether or not an NSX Edge appliance is participating in
        high availability. Both appliances in an NSX Edge high availability
        configuration normally have an haAdminState of *up*. When you set the
        haAdminState of the active appliance to be *down*, it stops
        participating in high availability, and informs the standby appliance
        of its status.  The standby appliance becomes active immediately.  
        
        Parameter | Description | Comments
        --------|-------------|---------
        **highAvailabilityIndex** | Index number of the appliance | Read only.
        **haAdminState** | Indicates whether appliance is participating in high availability. | If the active appliance **haAdminState** is set to *down*, it stops participating in HA, and informs the standby appliance of its status. The standby appliance becomes active immediately. 
        **configuredResourcePool > id** | ID of resource pool on which NSX Edge was originally deployed. | Read only.
        **configuredResourcePool > name** | Name of resource pool on which NSX Edge was originally deployed. | Read only.
        **configuredResourcePool > isValid** | True if resource pool on which NSX Edge was originally deployed currently exists. | Read only. *true* or *false*.
        **configuredDataStore > id** | ID of data store on which NSX Edge was originally deployed. | Read only.
        **configuredDataStore > name** | Name of data store on which NSX Edge was originally deployed. | Read only.
        **configuredDataStore > isValid** | True if resource pool on which NSX Edge was originally deployed currently exists. | Read only. *true* or *false*.
        **configuredHost > id** | ID of host on which NSX Edge was originally deployed. | Read only.
        **configuredHost > name** | Name of host on which NSX Edge was originally deployed. | Read only.
        **configuredHost > isValid** | True if resource pool on which NSX Edge was originally deployed currently exists. | Read only. *true* or *false*.
        **configuredVmFolder > id** | ID of folder in which NSX Edge was originally deployed. | Read only.
        **configuredVmFolder > name** | Name of folder in which NSX Edge was originally deployed. | Read only.
        **configuredVmFolder > isValid** | True if resource pool on which NSX Edge was originally deployed currently exists. | Read only. *true* or *false*.
      post:
        displayName: appliancesCreate
        description: |
          Change the size of both appliances.
        queryParameters:
          size:
            required: true
            displayName: size
            description: set to compact|large|xlarge
      get:
        displayName: appliancesRead
        description: | 
          Retrieve appliance configuration.
          
          **Method history:**
          
          Release | Modification
          --------|-------------
          6.2.3 | Method updated. **haAdminState**, **configuredResourcePool**, **configuredDataStore**, **configuredHost**, **configuredVmFolder** parameters added. 
        responses:
          200:
            body:
              application/xml:
                example: |
                  <appliances>
                    <applianceSize>compact</applianceSize>
                    <appliance>
                      <highAvailabilityIndex>0</highAvailabilityIndex>
                      <haAdminState>up</haAdminState>
                      <vcUuid>502e2dd9-3df7-4820-6925-29832a1c0b79</vcUuid>
                      <vmId>vm-417</vmId>
                      <haAdminState>up</haAdminState>
                      <resourcePoolId>domain-c41</resourcePoolId>
                      <resourcePoolName>Management &amp; Edge Cluster</resourcePoolName>
                      <datastoreId>datastore-29</datastoreId>
                      <datastoreName>ds-site-a-nfs01</datastoreName>
                      <hostId>host-202</hostId>
                      <hostName>esxmgt-01a.corp.local</hostName>
                      <vmFolderId>group-v242</vmFolderId>
                      <vmFolderName>NSX Edges</vmFolderName>
                      <vmHostname>Perimeter-Gateway-02-0</vmHostname>
                      <vmName>Perimeter-Gateway-02-0</vmName>
                      <deployed>true</deployed>
                      <cpuReservation>
                        <reservation>1000</reservation>
                      </cpuReservation>
                      <memoryReservation>
                        <reservation>512</reservation>
                      </memoryReservation>
                      <edgeId>edge-5</edgeId>
                      <configuredResourcePool>
                        <id>domain-c41</id>
                        <name>Management &amp; Edge Cluster</name>
                        <isValid>true</isValid>
                      </configuredResourcePool>
                      <configuredDataStore>
                        <id>datastore-29</id>
                        <name>ds-site-a-nfs01</name>
                        <isValid>true</isValid>
                      </configuredDataStore>
                      <configuredHost>
                        <id>host-202</id>
                        <name>esxmgt-01a.corp.local</name>
                        <isValid>true</isValid>
                      </configuredHost>
                      <configuredVmFolder>
                        <id>group-v242</id>
                        <name>NSX Edges</name>
                        <isValid>true</isValid>
                      </configuredVmFolder>
                    </appliance>
                    <appliance>
                      <highAvailabilityIndex>1</highAvailabilityIndex>
                      <haAdminState>up</haAdminState>
                      <vcUuid>502e3ebf-02cb-dcd2-9701-91db1e0e3bd8</vcUuid>
                      <vmId>vm-429</vmId>
                      <haAdminState>up</haAdminState>
                      <resourcePoolId>domain-c41</resourcePoolId>
                      <resourcePoolName>Management &amp; Edge Cluster</resourcePoolName>
                      <datastoreId>datastore-29</datastoreId>
                      <datastoreName>ds-site-a-nfs01</datastoreName>
                      <hostId>host-202</hostId>
                      <hostName>esxmgt-01a.corp.local</hostName>
                      <vmFolderId>group-v242</vmFolderId>
                      <vmFolderName>NSX Edges</vmFolderName>
                      <vmHostname>Perimeter-Gateway-02-1</vmHostname>
                      <vmName>Perimeter-Gateway-02-1</vmName>
                      <deployed>true</deployed>
                      <edgeId>edge-5</edgeId>
                      <configuredResourcePool>
                        <id>domain-c41</id>
                        <name>Management &amp; Edge Cluster</name>
                        <isValid>true</isValid>
                      </configuredResourcePool>
                      <configuredDataStore>
                        <id>datastore-29</id>
                        <name>ds-site-a-nfs01</name>
                        <isValid>true</isValid>
                      </configuredDataStore>
                      <configuredHost>
                        <id>host-202</id>
                        <name>esxmgt-01a.corp.local</name>
                        <isValid>true</isValid>
                      </configuredHost>
                      <configuredVmFolder>
                        <id>group-v242</id>
                        <name>NSX Edges</name>
                        <isValid>true</isValid>
                      </configuredVmFolder>
                    </appliance>
                    <deployAppliances>true</deployAppliances>
                  </appliances> 
      put:
        displayName: appliancesUpdate
        description: |
          You can retrieve the configuration of both appliances by using the
          GET call and replace the size, resource pool, datastore, and custom
          parameters of the appliances by using a PUT call. If there were two
          appliances earlier and you PUT only one appliance, the other
          appliance is deleted.
          
          **Method history:**
          
          Release | Modification
          --------|-------------
          6.2.3 | Method updated. **haAdminState** parameter added.
      /{haIndex}:
        displayName: appliance
        description: | 
          Working With NSX Edge Appliance Configuration by Index
          ----
        uriParameters:
          haIndex:
            required: true
            displayName: haIndex
            description: Specified appliance HA index
        post:
          displayName: applianceExecute
          description: |
              Used to send CLI Commands to the Edge Gw. To use CLI commands you also
              need to add an additional Accept Header with type text\plain, as well as
              the query parameter action=execute
          queryParameters:
            action:
              required: false
              displayName: action
              description: Used to send CLI Commands to the Edge Gw. Use action=execute to send the command
          headers:
            Accept:
              displayName: Accept
              description: Required for CLI commands, specify *text/plain* when sending CLI Commands to the Edge Gw
              required: false
          body:
            application/xml:
              example: |
                <cliCmd>
                  <cmdStr>show ip ospf neighbours</cmdStr>
                </cliCmd>
        get:
          displayName: applianceRead
          description: |
            Retrieve the configuration of the specified appliance.
            
            **Method history:**
            
            Release | Modification
            --------|-------------
            6.2.3 | Method updated. **haAdminState**, **configuredResourcePool**, **configuredDataStore**, **configuredHost**, **configuredVmFolder** parameters added. 
        put:
          displayName: applianceUpdate
          description: |
            Update the configuration of the specified appliance.
            
            **Method history:**
            
            Release | Modification
            --------|-------------
            6.2.3 | Method updated. **haAdminState** parameter added.
          body:
            application/xml:
              example: |
                <appliance>
                  <haAdminState>up</haAdminState>
                  <resourcePoolId>domain-c41</resourcePoolId>
                  <datastoreId>datastore-29</datastoreId>
                  <hostId>host-203</hostId>
                  <vmFolderId>group-v242</vmFolderId>
                  <cpuReservation>
                    <limit>-1</limit>
                    <reservation>1000</reservation>
                  </cpuReservation>
                  <memoryReservation>
                    <limit>-1</limit>
                    <reservation>512</reservation>
                  </memoryReservation>
                  <edgeId>edge-3</edgeId>
                </appliance>
              schema: applianceUpdate
        delete:
          displayName: applianceDelete
          description: Delete the appliance
    /vnics:
      displayName: vnics
      description: |
        Working With Edge Services Gateway Interfaces
        ----
        See *Working with NSX Edge* for descriptions of parameters used to
        configure Edge Service Gateway interfaces.
      post:
        displayName: vnicsCreate
        description: Add an interface or sub interface.
        queryParameters:
          action:
            required: true
            displayName: action
            description: Set to *patch*.
        body:
          application/xml:
            example: |
              <vnics>
                <vnic>
                  <name></name>
                  <addressGroups>
                    <addressGroup>
                      <primaryAddress></primaryAddress>
                      <secondaryAddresses>
                        <ipAddress></ipAddress>
                      </secondaryAddresses>
                      <subnetMask></subnetMask>
                    </addressGroup>
                  </addressGroups>
                  <mtu></mtu>
                  <type></type>
                  <index></index>
                  <portgroupId></portgroupId>
                  <portgroupName></portgroupName>
                  <macAddress>
                    <edgeVmHaIndex></edgeVmHaIndex>
                    <value></value>
                  </macAddress>
                  <fenceParameter>
                    <key></key>
                    <value></value>
                  </fenceParameter>
                  <enableProxyArp></enableProxyArp>
                  <enableSendRedirects></enableSendRedirects>
                  <enableBridgeMode></enableBridgeMode>
                  <isConnected></isConnected>
                  <inShapingPolicy>
                    <averageBandwidth></averageBandwidth>
                    <peakBandwidth></peakBandwidth>
                    <burstSize></burstSize>
                    <enabled></enabled>
                    <inherited></inherited>
                  </inShapingPolicy>
                  <outShapingPolicy>
                    <averageBandwidth></averageBandwidth>
                    <peakBandwidth></peakBandwidth>
                    <burstSize></burstSize>
                    <enabled></enabled>
                    <inherited></inherited>
                  </outShapingPolicy>
                </vnic>
              </vnics>
      get:
        displayName: vnicsRead
        description: |
          Retrieve all interfaces for the specified Edge Services Gateway.
      /{index}:
        displayName: vnic
        description: |
          Working With a Specific Edge Services Gateway Interface
          ----
          See *Working with NSX Edge* for descriptions of parameters used to
          configure Edge Service Gateway interfaces.
        uriParameters:
          index:
            required: true
            displayName: index
            description: Specified interface
        get:
          displayName: vnicRead
          description: Retrieve the specified interface.
        put:
          displayName: vnicUpdate
          description: Update the specified interface.
          body:
            application/xml:
              example: |
                <vnics>
                  <vnic>
                    <name></name>
                    <addressGroups>
                      <addressGroup>
                        <primaryAddress></primaryAddress>
                        <secondaryAddresses>
                          <ipAddress></ipAddress>
                        </secondaryAddresses>
                        <subnetMask></subnetMask>
                      </addressGroup>
                    </addressGroups>
                    <mtu></mtu>
                    <type></type>
                    <index></index>
                    <portgroupId></portgroupId>
                    <portgroupName></portgroupName>
                    <macAddress>
                      <edgeVmHaIndex></edgeVmHaIndex>
                      <value></value>
                    </macAddress>
                    <fenceParameter>
                      <key></key>
                      <value></value>
                    </fenceParameter>
                    <enableProxyArp></enableProxyArp>
                    <enableSendRedirects></enableSendRedirects>
                    <enableBridgeMode></enableBridgeMode>
                    <isConnected></isConnected>
                    <inShapingPolicy>
                      <averageBandwidth></averageBandwidth>
                      <peakBandwidth></peakBandwidth>
                      <burstSize></burstSize>
                      <enabled></enabled>
                      <inherited></inherited>
                    </inShapingPolicy>
                    <outShapingPolicy>
                      <averageBandwidth></averageBandwidth>
                      <peakBandwidth></peakBandwidth>
                      <burstSize></burstSize>
                      <enabled></enabled>
                      <inherited></inherited>
                    </outShapingPolicy>
                  </vnic>
                </vnics>
        delete:
          displayName: vnicDelete
          description: Delete interface
    /mgmtinterface:
      displayName: mgmtInterface
      description: |
        Working with Logical Router HA (Management) Interface
        ----
      get:
        displayName: mgmtInterfaceRead
        description: |
          Retrieve the management interface configuration for the logical
          router.
      put:
        displayName: mgmtInterfaceUpdate
        description: |
          Configure high availability (management) interface for logical
          (distributed) router.  See *Working with NSX Edge* for descriptions
          of parameters used to configure the logical router HA interface.
        body:
          application/xml:
            example: |
              <mgmtInterface>
                <addressGroups>
                  <addressGroup>
                    <primaryAddress></primaryAddress>
                    <subnetMask></subnetMask>
                  </addressGroup>
                </addressGroups>
                <mtu></mtu>
                <connectedToId></connectedToId>
              </mgmtInterface>
            schema: mgmtInterfaceUpdate
    /interfaces:
      displayName: interfaces
      description: |
          Working With Logical Router Interfaces
          ----
          Configure interfaces for logical (distributed) router.  See *Working
          with NSX Edge* for descriptions of parameters used to configure the
          logical router interfaces.
      post:
        displayName: interfacesCreate
        description: |
          Add interfaces for a logical router. 
        queryParameters:
          action:
            displayName: action
            required: true
            description: Set to *patch*.
        body:
          application/xml:
            example: |
              <interfaces>
                <interface>
                  <name></name>
                  <addressGroups>
                    <addressGroup>
                      <primaryAddress></primaryAddress>
                      <subnetMask></subnetMask>
                    </addressGroup>
                  </addressGroups>
                  <mtu></mtu>
                  <type></type>
                  <isConnected></isConnected>
                  <connectedToId></connectedToId>
                </interface>
              </interfaces>
            schema: interfacesCreate
      get:
        displayName: interfacesRead
        description: Retrieve all interfaces on the logical router.
      delete:
        displayName: interfacesDelete
        description: Delete all interfaces on the logical router.
        queryParameters:
          index:
            displayName: index
            description: |
              Specify index of interface to delete
              (e.g. ?index=<index1>&index=<index2>). If no indices specified,
              all interfaces are deleted
      /{index}:
        displayName: interface
        description: |
          Working With a Specific Logical Router Interface
          ----
        uriParameters:
          index:
            required: true
            displayName: index
            description: Specified router interface.
        get:
          displayName: interfaceRead
          description: |
            Retrieve information about the specified logical router interface.
        delete:
          displayName: interfaceDelete
          description: |
            Delete interface configuration and reset to factory default.
        put:
          displayName: interfaceUpdate
          description: |
            Update interface configuration for the specified logical router
            interface.
  /jobs:
    displayName: nsxEdgeJobs
    description: |
      Configuring Edge Services in Async Mode
      ----
      You can configure NSX Edge to work in async mode. In the async mode, accepted
      commands return an Accepted status and a taskId. To know the status of
      the task, you can check the status of that taskId.  The advantage of the
      async mode is that APIs are returned very fast and actions like vm
      deployment, reboots, publish to NSX Edge appliance, are done behind the
      scene under the taskId .  To configure async mode, ?async=true at the end
      of any 4.0 service configuration URL for POST, PUT, and DELETE calls.
      Without async mode, the location header in HTTP response has the resource
      ID whereas in async mode, location header has the job ID.
      
      The job status response includes the job status (*SUCCESS*, *FAILED*,
      *QUEUED*, *RUNNING*, *ROLLBACK*), URI of the resource, and ID of the
      resource. 
    get:
      displayName: nsxEdgeJobsRead
      description: |
        Retrieve NSX Edge job status.
      queryParameters:
        status:
          displayName: status
          description: |
            **status** can be *all* or *active*.
          required: false
      responses:
        200:
          body:
            application/xml:
              example: |
                <edgeJobs>
                  <edgeJob>
                    <jobId>jobdata-917</jobId>
                    <status>COMPLETED</status>
                    <result>
                      <key>edgeId</key>
                      <value>edge-4</value>
                    </result>
                  </edgeJob>
                  <edgeJob>
                    <jobId>jobdata-915</jobId>
                    <status>COMPLETED</status>
                    <result>
                      <key>edgeId</key>
                      <value>edge-4</value>
                    </result>
                  </edgeJob>
                </edgeJobs>
    /{jobId}:
      displayName: nsxEdgeJob
      description: |
        Working With a Specific Edge Job Status
        -----
      uriParameters:
        jobId:
          required: true
          displayName: jobId
          description: Job ID
      get:
        displayName: nsxEdgeJobRead
        description: |
          Retrieve job status for the specified job.
        responses:
          200:
            body:
              application/xml:
                example: |
                  <edgeJob>
                    <jobId>jobdata-2128</jobId>
                    <message>Deploying vShield Edge Virtual Machine TestEdge11-0</message>
                    <status>RUNNING</status>
                    <result>
                      <key>ResultURI</key>
                      <value>/api/4.0/edges/edge-4</value>
                    </result>
                    <result>
                      <key>edgeId</key>
                      <value>edge-4</value>
                    </result>
                  </edgeJob>
/4.0/edgePublish:
  displayName: nsxEdgePublish
  description: |
    Working with NSX Edge Configuration Publishing
    =========

  /tuningConfiguration:
    displayName: nsxEdgePublishTuning
    description: |
      Working With NSX Edge Tuning Configuration
      ------
      
      Starting in 6.2.3 you can configure default values for NSX Edge
      configuration parameters, including publishing and health check
      timeouts, and CPU and memory reservation, which are applicable to all
      NSX Edges.  The values for the tuning configuration parameters have been
      set to sensible defaults and may not require any changes. However, based
      on datacenter capacity and requirements, you can change the default CPU
      and memory resource reservation percentages using this API.  This
      percentage is applied across all Edge VM Sizes {COMPACT, LARGE,
      QUADLARGE, XLARGE}.
      The default values are:
      * 100% for CPU reservation
      * 100% for Memory reservation
      * 1000 MHz per CPU
      
      | Name | Comments |
      |------|----------|
      | lockUpdatesOnEdge | Default value is false. Serialize specific Edge operations related to DHCP and vnic configuration to avoid concurrency errors when too many configuration change requests arrive at the same time.|
      | aggregatePublishing | Default value is true (enabled). Speed up configuration change publishing to the NSX Edge by aggregating over the configuration versions.|
      | edgeVMHealthCheckIntervalInMin | Default value for time interval between NSX Edge VM's health check is 0, where NSX Manager manages the interval based on the number of NSX Edge VM's. A positive integer value overrides the default behavior.|
      | healthCheckCommandTimeoutInMs | Default timeout value for health check command is 120000.|
      | maxParallelVixCallsForHealthCheck | The maximum concurrent health check calls that can be made for NSX Edge VM's based on VIX communication channel is 25.|
      | publishingTimeoutInMs | The timeout value to publish a configuration change on NSX Edge appliance.  Default is 1200000 (20 minutes).|
      | edgeVCpuReservationPercentage | Integer value [0-100], specifying the CPU reservation percentage which will be applied to the NSX Edge appliance. To disable this resource reservation, enter 0. |
      | edgeMemoryReservationPercentage | integer value [0-100], specifying the memory reservation percentage which will be applied to the NSX Edge appliance. To disable this resource reservation, enter 0. |
      | megaHertzPerVCpu | integer value specifying the megahertz per each vCPU (1000, 1500, 2000) |
    get:
      displayName: nsxEdgePublishTuningRead # update existing addition nsxEdgePublishTuningList
      description: |
        Retrieve the NSX Edge tuning configuration.
        
        **Method history:**
        
        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.
      responses:
        200:
          body:
            application/xml:
              example: |
                <tuningConfiguration>
                  <lockUpdatesOnEdge>false</lockUpdatesOnEdge>
                  <aggregatePublishing>true</aggregatePublishing>
                  <edgeVMHealthCheckIntervalInMin>0</edgeVMHealthCheckIntervalInMin>
                  <healthCheckCommandTimeoutInMs>120000</healthCheckCommandTimeoutInMs>
                  <maxParallelVixCallsForHealthCheck>25</maxParallelVixCallsForHealthCheck>
                  <publishingTimeoutInMs>1200000</publishingTimeoutInMs>
                  <edgeVCpuReservationPercentage>100</edgeVCpuReservationPercentage>
                  <edgeMemoryReservationPercentage>100</edgeMemoryReservationPercentage>
                  <megaHertzPerVCpu>1000</megaHertzPerVCpu>
                </tuningConfiguration>
    put:
      displayName: nsxEdgePublishTuningUpdate
      description: |
        Update the NSX Edge tuning configuration.
        
        **Method history:**
        
        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.
      body:
        application/xml:
          example: |
            <tuningConfiguration>
              <lockUpdatesOnEdge>false</lockUpdatesOnEdge>
              <aggregatePublishing>true</aggregatePublishing>
              <edgeVMHealthCheckIntervalInMin>0</edgeVMHealthCheckIntervalInMin>
              <healthCheckCommandTimeoutInMs>120000</healthCheckCommandTimeoutInMs>
              <maxParallelVixCallsForHealthCheck>25</maxParallelVixCallsForHealthCheck>
              <publishingTimeoutInMs>1200000</publishingTimeoutInMs>
              <edgeVCpuReservationPercentage>0</edgeVCpuReservationPercentage>
              <edgeMemoryReservationPercentage>0</edgeMemoryReservationPercentage>
              <megaHertzPerVCpu>1000</megaHertzPerVCpu>
            </tuningConfiguration>
/2.0/services/truststore:
  displayName: truststore
  description: |
    Working with Certificates
    =============
    NSX Edge supports self-signed certificates, certificates signed by a
    Certification Authority (CA), and certificates generated and signed by a
    CA.

  /certificate:
    displayName: certificate
    description: |
      Working with Certificates and Certificate Chains
      ------
    post:
      displayName: certificateCreate # existing change certificateCSRCreate
      description: | 
        Import a certificate or a certificate chain against a certificate
        signing request.
      queryParameters:
        csrId:
          displayName: csrId
          description: |
            Specify the ID of a CSR.
          required: true
      body:
        application/xml:
          example: |
            <trustObject>
              <pemEncoding></pemEncoding>
            </trustObject>
          schema: certificateCreate
    /scope/{scopeId}:
      displayName: certificateScope
      description: |
        Working With Certificates on a Specific Scope
        ----
      uriParameters:
        scopeId:
          required: true
          displayName: scopeId
          description: |
            Scope ID. Specify the ID of an NSX Edge, e.g. *edge-5*, or
            *globalroot-0*.
      get:
        displayName: certificateScopeRead
        description: Retrieve all certificates on the specified scope.
        responses:  
          200:
            body:
              application/xml:
                example: |
                  <csrs>
                    <csr></csr>
                    <csr></csr>
                  </csrs>
    /{scopeId}:
      displayName: certificateSelfSigned
      description: |
        Working With Self-Signed Certificates
        ------
      uriParameters:
        scopeId:
          required: true
          displayName: scopeId
          description: |
            Scope ID. Specify the ID of an NSX Edge, e.g. *edge-5*, or
            *globalroot-0*.
      post:
        displayName: certificateSelfSignedCreate
        description: |
          Create a single certificate
          
          You can create a certificate for a specific NSX Edge, or if you
          specify a scope of *globalroot-0* you can create a global certificate
          in NSX Manager which is available to all NSX Edges.
        body:
          application/xml:
            example: |
              <trustObject>
                <pemEncoding></pemEncoding>
                <privateKey></privateKey>
                <passphrase></passphrase>
              </trustObject>
            schema: certificateSelfSignedCreate
    /{certificateId}:
      displayName: certificateId # existing dupfix certificate
      description: |
        Working With a Specific Certificate
        -----
      uriParameters:
        certificateId:
          required: true
          displayName: certificateId
          description: Certificate ID
      get:
        displayName: certificateIdRead # existing dupfix-related change certificateRead
        description: |
          Retrieve the certificate object specified by ID. If the ID specifies
          a chain, multiple certificate objects are retrieved.
      delete:
        displayName: certificateIdDelete # existing dupfix-related change certificateDelete
        description: Delete the specified certificate.
  /csr/{scopeId}:
    displayName: csr # existing dupfix csrCreate
    description: |
      Working with Certificate Signing Requests (CSRs)
    uriParameters:
      scopeId:
        required: true
        displayName: scopeId
        description: Specified scope ID
    post:
      displayName: csrCreate
      description: Create a certificate signing request (CSR).
      body:
        application/xml:
          example: |
            <csr>
              <subject>
                <attribute>
                  <key>CN</key>
                  <value>VSM</value>
                </attribute>
                <attribute>
                  <key>O</key>
                  <value>VMware</value>
                </attribute>
                <attribute>
                  <key>OU</key>
                  <value>IN</value>
                </attribute>
                <attribute>
                  <key>C</key>
                  <value>IN</value>
                </attribute>
              </subject>
              <algorithm>RSA</algorithm>
              <keySize>1024</keySize>
            </csr>
          schema: csrCreate
  /csr/{csrId}:
    displayName: csrSelfSigned
    description: |
      Working With Self-Signed Certificate for CSR
      -----
    uriParameters:
      csrId:
        required: true
        displayName: csrId
        description: CSR ID
    put:
      displayName: csrSelfSignedUpdate
      description: |
        Create a self-signed certificate for CSR.
      queryParameters:
        noOfDays:
          displayName: noOfDays
          description: Number of days the certificate is valid.
          required: true
    get:
      displayName: csrSelfSignedRead
      description: |
        Retrieve the specified certificate signing request (CSR).
  /csr/scope/{scopeId}:
    displayName: csrScope
    description: |
      Working With Certificate Signing Requests on a Specific Scope
      ----
    uriParameters:
      scopeId:
        displayName: scopeId
        description: Specified scope.
        required: true
    get:
      displayName: csrScopeRead
      description: Retrieve certificate signing requests (CSR) on the specified scope.
  /crl/{scopeId}:
    displayName: crl # existing dupfix
    description: |
      Working With Certificate Revocation Lists on a Specific Scope
      -----
    uriParameters:
      scopeId:
        required: true
        displayName: scopeId
        description: Specified scope.
    post:
      displayName: crlCreate # existing dupfix/reorg crlScopeCreate
      description: |
        Create a certificate revocation list (CRL) on the specified scope.
      body:
        application/xml:
          example: |
            <trustObject>
              <pemEncoding></pemEncoding>
            </trustObject>
          schema: crlCreate
  /crl/scope/{scopeId}:
    displayName: crlScope # existing dupfix/reorg crlScopeRead
    description: |
      Working with CRL Certificates in a Specific Scope
      ----
    uriParameters:
      scopeId:
        displayName: scopeId
        description: Specified scope
        required: true
    get:
      displayName: crlScopeRead
      description: Retrieve all certificates for the specified scope.
  /crl/{crlId}:
    displayName: crlID
    description: |
      Working with a Specific CRL Certificate
      ----
    uriParameters:
      crlId:
        required: true
        displayName: crlId
        description: CRL ID
    get:
      displayName: crlIDRead
      description: |
        Retrieve certificate object for the specified certificate revocation
        list (CRL).
    delete:
      displayName: crlIDDelete
      description: Delete the specified certificate revocation list (CRL).
/2.0/services/policy:
  displayName: policy
  description: |
    Working with Security Policies and Actions
    ============================

  /securitypolicy:
    displayName: securityPolicy
    description: |
      Working with Security Policies
      ------------------------------
      A security policy is a set of Endpoint, firewall, and network
      introspection services that can be applied to a security group.
    post:
      displayName: securityPolicyCreate
      description: |
        Create a security policy.
        
        When creating a security policy, a parent security policy can be
        specified if required. The security policy inherits services from the
        parent security policy. Security group bindings and actions can also
        be specified while creating the policy. Note that execution order of
        actions in a category is implied by their order in the list. The
        response of the call has Location header populated with the URI using
        which the created object can be fetched.
        
        Ensure that:
        * the required VMware built in services (such as Distributed Firewall
          and Endpoint) are installed. See *NSX Installation Guide*.
        * the required partner services have been registered with NSX Manager.
        * the required security groups have been created.
        
        Tags related to Service Composer, security policies, and security
        groups:
        Common Tags
        * **actionType** - Defines the type of action belonging to a given
        executionOrderCategory
        * **executionOrderCategory** - Category to which the action belongs to
        (endpoint, firewall or traffic_steering)
        * **isActive** - In a security policy hierarchy, an action within a policy
        may or may not be active based on the
        precedence of the policy or usage of isActionEnforced flag in that
        hierarchy
        * **isActionEnforced** - Enforces an action of a parent policy on its
        child policies for a given actionType and
        executionOrderCategory. Note that in a policy hierarchy, for a given
        actionType and executionOrderCategory, there can be only one action
        which can be marked as enforced.
        * **isEnabled** - Indicates whether an action is enabled
        * **secondarySecurityGroup** - Applicable for actions which need secondary
        security groups, say a
        source-destination firewall rule
        * **securityPolicy** - Parent policy in an action
        Output only Tags
        * **executionOrder** - Defines the sequence in which actions belonging to
        an executionOrderCategory are
        executed. Note that this is not an input parameter and its value is
        implied by the index in the list.
        Firewall Category Tags
        * **action** - Allow or block the traffic
        * **applications** - Applications / application groups on which the rules
        are to be applied
        * **direction** - Direction of traffic towards primary security group.
        Possible values: inbound, outbound, intra
        * **logged** - Flag to enable logging of the traffic that is hit by this
        rule
        * **outsideSecondaryContainer** - Flag to specify outside i.e. outside
        securitygroup-3
        Endpoint Category Tags
        * **serviceId** - ID of the service (as registered with the service
        insertion module). If this tag is null, the
        functionality type (as defined in actionType tag) is not applied which
        will also result in blocking the actions (of given functionality type)
        that are inherited from the parent security policy. This is true if
        there is no action of enforce type.
        * **invalidServiceId** - Flag to indicate that the service that was
        referenced in this rule is deleted, which make
        the rule ineffective (or deviate from the original intent that existed
        while configuring the rule). You must either modify this rule by
        adding correct Service or delete this rule.
        * **serviceName** -Name of the service
        * **serviceProfile** - Profile to be referenced in Endpoint rule.
        * **invalidServiceProfile** - Flag to indicate that the service profile
        that was referenced in this rule is deleted, which makes
        the rule ineffective (or deviate from the original intent that existed
        while configuring the rule). You must either modify this rule by
        adding correct Service Profile or delete this rule.
        The following tags are deprecated:
        * **vendorTemplateId**
        * **invalidVendorTemplateId**
        * **vendorTemplateName**
        Traffic Steering/NetX Category Tags
        * **redirect** - Flag to indicate whether to redirect the traffic or not
        * **serviceProfile** - Service profile for which redirection is being
        configured
        * **logged** - Flag to enable logging of the traffic that is hit by this
        rule
      body:
        application/xml:
          example: |
            <securityPolicy>
              <name>name</name>
              <description>decription</description>
              <precedence></precedence>
              <parent>
                <objectId></objectId>
              </parent>
              <securityGroupBinding>
                <objectId></objectId>
              </securityGroupBinding>
              <securityGroupBinding>
                ...
              </securityGroupBinding>
              ...
              ...
              <securityGroupBinding>
                ...
              </securityGroupBinding>
              <actionsByCategory>
                <category>firewall</category>
                <action class="firewallSecurityAction">
                  <name>name</name>
                  <description>description</description>
                  <category></category>
                  <actionType></actionType>
                  <isActionEnforced></isActionEnforced>
                  <isActive></isActive>
                  <isEnabled></isEnabled>
                  <secondarySecurityGroup>
                    <objectId></objectId>
                  </secondarySecurityGroup>
                  <secondarySecurityGroup>
                    ...
                  </secondarySecurityGroup>
                  ...
                  ...
                  <secondarySecurityGroup>
                    ...
                  </secondarySecurityGroup>
                  <applications>
                    <application>
                      <objectId></objectId>
                    </application>
                    <applicationGroup>
                      <objectId></objectId>
                    </applicationGroup>
                    ...
                    ...
                  </applications>
                  <logged></logged>
                  <action></action>
                  <direction></direction>
                  <outsideSecondaryContainer></outsideSecondaryContainer>
                </action>
                <action>
                  ...
                </action>
                ...
                ...
                <action>
                  ...
                </action>
              </actionsByCategory>
              <actionsByCategory>
                <category>endpoint</category>
                <action class="endpointSecurityAction">
                  <name>name</name>
                  <description>description</description>
                  <category></category>
                  <actionType></actionType>
                  <isActionEnforced></isActionEnforced>
                  <isActive></isActive>
                  <isEnabled></isEnabled>
                  <serviceId></serviceId>
                  <serviceProfile>
                    <objectId>serviceprofile-1</objectId>
                    ...
                  </serviceProfile>
                  <invalidServiceProfile>false</invalidServiceProfile>
                </action>
              </actionsByCategory>
              <actionsByCategory>
                <category>traffic_steering</category>
                <action class="trafficSteeringSecurityAction">
                  <name>name</name>
                  <description>description</description>
                  <category></category>
                  <actionType></actionType>
                  <isActionEnforced></isActionEnforced>
                  <isActive></isActive>
                  <isEnabled></isEnabled>
                  <logged></logged>
                  <redirect></redirect>
                  <serviceProfile>
                    <objectId></objectId>
                  </serviceProfile>
                </action>
              </actionsByCategory>
            </securityPolicy>
          schema: securityPolicyCreate
    /status:
      displayName: securityPolicyStatus
      description: |
        Working with Service Composer Status
        ------------------------------------
      get:
        displayName: securityPolicyStatusRead
        description: |
          Retrieve the consolidated status of Service Composer.
          
          The possible return of value for status are: *in_sync*,
          *in_progress*, *out_of_sync*, and *pending*.
          
          **Method history:**
          
          Release | Modification
          --------|-------------
          6.2.3 | Method introduced.
        responses:
          200:
            body:
              application/xml:
                example: |
                  <serviceComposerStatus>
                    <status>in_sync</status>
                  </serviceComposerStatus>
    /alarms:
      displayName: securityPolicyAlarms
      description: |
        Working with Security Policy Alarms
        -----------

      /all:
        displayName: securityPolicyAlarmsAll
        description: |
          Working with All Service Composer Alarms
          ------------
        get:
          displayName: securityPolicyAlarmsAllList # update existing addition securityPolicyAlarmsAllRead
          description: |
            Retrieve all system alarms that are raised at Service Composer
            level and policy level.
            
            **Method history:**
            
            Release | Modification
            --------|-------------
            6.2.3 | Method introduced.
          responses:
            200:
              body:
                application/xml:
                  example: |
                    <systemAlarms>
                      <systemAlarm>
                        <eventId></eventId>
                        <timestamp></timestamp>
                        <severity></severity>
                        <eventSource></eventSource>
                        <eventCode></eventCode>
                        <message></message>
                        <module></module>
                        <objectId></objectId>
                        <reporterName></reporterName>
                        <reporterType></reporterType>
                        <sourceType></sourceType>
                        <displayName></displayName>
                        <eventMetadata>
                          <data>
                          <key></key>
                          <value></value>
                          </data>
                          <data>
                          ...
                          </data>
                          ...
                          <data>
                          ...
                          </data>
                        </eventMetadata>
                        <resolutionAttempted></resolutionAttempted>
                        <resolvable></resolvable>
                        <alarmId></alarmId>
                        <alarmCode></alarmCode>
                        <alarmSource></alarmSource>
                        <alarmBeingResolved></alarmBeingResolved>
                        <alarmMetadata>
                          <data>
                          <key></key>
                          <value></value>
                          </data>
                          <data>
                          ...
                          </data>
                          ...
                          <data>
                          ...
                          </data>
                        </alarmMetadata>
                      </systemAlarm>
                    </systemAlarms>
    /serviceprovider/firewall:
      displayName: serviceComposerFirewallAppliedTo
      description: |
        Working with Service Composer Firewall Applied To Setting
        -------------
        You can set the applied to setting for all firewall rules created
        though Service Composer to either Distributed Firewall or Policy's
        Security Groups. By default, the applied to is set to Distributed
        Firewall. When Service Composer firewall rules have an applied to
        setting of distributed firewall, the rules are applied to all clusters
        on which distributed firewall is installed. If the firewall rules are
        set to apply to the policy's security groups, you have more granular
        control over the firewall rules, but may need multiple security
        policies or firewall rules to get the desired result.
        
        **Applied To Values for Service Composer Firewall Rules**
        
        Value | Description
        ------|----------
        dfw_only | Firewall rules are applied to all clusters on which Distributed Firewall is installed.
        policy_security_group | Firewall rules are applied to security groups on which the security policy is applied.
      get:
        displayName: serviceComposerFirewallAppliedToRead
        description: |
          Retrieve the Service Composer firewall applied to setting.
        responses:
          200:
            body:
              application/xml:
                example: |
                  <SecurityPolicyFirewallConfig>
                    <appliedTo>dfw_only</appliedTo>
                  </SecurityPolicyFirewallConfig>
      put:
        displayName: serviceComposerFirewallAppliedToUpdate
        description: |
          Update the Service Composer firewall applied to setting.
        body:
          application/xml:
            example: |
              <SecurityPolicyFirewallConfig>
                <appliedTo>policy_security_group</appliedTo>
              </SecurityPolicyFirewallConfig>
    /{ID}:
      displayName: securityPolicyID
      description: |
        Working with Security Policies
        ------------------
      uriParameters:
        ID:
          required: true
          displayName: ID
          description: |
            ID of desired security policy (or 'all' to for all security
            policies).
      get:
        displayName: securityPolicyIDRead
        description: |
          Retrieve security policy information.
        responses:
          200:
            body:
              application/xml:
                example: |
                  <securityPolicy>
                    <securityPolicy>
                      <name>name</name>
                      <description>description</description>
                      <precedence></precedence>
                      <parent>
                        <objectId></objectId>
                      </parent>
                      <securityGroupBinding>
                        <objectId></objectId>
                      </securityGroupBinding>
                      <securityGroupBinding>
                        ...
                      </securityGroupBinding>
                      ...
                      ...
                      <securityGroupBinding>
                        ...
                      </securityGroupBinding>
                      <actionsByCategory>
                        <category>firewall</category>
                        <action class="firewallSecurityAction">
                          <name>name</name>
                          <description>description</description>
                          <category></category>
                          <actionType></actionType>
                          <isActionEnforced></isActionEnforced>
                          <isActive></isActive>
                          <isEnabled></isEnabled>
                          <secondarySecurityGroup>
                            <objectId></objectId>
                          </secondarySecurityGroup>
                          <secondarySecurityGroup>
                            ...
                          </secondarySecurityGroup>
                          ...
                          ...
                          <secondarySecurityGroup>
                            ...
                          </secondarySecurityGroup>
                          <applications>
                            <application>
                              <objectId></objectId>
                            </application>
                            <applicationGroup>
                              <objectId></objectId>
                            </applicationGroup>
                            ...
                            ...
                          </applications>
                          <logged></logged>
                          <action></action>
                          <direction></direction>
                          <outsideSecondaryContainer></outsideSecondaryContainer>
                        </action>
                        <action>
                          ...
                        </action>
                        ...
                        ...
                        <action>
                          ...
                        </action>
                      </actionsByCategory>
                      <actionsByCategory>
                        <category>endpoint</category>
                        <action class="endpointSecurityAction">
                          <name>name</name>
                          <description>description</description>
                          <category></category>
                          <actionType></actionType>
                          <isActionEnforced></isActionEnforced>
                          <isActive></isActive>
                          <isEnabled></isEnabled>
                          <serviceId></serviceId>
                          <vendorTemplateId></vendorTemplateId>
                        </action>
                      </actionsByCategory>
                      <actionsByCategory>
                        <category>traffic_steering</category>
                        <action class="trafficSteeringSecurityAction">
                          <name>name</name>
                          <description>description</description>
                          <category></category>
                          <actionType></actionType>
                          <isActionEnforced></isActionEnforced>
                          <isActive></isActive>
                          <isEnabled></isEnabled>
                          <logged></logged>
                          <redirect></redirect>
                          <serviceProfile>
                            <objectId></objectId>
                          </serviceProfile>
                        </action>
                      </actionsByCategory>
                    </securityPolicy>
                    <name></name>
                    <description></description>
                    <precedence></precedence>
                    <parent>
                      <objectId></objectId>
                    </parent>
                    <securityGroupBinding>
                      <objectId></objectId>
                    </securityGroupBinding>
                    <securityGroupBinding>
                      ...
                    </securityGroupBinding>
                    ...
                    ...
                    <securityGroupBinding>
                      ...
                    </securityGroupBinding>
                    <actionsByCategory>
                      <category>firewall</category>
                      <action class="firewallSecurityAction">
                        <name>name</name>
                        <description>description</description>
                        <category></category>
                        <actionType></actionType>
                        <isActionEnforced></isActionEnforced>
                        <isActive></isActive>
                        <isEnabled></isEnabled>
                        <secondarySecurityGroup>
                          <objectId></objectId>
                        </secondarySecurityGroup>
                        <secondarySecurityGroup>
                          ...
                        </secondarySecurityGroup>
                        ...
                        ...
                        <secondarySecurityGroup>
                          ...
                        </secondarySecurityGroup>
                        <applications>
                          <application>
                            <objectId></objectId>
                          </application>
                          <applicationGroup>
                            <objectId></objectId>
                          </applicationGroup>
                          ...
                          ...
                        </applications>
                        <logged></logged>
                        <action></action>
                        <direction></direction>
                        <outsideSecondaryContainer></outsideSecondaryContainer>
                      </action>
                      <action>
                        ...
                      </action>
                      ...
                      ...
                      <action>
                        ...
                      </action>
                    </actionsByCategory>
                    <actionsByCategory>
                      <category>endpoint</category>
                      <action class="endpointSecurityAction">
                        <name>name</name>
                        <description>description</description>
                        <category></category>
                        <actionType></actionType>
                        <isActionEnforced></isActionEnforced>
                        <isActive></isActive>
                        <isEnabled></isEnabled>
                        <serviceId></serviceId>
                        <vendorTemplateId></vendorTemplateId>
                      </action>
                    </actionsByCategory>
                    <actionsByCategory>
                      <category>traffic_steering</category>
                      <action class="trafficSteeringSecurityAction">
                        <name>name</name>
                        <description>description</description>
                        <category></category>
                        <actionType></actionType>
                        <isActionEnforced></isActionEnforced>
                        <isActive></isActive>
                        <isEnabled></isEnabled>
                        <logged></logged>
                        <redirect></redirect>
                        <serviceProfile>
                          <objectId></objectId>
                        </serviceProfile>
                      </action>
                    </actionsByCategory>
                  </securityPolicy>
      put:
        displayName: securityPolicyIDUpdate
        description: |
          Edit a security policy.
          
          To update a security policy, you must first fetch it.
          Then edit the received XML and pass it back as the input. The
          specified configuration replaces the current configuration.
          
          Security group mappings provided in the PUT call replaces the
          security group mappings for the security policy. To remove all
          mappings, delete the securityGroupBindings parameter.
          
          You can add or update actions for the security policy by editing the
          actionsByCategory parameter. To remove all actions (belonging to all
          categories), delete the actionsByCategory parameter. To remove
          actions belonging to a specific category, delete the block for that
          category.
        body:
          application/xml:
            example: |
              <securityPolicy>
                <securityPolicy>
                  <name></name>
                  <description></description>
                  <precedence></precedence>
                  <parent>
                    <objectId></objectId>
                  </parent>
                  <securityGroupBinding>
                    <objectId></objectId>
                  </securityGroupBinding>
                  <actionsByCategory>
                    <category></category>
                    <action class="">
                      <name></name>
                      <description></description>
                      <category></category>
                      <actionType></actionType>
                      <isActionEnforced></isActionEnforced>
                      <isActive></isActive>
                      <isEnabled></isEnabled>
                      <secondarySecurityGroup>
                        <objectId></objectId>
                      </secondarySecurityGroup>
                      <applications>
                        <application>
                          <objectId></objectId>
                        </application>
                        <applicationGroup>
                          <objectId></objectId>
                        </applicationGroup>
                      </applications>
                      <logged></logged>
                      <scope>
                        <id></id>
                        <name></name>
                        <objectTypeName></objectTypeName>
                      </scope>
                    </action>
                    <direction></direction>
                    <outsideSecondaryContainer></outsideSecondaryContainer>
                  </actionsByCategory>
                </securityPolicy>
              </securityPolicy>
            schema: securityPolicyIDUpdate
      delete:
        displayName: securityPolicyIDDelete
        description: |
          Delete a security policy.
          
          When you delete a security policy, its child security policies and
          all the actions in it are deleted as well.
        queryParameters:
          force:
            type: boolean
            displayName: force
            description: |
              If set to true, the security policy is deleted even if it is in use.
            required: false
      /securityactions:
        displayName: securityActions
        description: |
          Working with Security Actions on a Security Policy
          -------------
        get:
          displayName: securityActionsRead
          description: |
            Retrieve all security actions applicable on a security policy.
            
            This list includes security actions from associated parent
            security policies, if any. Security actions per Execution Order
            Category are sorted based on the weight of security actions in
            descending order.
          responses:
            200:
              body:
                application/xml:
                  example: |
                    <securityPolicies>
                      <securityPolicy></securityPolicy>
                      <securityPolicy></securityPolicy>
                      ...
                      ...
                      <securityPolicy></securityPolicy>
                    </securityPolicies>
    /hierarchy:
      displayName: hierarchy
      description: |
        Working With Security Policy Configuration Hierarchies
        -----
      post:
        displayName: hierarchyCreate
        description: |
          Import a security policy configuration
          
          You can create multiple security policies and parent-child
          hierarchies using the data fetched through export. All objects
          including security policies, security groups and security actions
          are created on a global scope.
          
          The policy that is being imported needs to be included in the
          request body.
          
          If a suffix is specified, it is added after the names of the
          security policy, security action, and security group objects in the
          exported XML. The suffix can thus be used to differentiate locally
          created objects from imported ones.
          
          The location of the newly created security policy objects (multiple
          locations are separated by commas) is populated in the Location
          header of the response.
        queryParameters:
          suffix:
            displayName: suffix
            description:
              A suffix to add after the names of the objects in the imported
              XML.
            required: false
        body:
          application/xml:
            example: |
              <securityPolicyHierarchy>
                <name></name>
                <description></description>
                <securityPolicy></securityPolicy>
                <securityGroup></securityGroup>
              </securityPolicyHierarchy>
            schema: hierarchyCreate
      get:
        displayName: hierarchyRead
        description: |
          Export a Service Composer configuration (along with the
          security groups to which the security policies are mapped).
          You can save the response to a file.  The saved configuration can be
          used as a backup for situations where you may accidentally delete a
          policy configuration, or it can be exported for use in another NSX
          Manager environment.
          
          If a prefix is specified, it is added before the names of the
          security policy, security action, and security group objects in the
          exported XML. The prefix can thus be used to indicate the remote
          source from where the hierarchy was exported.
        queryParameters:
          policyIds:
            displayName: policyIds
            description: |
              Comma separated list of security policy IDs to export. If
              omitted, all security policy IDs are exported.
            required: false
          prefix:
            displayName: prefix
            description: |
              A prefix to add before the names of the objects in the exported
              XML.
            required: false
  /securityaction/category/virtualmachines:
    displayName: securityActionVM
    description: |
      Working with Virtual Machines with Security Actions Applied
      --------------
    get:
      displayName: securityActionVMRead
      description: |
        Retrieve all VirtualMachine objects on which security action of a
        given category and attribute has been applied.
      queryParameters:
        attributeKey:
          displayName: attributeKey
          description: Attribute key.
        attributeValue:
          displayName: attributeValue
          description: Attribute value.
      responses:
        200:
          body:
            application/xml:
              example: |
                <vmnodes>
                  <vmnode>
                    <vmId></vmId>
                    <vmName></vmName>
                  </vmnode>
                  <vmnode>
                    <vmId></vmId>
                    <vmName></vmName>
                  </vmnode>
                  ...
                  ...
                  <vmnode>
                    <vmId></vmId>
                    <vmName></vmName>
                  </vmnode>
                </vmnodes>
  /securitygroup/{ID}/securityactions:
    displayName: securityActionSecGroup
    description: |
      Working With Security Actions Applicable on Security Groups
      ----
    uriParameters:
      ID:
        displayName: ID
        description: Specified security group.
    get:
      displayName: securityActionRead
      description: |
        Retrieve all security actions applicable on a security group.
        
        Retrieve all security actions applicable on a security group for all
        ExecutionOrderCategories. The list is sorted based on the weight of
        security actions in descending order.  The **isActive** tag indicates
        if a securityaction will be applied (by the enforcement engine) on the
        security group.
      responses:
        200:
          body:
            application/xml:
              example: |
                <securityActionsByCategoryMap>
                  <actionsByCategory>
                    <category>firewall</category>
                    <action  class="firewallSecurityAction">
                      <objectId></objectId>
                      <objectTypeName></objectTypeName>
                      <vsmUuid></vsmUuid>
                      <revision></revision>
                      <type>
                        <typeName></typeName>
                      </type>
                      <name>name</name>
                      <description>description</description>
                      <category></category>
                      <executionOrder></executionOrder>
                      <actionType></actionType>
                      <isActionEnforced></isActionEnforced>
                      <isActive></isActive>
                      <isEnabled></isEnabled>
                      <secondarySecurityGroup>
                        <objectId></objectId>
                        <objectTypeName></objectTypeName>
                        <vsmUuid></vsmUuid>
                        <revision></revision>
                        <type>
                          <typeName></typeName>
                        </type>
                        <name>name</name>
                        <description>description</description>
                        <scope>
                          <id></id>
                          <objectTypeName></objectTypeName>
                          <name>name</name>
                          <description>description</description>
                        </scope>
                        <extendedAttributes></extendedAttributes>
                      </secondarySecurityGroup>
                      <secondarySecurityGroup>
                        ...
                      </secondarySecurityGroup>
                      ...
                      ...
                      <secondarySecurityGroup>
                        ...
                      </secondarySecurityGroup>
                      <securityPolicy>
                        <objectId></objectId>
                        <objectTypeName></objectTypeName>
                        <vsmUuid></vsmUuid>
                        <revision></revision>
                        <type>
                          <typeName></typeName>
                        </type>
                        <name>name</name>
                        <description>description</description>
                        <scope>
                          <id></id>
                          <objectTypeName></objectTypeName>
                          <name>name</name>
                          <description>description</description>
                        </scope>
                      </securityPolicy>
                      <invalidSecondaryContainers></invalidSecondaryContainers>
                      <applications>
                        <application>
                          <objectId></objectId>
                          <objectTypeName></objectTypeName>
                          <vsmUuid></vsmUuid>
                          <revision></revision>
                          <type>
                            <typeName></typeName>
                          </type>
                          <name></name>
                          <scope>
                            <id></id>
                            <objectTypeName></objectTypeName>
                            <name></name>
                          </scope>
                          <clientHandle></clientHandle>
                           <extendedAttributes></extendedAttributes>
                          <inheritanceAllowed></inheritanceAllowed>
                          <element>
                            <applicationProtocol></applicationProtocol>
                            <value></value>
                          </element>
                        </application>
                        <application>
                          ...
                        </application>
                        ...
                        ...
                      </applications>
                      <invalidApplications>false</invalidApplications>
                      <logged>false</logged>
                      <action>block</action>
                      <direction>inbound</direction>
                      <outsideSecondaryContainer>true</outsideSecondaryContainer>
                    </action>
                    <action>
                    </action>
                    ...
                    ...
                    <action>
                      ...
                    </action>
                  </actionsByCategory>
                  <actionsByCategory>
                    <category>endpoint</category>
                    <action class="endpointSecurityAction">
                      <objectId></objectId>
                      <objectTypeName></objectTypeName>
                      <vsmUuid></vsmUuid>
                      <revision></revision>
                      <type>
                        <typeName></typeName>
                      </type>
                      <name>name</name>
                      <description>description</description>
                      <category></category>
                      <executionOrder></executionOrder>
                      <actionType></actionType>
                      <isActionEnforced></isActionEnforced>
                      <isActive></isActive>
                      <isEnabled></isEnabled>
                      <securityPolicy>
                        <objectId></objectId>
                        <objectTypeName></objectTypeName>
                        <vsmUuid></vsmUuid>
                        <revision></revision>
                        <type>
                          <typeName></typeName>
                        </type>
                        <name></name>
                        <description></description>
                        <scope>
                          <id></id>
                          <objectTypeName></objectTypeName>
                          <name>name</name>
                          <description>description</description>
                        </scope>
                      </securityPolicy>
                      <serviceName></serviceName>
                      <serviceId></serviceId>
                      <invalidServiceId></invalidServiceId>
                      <ServiceProfile>
                        <objectId>serviceprofile-1</objectId>
                        ...
                      </ServiceProfile>
                      <invalidServiceProfile>false</invalidServiceProfile>
                    </action>
                    <action>
                    </action>
                    ...
                    ...
                    <action>
                      ...
                    </action>
                  </actionsByCategory>
                  <actionsByCategory>
                    <category>traffic_steering</category>
                    <action class="trafficSteeringSecurityAction">
                      <objectId></objectId>
                      <objectTypeName></objectTypeName>
                      <vsmUuid></vsmUuid>
                      <revision></revision>
                      <type>
                        <typeName></typeName>
                      </type>
                      <name>name</name>
                      <description>description</description>
                      <category></category>
                      <executionOrder></executionOrder>
                      <actionType></actionType>
                      <isActionEnforced></isActionEnforced>
                      <isActive></isActive>
                      <isEnabled></isEnabled>
                      <securityPolicy>
                        <objectId></objectId>
                        <objectTypeName></objectTypeName>
                        <vsmUuid></vsmUuid>
                        <revision></revision>
                        <type>
                          <typeName></typeName>
                        </type>
                        <name>name</name>
                        <description>description</description>
                        <scope>
                          <id></id>
                          <objectTypeName></objectTypeName>
                          <name>name</name>
                          <description>description</description>
                        </scope>
                      </securityPolicy>
                      <logged></logged>
                      <serviceProfile>
                        <objectId></objectId>
                        <objectTypeName></objectTypeName>
                        <vsmUuid></vsmUuid>
                        <revision></revision>
                        <type>
                          <typeName></typeName>
                        </type>
                        <name>P</name>
                        <clientHandle>
                        </clientHandle>
                         <extendedAttributes></extendedAttributes>
                        <profileAttributes>
                          <id></id>
                          <revision></revision>
                          <attribute>
                            <id></id>
                            <revision></revision>
                            <key></key>
                            <name></name>
                            <value></value>
                          </attribute>
                          <attribute>
                            ...
                          </attribute>
                        </profileAttributes>
                        <service>
                          <objectId></objectId>
                          <objectTypeName></objectTypeName>
                          <vsmUuid></vsmUuid>
                          <revision></revision>
                          <type>
                            <typeName></typeName>
                          </type>
                          <name>name</name>
                          <clientHandle></clientHandle>
                           <extendedAttributes></extendedAttributes>
                        </service>
                        <category></category>
                        <vendorTemplate>
                          <id></id>
                          <revision></revision>
                          <name>name</name>
                          <idFromVendor></idFromVendor>
                          <vendorAttributes>
                            <id></id>
                            <revision></revision>
                          </vendorAttributes>
                        </vendorTemplate>
                        <status></status>
                        <vendorAttributes>
                          <id></id>
                          <revision></revision>
                        </vendorAttributes>
                        <runtime>
                          <nonCompliantDvpg/>
                          <nonCompliantVwire></nonCompliantVwire>
                        </runtime>
                        <serviceProfileBinding>
                          <distributedVirtualPortGroups></distributedVirtualPortGroups>
                          <virtualWires></virtualWires>
                          <excludedVnics></excludedVnics>
                          <virtualServers></virtualServers>
                        </serviceProfileBinding>
                      </serviceProfile>
                      <redirect></redirect>
                    </action>
                    <action>
                    </action>
                    ...
                    ...
                    <action>
                      ...
                    </action>
                  </actionsByCategory>
                </securityActionsByCategoryMap>
  /virtualmachine/{ID}/securityactions:
    displayName: vmApplicableSecurityAction
    description: |
      Working with Security Actions Applicable on a Virtual Machine
      ----
    uriParameters:
      ID:
        displayName: ID
        description: VM ID
    get:
      displayName: vmApplicableSecurityActionRead # dupfix vmApplicableSecurityAction
      description: |
        Retrieve the security actions applicable on a virtual machine.
  /serviceprovider/firewall:
    displayName: serviceComposerDFW # existing change serviceComposerDFWSync
    description: |
      Working with Service Composer Firewall
      --------------
    get:
      displayName: serviceComposerDFWRead # existing change serviceComposerDFWSyncRead
      description: |
        If Service Composer goes out of sync with Distributed Firewall, you
        must re-synchronize Service Composer rules with firewall rules. If
        Service Composer stays out of sync, firewall configuration may not
        stay enforced as expected.
        
        This GET method can perform the following functions, depending on the
        request body provided. **Note:** Some REST clients do not allow you to
        specify a request body with a GET request.
        
        ### Check if Service Composer firewall and Distributed Firewall are in sync
        
        **Note: Deprecated.** Use `GET /2.0/services/policy/securitypolicy/status` instead. 
        
        * If they are in sync, the response body does not contain any data.  
        * If they are out of sync, the response body contains the unix timestamp representing the time since when Service Composer firewall is out of sync.
        
        ```
        <keyValues>
          <keyValue>
            <key>getServiceComposerFirewallOutOfSyncTimestamp</key>
          </keyValue>
        </keyValues>
        ```
        
        ### Synchronize Service Composer firewall with Distributed Firewall
        
        ```
        <keyValues>
          <keyValue>
            <key>forceSync</key>
          </keyValue>
        </keyValues>
        ```
        
        ### Retrieve the state of the auto save draft property in Service Composer
        
        Retrieve the state of the auto save draft property in Service
        Composer. Response is true or false.
        
        ```
        <keyValues>
          <keyValue>
            <key>getAutoSaveDraft</key>
          </keyValue>
        </keyValues>
        ```
        
        ### Change the state of the auto save draft property in Service Composer
        
        **Note: Deprecated.**
        
        Change the state of the auto save draft property in Service Composer.
        Provide request body value of true or false.
        
        ```
        <keyValues>
          <keyValue>
            <key>autoSaveDraft</key>
            <value>false</value>
          </keyValue>
        </keyValues> 
        ```
        
        **Method history:**
        
          Release | Modification
          --------|-------------
          6.2.3 | Method updated and some functions deprecated. Changing auto save draft with the **autoSaveDraft** parameter is deprecated, and will be removed in a future release.  <br>The default setting of **autoSaveDraft** is changed from *true* to *false*.<br>Method to check if Service Composer and Distributed Firewall are in sync is deprecated, and will be removed in a future release. Use `GET /2.0/services/policy/securitypolicy/status` instead.
      body:
        application/xml:
          example: |
            <keyValues>
              <keyValue>
                <key></key>
                <value></value>
              </keyValue>
            </keyValues> 
  /securitygroup/{ID}/securitypolicies:
    displayName: secGroupPolicies
    description: |
      Working with Security Policies Mapped to a Security Group
      -----
    uriParameters:
      ID:
        displayName: ID
        description: Specified security group ID
    get:
      displayName: secGroupPoliciesRead
      description: Retrieve security policies mapped to a security group.
/2.0/services/snmp:
  # new is 6.2.3
  displayName: snmp
  description: |
    Working with SNMP
    =================
    NSX Manager receives events from other NSX components, including NSX Edge,
    network fabric, and hypervisors.
    
    You can configure NSX Manager to forward SNMP traps to an SNMP Manager.

  /status:
    displayName: snmpStatus
    description: |
      Working with SNMP Status Settings
      -----
      You can configure settings for SNMP on the NSX Manager.
      
      -------------------------
      Parameter | Description
      ----------|------------
      serviceStatus | Boolean. Set to true to enable SNMP. There must be at least one SNMP manager configured to enable SNMP.
      groupNotification | Boolean. Set to true to group similar SNMP notifications. This reduces the number of notifications being sent out, which can improve SNMP manager performance when there is a high volume of SNMP notifications.
    get:
      displayName: snmpStatusRead
      description: |
        Retrieve SNMP status settings.
        
        **Method history:**
        
        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.
      responses:
        200:
          body:
            application/xml:
              example: |
                <snmpServiceStatus>
                  <serviceStatus>false</serviceStatus>
                  <groupedNotification>true</groupedNotification>
                </snmpServiceStatus>
    put:
      displayName: snmpStatusUpdate
      description: |
        Update SNMP status settings.
        
        **Method history:**
        
        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.
      body:
        application/xml:
          example: |
            <snmpServiceStatus>
              <serviceStatus>true</serviceStatus>
              <groupedNotification>true</groupedNotification>
            </snmpServiceStatus>
  /manager:
    displayName: snmpManagers
    description: |
      Working with SNMP Managers
      -----
    get:
      displayName: snmpManagersList
      description: |
        Retrieve information about SNMP managers.
        
        **Method history:**
        
        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.
      responses:
        200:
          body:
            application/xml:
              example: |
                <snmpManagers>
                  <snmpManager>
                    <managerId>1330</managerId>
                    <ip>10.10.10.10</ip>
                    <port>162</port>
                    <communityString>NSXManager</communityString>
                    <enabled>true</enabled>
                  </snmpManager>
                  <snmpManager>
                    <managerId>1331</managerId>
                    <ip>10.10.10.11</ip>
                    <port>162</port>
                    <communityString>NSXManager</communityString>
                    <enabled>true</enabled>
                  </snmpManager>
                </snmpManagers>
    post:
      displayName: snmpManagerCreate
      description: |
        Add an SNMP manager.
        
        **Method history:**
        
        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.
      body:
        application/xml:
          example: |
            <snmpManager>
              <ip>10.10.10.10</ip>
              <port>162</port>
              <communityString>NSXManager</communityString>
              <enabled>true</enabled>
            </snmpManager>
    /{managerId}:
      displayName: snmpManager
      description: |
        Working with a Specific SNMP Manager
        ------------------------------------
      uriParameters:
        managerId:
          displayName: managerId
          description: ID of the SNMP manager.
      get:
        displayName: snmpManagerRead
        description: |
          Retrieve information about the specified SNMP manager.
          
          **Method history:**
          
          Release | Modification
          --------|-------------
          6.2.3 | Method introduced.
        responses:
          200:
            body:
              application/xml:
                example: |
                  <snmpManager>
                    <managerId>1330</managerId>
                    <ip>10.10.10.10</ip>
                    <port>162</port>
                    <communityString>NSXManager</communityString>
                    <enabled>true</enabled>
                  </snmpManager>
      put:
        displayName: snmpManagerUpdate
        description: |
          Update an SNMP manager configuration.
          
          **Method history:**
          
          Release | Modification
          --------|-------------
          6.2.3 | Method introduced.
        body:
          application/xml:
            example: |
              <snmpManager>
                <managerId>1330</managerId>
                <ip>10.10.10.10</ip>
                <port>162</port>
                <communityString>NSXManager</communityString>
                <enabled>false</enabled>
              </snmpManager>
      delete:
        displayName: snmpManagerDelete
        description: |
          Delete an SNMP manager configuration.
          
          **Method history:**
          
          Release | Modification
          --------|-------------
          6.2.3 | Method introduced.
  /trap:
    displayName: snmpTraps
    description: |
      Working with SNMP Traps
      -----------------------
    get:
      displayName: snmpTrapsList
      description: |
        Retrieve information about SNMP traps.
        
        **Method history:**
        
        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.
      responses:
        200:
          body:
            application/xml:
              example: |
                <trapConfigs>
                  <trapConfig>
                    <eventId>300001</eventId>
                    <oid>1.3.6.1.4.1.6876.90.1.2.10.0.1</oid>
                    <componentName>ServiceComposer</componentName>
                    <enabled>true</enabled>
                  </trapConfig>
                  <trapConfig>
                    <eventId>300009</eventId>
                    <oid>1.3.6.1.4.1.6876.90.1.2.10.0.10</oid>
                    <componentName>ServiceComposer</componentName>
                    <enabled>true</enabled>
                  </trapConfig>
                  ...
                </trapConfigs>
    /{oid}:
      displayName: snmpTrap
      description: |
        Working with a Specific SNMP Trap
        -----------------------
      uriParameters:
        oid:
          displayName: oid
          description: SNMP object identifier.
      get:
        displayName: snmpTrapRead
        description: |
          Retrieve information about the specified SNMP trap.
          
          **Method history:**
          
          Release | Modification
          --------|-------------
          6.2.3 | Method introduced.
        responses:
          200:
            body:
              application/xml:
                example: |
                  <trapConfig>
                    <eventId>321100</eventId>
                    <oid>1.3.6.1.4.1.6876.90.1.2.9.0.6</oid>
                    <componentName>Messaging</componentName>
                    <enabled>true</enabled>
                  </trapConfig>
      put:
        displayName: snmpTrapUpdate
        description: |
          Update the specified SNMP trap.
          
          **Method history:**
          
          Release | Modification
          --------|-------------
          6.2.3 | Method introduced.
        body:
          application/xml:
            example: |
              <trapConfig>
                <oid>1.3.6.1.4.1.6876.90.1.2.3.0.1</oid>
                <enabled>false</enabled>
              </trapConfig>
/1.0/nsx/cli:
  displayName: nsxCli
  description: |
    Working with the Central CLI
    =======
  post:
    displayName: nsxCliExecute
    description: |
      The central command-line interface (central CLI) commands are run from the
      NSX Manager command line, and retrieve information from the NSX Manager and other
      devices. These commands can also be executed in the API.
      
      You can insert any valid Central CLI command as the **command**
      parameter. For a complete list of the Central CLI commands executable
      through the API, please see the Central CLI chapter of the *NSX Command
      Line Interface Reference*.
    queryParameters:
      action:
        displayName: action
        description: Use *action=execute*.
        required: true
    headers:
      Accept:
        displayName: Accept
        description: Specify *text/plain*.
        required: true
    body:
      application/xml:
        example: |
          <nsxcli>
            <command>show logical-switch list host host-21 vni</command>
          </nsxcli>
        schema: nsxCliExecute
/2.0/vdn/inventory:
  displayName: inventoryStatus
  description: |
    Communication Status
    ====================
    This feature allows the user to check the connection status between the
    NSX Manager and hosts. A hash map is used to hold all hosts' connection
    status. It keeps track of the latest heartbeat from each host.  When
    querying a host’s connection status, NSX Manager will get the latest
    heartbeat information to compare the last heartbeat time and current time.
    If the duration is longer than a threshold, it returns *DOWN*, otherwise
    it returns *UP*. If no last heartbeat information is found and this host
    has not been prepared or the netcpa version on this host is lower than
    6.2.0, it will return *NOT_AVAILABLE*.  But if no last heartbeat
    information is found and the host has been prepared with netcpa version no
    less than 6.2.0, it will return *DOWN*. When a host has been unprepared,
    its heartbeat information will be removed from the NSX Manager memory.

  /host/{hostId}/connection/status:
    displayName: inventoryStatusHost
    description: |
      Communication Status of a Specific Host
      ---------------------------------------
    uriParameters:
      hostId:
        displayName: hostId
        required: true
        description: ID of the host to check.
    get:
      displayName: inventoryStatusHostRead
      description: |
        Retrieve the status of the specified host.
        
        History:
        
        Release | Modification
        --------|-------------
        6.2.3 | Method updated. Introduced **hostToControllerConnectionErrors** array.<br>Deprecated **fullSyncCount** parameter. Parameter is still present, but always has value of -1.
      responses:
        200:
          body:
            application/xml:
              example: |
                <hostConnStatus>
                  <hostId>host-32</hostId>
                  <nsxMgrToFirewallAgentConn>UP</nsxMgrToFirewallAgentConn>
                  <nsxMgrToControlPlaneAgentConn>UP</nsxMgrToControlPlaneAgentConn>
                  <hostToControllerConn>UP</hostToControllerConn>
                  <fullSyncCount>-1</fullSyncCount>
                </hostConnStatus>
  /hosts/connection/status:
    displayName: inventoryStatusHosts
    description: |
      Communication Status of a List of Hosts
      ---------------------------------------
    get:
      displayName: inventoryStatusHostsList
      description: |
        Retrieve the status of a list of hosts.
        
        Release | Modification
        --------|-------------
        6.2.3 | Method updated. Introduced **hostToControllerConnectionErrors** array.<br>Deprecated **fullSyncCount** parameter. Parameter is still present, but always has value of -1.
        
      queryParameters:
        hostId:
          displayName: hostId
          required: true
          description: |
            ID of a host to check. You can provide multiple hosts with
            ?hostId=*host1*&hostId=*host2*...
      responses:
        200:
          body:
            application/xml:
              example: |
                <hostConnStatusList>
                  <hostConnStatuses>
                    <hostConnStatus>
                      <hostId>host-31</hostId>
                      <nsxMgrToFirewallAgentConn>UP</nsxMgrToFirewallAgentConn>
                      <nsxMgrToControlPlaneAgentConn>UP</nsxMgrToControlPlaneAgentConn>
                      <hostToControllerConn>UP</hostToControllerConn>
                      <fullSyncCount>-1</fullSyncCount>
                    </hostConnStatus>
                    <hostConnStatus>
                      <hostId>host-32</hostId>
                      <nsxMgrToFirewallAgentConn>UP</nsxMgrToFirewallAgentConn>
                      <nsxMgrToControlPlaneAgentConn>UP</nsxMgrToControlPlaneAgentConn>
                      <hostToControllerConn>DOWN</hostToControllerConn>
                      <fullSyncCount>-1</fullSyncCount>
                      <hostToControllerConnectionErrors>
                        <hostToControllerConnectionError>
                          <controllerIp>10.160.203.236</controllerIp>
                          <errorCode>1255604</errorCode>
                          <errorMessage>Connection Refused</errorMessage>
                          </hostToControllerConnectionError>
                          <hostToControllerConnectionError>
                          <controllerIp>10.160.203.237</controllerIp>
                          <errorCode>1255603</errorCode>
                          <errorMessage>SSL Handshake Failure</errorMessage>
                        </hostToControllerConnectionError>
                      </hostToControllerConnectionErrors>
                    </hostConnStatus>
                    ...
                  </hostConnStatuses>
                </hostConnStatusList>
/2.0/vdn/hardwaregateways:
  displayName: hardwareGateways
  description: |
    Working with Hardware Gateways
    ============
  post:
    displayName: hardwareGatewayCreate
    description: |
      Install a hardware gateway.
      
      **bfdEnabled** is true by default.
      
      **Method history:**
      
      Release | Modification
      --------|-------------
      6.2.3 | Method introduced.
    body:
      application/xml:
        example: |
          <hardwareGatewaySpec>
            <name></name>
            <description></description>
            <certificate></certificate>
            <bfdEnabled></bfdEnabled>
          </hardwareGatewaySpec>
  get:
    displayName: hardwareGatewaysList
    description: |
      Retrieve information about all hardware gateways.
      
      **Method history:**
      
      Release | Modification
      --------|-------------
      6.2.3 | Method introduced.
    responses:
      200:
        body:
          application/xml:
            example: |
              <list>
                  <hardwareGateway>
                    <objectId>torgateway-1</objectId>
                    <revision>0</revision>
                    <name>torgateway1</name>
                    <description>this is tor instance 1</description>
                    <clientHandle />
                    <isUniversal>false</isUniversal>
                    <universalRevision>0</universalRevision>
                    <uuid>6536bcf5-2f55-47f6-8b26-9fa632061d8c</uuid>
                    <status>UP</status>
                    <thumbprint>B9:0E:E9:6C:AA:7B:AD:11:64:4C:33:92:4E:0C:D8:16:10:95:02:A7</thumbprint>
                    <bfdEnabled>true</bfdEnabled>
                    <managementIp>10.116.255.160</managementIp>
                    <bindingCount>2</bindingCount>
                  </hardwareGateway>
                  <hardwareGateway>
                    <objectId>torgateway-2</objectId>
                    <revision>0</revision>
                    <name>torgateway2</name>
                    <description>this is tor instance 2</description>
                    <clientHandle />
                    <isUniversal>false</isUniversal>
                    <universalRevision>0</universalRevision>
                    <uuid>f1e9b733-c0c3-4905-b00d-4bd6d8649f48</uuid>
                    <status>UP</status>
                    <thumbprint>3C:9D:C0:9B:F7:57:AF:EA:6A:9F:49:27:7B:23:25:D3:5E:0D:53:ED</thumbprint>
                    <bfdEnabled>true</bfdEnabled>
                    <managementIp>10.116.251.149</managementIp>
                    <bindingCount>2</bindingCount>
                  </hardwareGateway>
              </list>
  /{hardwareGatewayId}:
    displayName: hardwareGatewayId
    description: |
      Working With a Specific Hardware Gateway
      ----
    uriParameters:
      hardwareGatewayId:
        displayName: hardwareGatewayId
        description: Object ID of the hardware gateway.
        required: true
    get:
      displayName: hardwareGatewayRead
      description: |
        Retrieve information about the specified hardware gateway.
        
        **Method history:**
        
        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.
      responses:
        200:
          body:
            application/xml:
              example: |
                <hardwareGateway>
                  <objectId>torgateway-1</objectId>
                  <revision>0</revision>
                  <name>torgateway1</name>
                  <description>this is tor instance 1</description>
                  <clientHandle />
                  <isUniversal>false</isUniversal>
                  <universalRevision>0</universalRevision>
                  <uuid>6536bcf5-2f55-47f6-8b26-9fa632061d8c</uuid>
                  <status>UP</status>
                  <thumbprint>B9:0E:E9:6C:AA:7B:AD:11:64:4C:33:92:4E:0C:D8:16:10:95:02:A7</thumbprint>
                  <bfdEnabled>true</bfdEnabled>
                  <managementIp>10.116.255.160</managementIp>
                  <bindingCount>2</bindingCount>
                </hardwareGateway>
    put:
      displayName: hardwareGatewayUpdate
      description: |
        Update the specified hardware gateway.
        
        **Method history:**
        
        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.
      body:
        application/xml:
          example: |
            <hardwareGatewaySpec>
              <name></name>
              <description></description>
              <certificate></certificate>
              <bfdEnabled></bfdEnabled>
            </hardwareGatewaySpec>
    delete:
      displayName: hardwareGatewayDelete
      description: |
        Delete the specified hardware gateway.
        
        **Method history:**
        
        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.
    /switches:
      displayName: hardwareGatewaySwitches
      description: | 
        Working With Switches on a Specific Hardware Gateway
        -----
      get:
        displayName: hardwareGatewaySwitchesList
        description: |
          Retrieve information about switches on the specified hardware
          gateway.
          
          **Method history:**
          
          Release | Modification
          --------|-------------
          6.2.3 | Method introduced.
        responses:
          200:
            body:
              application/xml:
                example: |
                  <hardwareGatewaySwitches>
                    <hardwareGatewaySwitch>
                      <switchname>1-switch-579</switchname>
                      <description />
                      <faults />
                    </hardwareGatewaySwitch>
                    <hardwareGatewayId>torgateway-1</hardwareGatewayId>
                  </hardwareGatewaySwitches>
      /{switchName}:
        displayName: hardwareGatewaySwitch
        description: |
          Working With a Specific Switch on a Specific Hardware Gateway
          -----
        uriParameters:
          switchName:
            displayName: switchName
            description: Switch Name
        /switchports:
          displayName: hardwareGatewaySwitchPorts
          description: |
            Working With Ports on a Specific Switch on a Specific Hardware Gateway
            ----
          get:
            displayName: hardwareGatewaySwitchPortsList
            description: |
              Retrive information about the hardware gateway switch ports for
              the specified switch and hardware gateway.
              
              **Method history:**
              
              Release | Modification
              --------|-------------
              6.2.3 | Method introduced.
            responses:
              200:
                body:
                  application/xml:
                    example: |
                      <hardwareGatewaySwitchPorts>
                          <hardwareGatewaySwitchPort>
                            <portname>p4</portname>
                            <description />
                            <faults />
                          </hardwareGatewaySwitchPort>
                          <hardwareGatewaySwitchPort>
                            <portname>p3</portname>
                            <description />
                            <faults />
                          </hardwareGatewaySwitchPort>
                          <hardwareGatewaySwitchPort>
                            <portname>p2</portname>
                            <description />
                            <faults />
                          </hardwareGatewaySwitchPort>
                          <hardwareGatewaySwitchPort>
                            <portname>p1</portname>
                            <description />
                            <faults />
                          </hardwareGatewaySwitchPort>
                          <hardwareGatewaySwitch>
                            <switchname>1-switch-579</switchname>
                          </hardwareGatewaySwitch>
                          <hardwareGatewayId>torgateway-1</hardwareGatewayId>
                      </hardwareGatewaySwitchPorts>
  /replicationcluster:
    displayName: hardwareGatewayReplicationCluster
    description: |
      Working With the Hardware Gateway Replication Cluster
      ----
    put:
      displayName: hardwareGatewayReplicationClusterUpdate
      description: |
        Update the hardware gateway replication cluster.
        
        Add or remove hosts on a replication cluster.
        
        **Method history:**
        
        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.
      body:
        appplication/xml:
          example: |
            <replicationCluster>
              <hosts>
                <basicinfo>
                  <objectId>host-20</objectId>
                </basicinfo>
                <basicinfo>
                  <objectId>host-21</objectId>
                </basicinfo>
                <basicinfo>
                  <objectId>host-26</objectId>
                </basicinfo>
              </hosts>
            </replicationCluster>
    get:
      displayName: hardwareGatewayReplicationClusterRead
      description: |
        Retrieve information about the hardware gateway replication cluster.
        
        **Method history:**
        
        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.
      responses:
        200:
          body:
            application/xml:
              example: |
                <replicationCluster>
                  <hosts>
                    <basicinfo>
                      <objectId>host-26</objectId>
                      <objectTypeName>HostSystem</objectTypeName>
                      <vsmUuid>422874E3-6873-972C-DE9E-67D5B846042E</vsmUuid>
                      <nodeId>e5a97efd-89e1-44b1-bfe8-9d07a8d92f08</nodeId>
                      <revision>32</revision>
                      <type>
                        <typeName>HostSystem</typeName>
                      </type>
                      <name>10.116.254.9</name>
                      <scope>
                        <id>domain-c24</id>
                        <objectTypeName>ClusterComputeResource</objectTypeName>
                        <name>ComputeCluster2-$$</name>
                      </scope>
                      <clientHandle />
                      <extendedAttributes />
                      <isUniversal>false</isUniversal>
                      <universalRevision>0</universalRevision>
                    </basicinfo>
                    <basicinfo>
                      <objectId>host-21</objectId>
                      <objectTypeName>HostSystem</objectTypeName>
                      <vsmUuid>422874E3-6873-972C-DE9E-67D5B846042E</vsmUuid>
                      <nodeId>e5a97efd-89e1-44b1-bfe8-9d07a8d92f08</nodeId>
                      <revision>31</revision>
                      <type>
                        <typeName>HostSystem</typeName>
                      </type>
                      <name>10.116.247.220</name>
                      <scope>
                        <id>domain-c18</id>
                        <objectTypeName>ClusterComputeResource</objectTypeName>
                        <name>ComputeCluster1-$$</name>
                      </scope>
                      <clientHandle />
                      <extendedAttributes />
                      <isUniversal>false</isUniversal>
                      <universalRevision>0</universalRevision>
                    </basicinfo>
                    <basicinfo>
                      <objectId>host-20</objectId>
                      <objectTypeName>HostSystem</objectTypeName>
                      <vsmUuid>422874E3-6873-972C-DE9E-67D5B846042E</vsmUuid>
                      <nodeId>e5a97efd-89e1-44b1-bfe8-9d07a8d92f08</nodeId>
                      <revision>33</revision>
                      <type>
                        <typeName>HostSystem</typeName>
                      </type>
                      <name>10.116.254.157</name>
                      <scope>
                        <id>domain-c18</id>
                        <objectTypeName>ClusterComputeResource</objectTypeName>
                        <name>ComputeCluster1-$$</name>
                      </scope>
                      <clientHandle />
                      <extendedAttributes />
                      <isUniversal>false</isUniversal>
                      <universalRevision>0</universalRevision>
                    </basicinfo>
                  </hosts>
                </replicationCluster>
  /bindings:
    displayName: hardwareGatewayBindings
    description: |
      Retrieve Information About Hardware Gateway Bindings
      -----
    post:
      displayName: hardwareGatewayBindingCreate
      description: |
        Create a hardware gateway binding.
        
        **Method history:**
        
        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.
      body:
        application/xml:
          example: |
            <hardwareGatewayBinding>
              <hardwareGatewayId></hardwareGatewayId>
              <vlan></vlan>
              <switchName></switchName>
              <portName></portName>
            </hardwareGatewayBinding>
    get:
      displayName: hardwareGatewayBindingsList
      description: |
        Retrieve information about hardware gateway bindings.
        
        **Method history:**
        
        Release | Modification
        --------|-------------
        6.2.3 | Method introduced.
      queryParameters:
        hardwareGatewayId:
          displayName: hardwareGatewayId
          description: ID of the hardware gateway.
          required: false
          type: string
        vni:
          displayName: vni
          description: VNI of the logical switch.
          required: false
          type: integer
      responses:
        200:
          body:
            application/xml:
              example: |
                <hardwareGatewayBinding>
                  <id>hardware gateway binding id</id>
                  <hardwareGatewayId>hwgateway1</hardwareGatewayId>
                  <vlan>201</vlan>
                  <switchName>s1</switchName>
                  <portname>s1</portname>
                  <virtualWire>virtualwire-1</virtualWire>
                  <vni>5000</vni>
                </hardwareGatewayBinding>
    /{bindingId}:
      displayName: hardwareGatewayBinding
      description: |
        Working With a Specific Hardware Gateway Binding
        -----
      uriParameters:
        bindingId:
          displayName: bindingId
          description: hardware gateway binding ID.
      get:
        displayName: hardwareGatewayBindingRead
        description: |
          Retrieve information about the specified hardware gateway binding.
          
          **Method history:**
          
          Release | Modification
          --------|-------------
          6.2.3 | Method introduced.
      put:
        displayName: hardwareGatewayBindingUpdate
        description: |
          Update the specified hardware gateway binding.
          
          You can update the binding parameters. This API will fail if:
          * the specified *hardwareGatewayId* does not exist.
          * the specified logical switch (*virtualWire*) is not present or there is a software
            gateway on the binding.
          * the new binding value is a duplicate of an existing binding.
          
          **Method history:**
          
          Release | Modification
          --------|-------------
          6.2.3 | Method introduced.
        body:
          application/xml:
            example: |
              <hardwareGatewayBinding>
                <hardwareGatewayId>hardwaregateway1</hardwareGatewayId>
                <vlan>201</vlan>
                <switchName>s1</switchName>
                <portname>s1</portname>
                <virtualWire>virtualwire-1</virtualWire>
              </hardwareGatewayBinding>
      delete:
        displayName: hardwareGatewayBindingDelete
        description: |
          Delete the specified hardware gateway binding.
          
          **Method history:**
          
          Release | Modification
          --------|-------------
          6.2.3 | Method introduced.
      /statistic:
        displayName: hardwareGatewayBindingStatistic
        description: |
          Working with Hardware Gateway Binding Statistics
          ----
        get:
          displayName: hardwareGatewayBindingStatisticRead # update existing addition hardwareGatewayBindingStatisticList
          description: |
            Retrieve statistics for the specified hardware gateway binding.
            
            **Method history:**
            
            Release | Modification
            --------|-------------
            6.2.3 | Method introduced.
          responses:
            200:
              body:
                application/xml:
                  example: |
                    <hardwareGatewayStats>
                      <bindingId>hwgwbinding-5</bindingId>
                      <timestamp>long type timestamp for this query response</timestamp>
                      <packetsFromLocal>23431</packetsFromLocal>
                      <bytesFromLocal>734754</bytesFromLocal>
                      <packetsToLocal>2343</packetsToLocal>
                      <bytesToLocal>74364</bytesToLocal>
                    </hardwareGatewayStats>
    /manage:
      displayName: hardwareGatewayBindingsManage
      description: |
        Working With Hardware Gateway Binding Objects
        ----
      post:
        displayName: hardwareGatewayBindingsManageOperations # update existing addition hardwareGatewayBindingsManageUpdate
        description: |
          Manage hardware gateway binding objects.
          
          Use this API to attach, detach, and update multiple bindings in a
          single API call.  This API accepts three lists for add, update, and
          delete. Each list accepts a hardwareGatewayManageBindingsItem with a
          full description of the new binding with its objectID. This API
          handles a maximum of 100 HardwareGatewayManageBindingsItem objects
          for each of the Add/Update/Delete lists.
          
          **Method history:**
          
          Release | Modification
          --------|-------------
          6.2.3 | Method introduced.
        body:
          application/xml:
            example: |
              <hardwareGatewayManageBindings>
                <addItems>
                  <hardwareGatewayManageBindingItem>
                    <hardwareGatewayId></hardwareGatewayId>
                    <virtualWireId></virtualWireId>
                    <switchName></switchName>
                    <portname></portname>
                    <vlan></vlan>
                    <virtualWire></virtualWire>
                  </hardwareGatewayManageBindingItem>
                </addItems>
                <updateItems>
                  <hardwareGatewayManageBindingItem>
                    <objectId></objectId>
                    <hardwareGatewayId></hardwareGatewayId>
                    <virtualWireId></virtualWireId>
                    <switchName></switchName>
                    <portname></portname>
                    <vlan></vlan>
                    <virtualWire></virtualWire>
                  </hardwareGatewayManageBindingItem>
                </updateItems>
                <deleteItems>
                  <hardwareGatewayManageBindingItem>
                    <objectId></objectId>
                  </hardwareGatewayManageBindingItem>
                </deleteItems>
              </hardwareGatewayManageBindings>
  /bfd:
    displayName: hardwareGatewayBfd
    description: |
      Working With Hardware Gateway BFD (Bidirectional Forwarding Detection)
      -----

    /config:
      displayName: hardwareGatewayBfdConfig
      description: |
        Working With Hardware Gateway BFD Configuration
        -----
      put:
        displayName: hardwareGatewayBfdConfigUpdate
        description: |
          Update global hardware gateway BFD configuration.
          
          **Method history:**
          
          Release | Modification
          --------|-------------
          6.2.3 | Method introduced.
        body:
          application/xml:
            example: |
              <hardwareGatewayBfdParams>
                <bfdEnabled>true</bfdEnabled>
                <probeInterval>100</probeInterval>
              </hardwareGatewayBfdParams>
      get:
        displayName: hardwareGatewayBfdConfigRead
        description: |
          Retrieve global hardware gateway BFD configuration.
          
          **Method history:**
          
          Release | Modification
          --------|-------------
          6.2.3 | Method introduced.
        responses:
          200:
            body:
              application/xml:
                example: |
                  <hardwareGatewayBfdParams>
                    <bfdEnabled>true</bfdEnabled>
                    <probeInterval>100</probeInterval>
                  </hardwareGatewayBfdParams>
    /status:
      displayName: hardwareGatewayBfdStatus
      description: |
        Working With Hardware Gateway BFD Tunnel Status
        ------
      get:
        displayName: hardwareGatewayBfdStatusRead
        description: |
          Retrieve hardware gateway BFD tunnel status for all tunnel
          endpoints, including hosts and hardware gateways.
          
          **Method history:**
          
          Release | Modification
          --------|-------------
          6.2.3 | Method introduced.
        responses:
          200:
            body:
              application/xml:
                example: |
                  <hardwareGatewayBfdStatusList>
                    <statuses>
                      <hardwareGatewayBfdStatus>
                        <probeSourceId>torgateway-2</probeSourceId>
                        <bfdTunnelList>
                          <bfdTunnelStatus>
                            <diagnostic>Neighbor Signaled Session Down</diagnostic>
                            <enabled>true</enabled>
                            <forwarding>true</forwarding>
                            <info></info>
                            <localVtepIp>172.21.145.84</localVtepIp>
                            <remoteDiagnostic>Control Detection Time Expired</remoteDiagnostic>
                            <remoteState>UP</remoteState>
                            <remoteVtepIp>172.19.152.226</remoteVtepIp>
                            <state>UP</state>
                          </bfdTunnelStatus>
                          <bfdTunnelStatus>
                            <diagnostic>Neighbor Signaled Session Down</diagnostic>
                            <enabled>true</enabled>
                            <forwarding>true</forwarding>
                            <info></info>
                            <localVtepIp>172.21.145.84</localVtepIp>
                            <remoteDiagnostic>Control Detection Time Expired</remoteDiagnostic>
                            <remoteState>UP</remoteState>
                            <remoteVtepIp>172.18.171.169</remoteVtepIp>
                            <state>UP</state>
                          </bfdTunnelStatus>
                          <bfdTunnelStatus>
                            <diagnostic>Neighbor Signaled Session Down</diagnostic>
                            <enabled>true</enabled>
                            <forwarding>true</forwarding>
                            <info></info>
                            <localVtepIp>172.21.145.84</localVtepIp>
                            <remoteDiagnostic>Control Detection Time Expired</remoteDiagnostic>
                            <remoteState>UP</remoteState>
                            <remoteVtepIp>172.18.171.168</remoteVtepIp>
                            <state>UP</state>
                          </bfdTunnelStatus>
                        </bfdTunnelList>
                      </hardwareGatewayBfdStatus>
                      <hardwareGatewayBfdStatus>
                        <probeSourceId>torgateway-1</probeSourceId>
                        <bfdTunnelList>
                          <bfdTunnelStatus>
                            <diagnostic>Control Detection Time Expired</diagnostic>
                            <enabled>true</enabled>
                            <forwarding>true</forwarding>
                            <info></info>
                            <localVtepIp>172.21.145.85</localVtepIp>
                            <remoteDiagnostic>Control Detection Time Expired</remoteDiagnostic>
                            <remoteState>UP</remoteState>
                            <remoteVtepIp>172.19.152.226</remoteVtepIp>
                            <state>UP</state>
                          </bfdTunnelStatus>
                          <bfdTunnelStatus>
                            <diagnostic>Neighbor Signaled Session Down</diagnostic>
                            <enabled>true</enabled>
                            <forwarding>true</forwarding>
                            <info></info>
                            <localVtepIp>172.21.145.85</localVtepIp>
                            <remoteDiagnostic>Control Detection Time Expired</remoteDiagnostic>
                            <remoteState>UP</remoteState>
                            <remoteVtepIp>172.18.171.168</remoteVtepIp>
                            <state>UP</state>
                          </bfdTunnelStatus>
                          <bfdTunnelStatus>
                            <diagnostic>Neighbor Signaled Session Down</diagnostic>
                            <enabled>true</enabled>
                            <forwarding>true</forwarding>
                            <info></info>
                            <localVtepIp>172.21.145.85</localVtepIp>
                            <remoteDiagnostic>Control Detection Time Expired</remoteDiagnostic>
                            <remoteState>UP</remoteState>
                            <remoteVtepIp>172.18.171.169</remoteVtepIp>
                            <state>UP</state>
                          </bfdTunnelStatus>
                        </bfdTunnelList>
                      </hardwareGatewayBfdStatus>
                    </statuses>
                  </hardwareGatewayBfdStatusList>
